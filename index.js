//ÔΩ°‚òÜ‚úº‚òÖ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚òÖ‚úº‚òÜÔΩ°
//.        LADY BUG BUTECA
//ÔΩ°‚òÜ‚úº‚òÖ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚òÖ‚úº‚òÜÔΩ°
const express = require('express');

const app = express();
const PORT = process.env.PORT || 3000; // Define a porta aqui

// Rota b√°sica
app.get('/', (req, res) => {
    res.send('Lady bot esta online!');
});

// Inicia o servidor
app.listen(PORT, () => {
    console.log(`Servidor rodando na porta ${PORT}`);
});
require("./dono.js")

const { 
default:
makeWASocket, 
downloadContentFromMessage,
generateWAMessageContent,
generateWAMessageFromContent,
makeCacheableSignalKeyStore,
StylePrivWaFromMessage,
delay,
useMultiFileAuthState,
BufferJSON,
proto,
close,
prepareWAMessageMedia, 
MediaType,
MessageType,
ChatModification,
DisconnectReason,
relayWAMessage,
fetchLatestBaileysVersion,
WASocket,
Browsers,
EyeWaSocket,
makeInMemoryStore,
} = require('@whiskeysockets/baileys');

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§MODULOS‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ //

const webp_mp4 = require("./arquivos/lib/webp_mp4.js");

const { getRandom} = require('./arquivos/funcoes/myfunc.js');

const { exec } = require("child_process")

const totalcmd = "1444"

const chalk = require('chalk');
const {
    audiodl,
    videodl
} = require('./yt-dl.js');

const { runtime } = require("./lib/myfunc")

const color = (text, color) => { return !color ? chalk.green(text) : chalk.keyword(color)(text) };

let pino = require('pino')

const YT = require('./lib/ytdl.js');

const yts = require("yt-search");

const fs = require('fs')

const PhoneNumber = require('awesome-phonenumber')

const cfonts = require('cfonts')


const axios = require('axios');

const infoSystem = require('os')

const NodeCache = require('node-cache')

const readline = require('readline')

const util = require("util")

const path = require("path")

const fetch = require('node-fetch');

const speed = require('performance-now')

const moment = require('moment-timezone');

const ffmpeg = require('fluent-ffmpeg');

const mimetype = require("mime-types")

const BodyForm = require("form-data")

const { Boom }  = require('@hapi/boom');

const crypto = require('crypto');

const cheerio = require('cheerio');

const { getBuffer, getGroupAdmins,} = require('./datab/myfunc.js')

const { Configuration, OpenAIApi } = require("openai");

const { menu } = require('./menus/menu.js')

const { logos } = require('./menus/logos.js')

const { criado } = require('./menus/criador.js')

const { menuvip } = require('./menus/menuvip.js')

const { brincadeiras } = require('./menus/brincadeiras.js')

const { menuseries } = require('./menus/menuseries.js')

const { menurpg } = require('./menus/menurpg')

const { pesquisas } = require('./menus/pesquisas.js')

const { menuia } = require('./menus/menuia.js')

const { contasgratis } = require('./menus/contasgratis.js') 

const { menutravazap } = require('./menus/menutravazap.js')

const { menuadm } = require('./menus/menuadm.js')

const { alugar } = require('./menus/alugar.js')

const { emoji2 } = require ('./settings.json')

const { menudono } = require('./menus/menudono.js')

const { menujogos } = require('./menus/menujogos.js')

const antilink = JSON.parse(fs.readFileSync('./loli/seguranca/antilink.json'))

const samih = JSON.parse(fs.readFileSync('./arquivos/usuarios/simi.json'));


const samih2 = JSON.parse(fs.readFileSync('./arquivos/funcoes/simi.json'));

const antilinkgp = JSON.parse(fs.readFileSync('./arquivos/antis/antilinkgp.json'))

const premium = JSON.parse(fs.readFileSync('./Premiums/usuarios/premium.json'));

const antiporn = JSON.parse(fs.readFileSync('./arquivos/antis/antiporn.json'))

const antidoc = JSON.parse(fs.readFileSync('./arquivos/antis/antidoc.json'))

const { conselhob } = require('./arquivos/funcoes/conselhob.js');

const antictt = JSON.parse(fs.readFileSync('./arquivos/antis/antictt.json'))

const casa = JSON.parse(fs.readFileSync('./funcoes_rpg/casa/casa.json'));

const modobn = JSON.parse(fs.readFileSync('./arquivos/grupos/brincadeiras.json'));

const antiflood = JSON.parse(fs.readFileSync('./arquivos/usuarios/antiflood.json'));

const limitefll = JSON.parse(fs.readFileSync('./arquivos/usuarios/flood.json'));

const registros = JSON.parse(fs.readFileSync('./arquivos/registro/registros.json'));

const antiloc = JSON.parse(fs.readFileSync('./arquivos/antis/antiloc.json'))

const antifake = JSON.parse(fs.readFileSync('./arquivos/antis/antifake.json'))

const carab = JSON.parse(fs.readFileSync('./funcoes_rpg/carab/carab.json'));

const nescessario = JSON.parse(fs.readFileSync('./arquivos/nescessario.json'));

const antiaudio = JSON.parse(fs.readFileSync('./arquivos/antis/antiaudio.json'))

const caussa = JSON.parse(fs.readFileSync('./funcoes_rpg/caussa/caussa.json'));

const anotar = JSON.parse(fs.readFileSync('./database/func/tabela/anotar.json'));

const tagrico = JSON.parse(fs.readFileSync('./funcoes_rpg/tagrico/tagrico.json'));

const sapato = JSON.parse(fs.readFileSync('./funcoes_rpg/sapato/sapato.json'));

const palitor = JSON.parse(fs.readFileSync('./funcoes_rpg/palitor/palitor.json'));

const antisticker = JSON.parse(fs.readFileSync('./arquivos/antis/antisticker.json'))

const countMessage = JSON.parse(fs.readFileSync('./arquivos/grupos/countmsg.json'));

const antinotas = JSON.parse(fs.readFileSync('./arquivos/antis/antinotas.json'))

const antipv = JSON.parse(fs.readFileSync('./arquivos/usuarios/antipv.json'))

const adeuscara = JSON.parse(fs.readFileSync('./arquivos/grupos/adeuscara.json'));

const espada = JSON.parse(fs.readFileSync('./funcoes_rpg/espada/espada.json'));

const anticatalogo = JSON.parse(fs.readFileSync('./arquivos/antis/anticatalogo.json'))

const autoreact = JSON.parse(fs.readFileSync('./arquivos/funcoes/autoreact.json'))

const muted = JSON.parse(fs.readFileSync('./database/usuarios/muted.json'))

const antivid = JSON.parse(fs.readFileSync('./arquivos/antis/antivideo.json'))

const aguacoco = JSON.parse(fs.readFileSync('./funcoes_rpg/agua/aguacoco.json'));

const roupab = JSON.parse(fs.readFileSync('./funcoes_rpg/roupa/roupab.json'));

const dindin = JSON.parse(fs.readFileSync("./funcoes_rpg/dinheiro/dindin.json"));

const antiimg = JSON.parse(fs.readFileSync('./arquivos/antis/antiimg.json'))

const { menu18 } = require("./menus/menu18.js")

const { tabela } = require('./arquivos/grupos/tabela');

const { downloads } = require("./menus/downloads.js")

const { noticias } = require("./menus/noticias.js")

const { consultas } = require("./menus/consultas.js")

var { verificado } = require("./settings/nescessario.json")

const os = require('os');

function getTempFile(extension) {
    const tempDir = os.tmpdir(); // Diret√≥rio tempor√°rio do sistema
    const tempFileName = `temp_${Date.now()}${extension}`;
    return path.join(tempDir, tempFileName);
}
//COLOCA OS JSON AKI

const API_KEY_SHADOW = "apikey-do-flexa"
const API_KEY_SABRINA = "api-do_flexa"
const API_KEY_DANIEL = "daniel-api3";

//ARQUIVOS JS
const { banner } = require('./loli/browser/browser.js');
const { 
getExtension, Random, 
getFileBuffer,
} = require("./loli/browser/get.js")
const { fetchJson } = require('./arquivos/funcoes.js');
const { addFlod , isFlod } = require('./spam.js')
const { isFiltered, addFilter } = require('./spam.js')
const { palavras } = require('./arquivos/lib/conselhos.js');

//ARQUIVOS PARA SUAS CARACTERES TRAVAZAP CASO VOC√ä N√ÉO FOR TRAVAZAP IGNOREüòÜ
const { carrinho } = require('./loli/travas/carrinho')
const { ctt } = require('./loli/travas/ctt')
const { txt } = require('./loli/travas/txt')
const { ios } = require('./loli/travas/ios')
const { ui } = require('./loli/travas/ui')
//ARQUIVOS DA CONFIG PREFIX DONO E NOME BOT CASO N√ÉO SAIBA MEXE N√ÉO MEXA NISSO DEIXA ASSIM OU VAI CAUSAR ERRO
donoName = global.donoName
botName = global.botName
donoNumber = global.donoNumber
prefix = global.prefix
// IGNORE //
function kyun(seconds){
function pad(s){ return (s < 10 ? '0' : '') + s;}
var hours = Math.floor(seconds / (60*60));
var minutes = Math.floor(seconds % (60*60) / 60);
var seconds = Math.floor(seconds % 60);return `${pad(hours)} Horas ${pad(minutes)} Minutos ${pad(seconds)} Segundos` }
const convertBytes = function(bytes) {
const sizes = ["Bytes", "KB", "MB", "GB", "TB"]
if (bytes == 0) {
return "n/a"
}
const i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)))
if (i == 0) {
return bytes + " " + sizes[i]
}
return (bytes / Math.pow(1024, i)).toFixed(1) + " " + sizes[i]
}

//// DATA E HORA PIKEMON

data = moment.tz("America/Sao_Paulo").format("DD/MM/YY");

hora = moment.tz('America/Sao_Paulo').format('HH:mm:ss');

const msgRetryCounterCache = new NodeCache();


async function ligarbot() {
let phoneNumber = "558598603654"
const store = makeInMemoryStore({ logger: pino().child({ level: 'debug', stream: 'store' }) })
const pairingCode = !!phoneNumber || process.argv.includes("--pairing-code")
const useMobile = process.argv.includes("--mobile")


const rl = readline.createInterface({ input: process.stdin, output: process.stdout })
const question = (text) => new Promise((resolve) => rl.question(text, resolve))


//// DATA E HORA PIKEMON

data = moment.tz("America/Sao_Paulo").format("DD/MM/YY");

hora = moment.tz('America/Sao_Paulo').format('HH:mm:ss');

const time = moment.tz('America/Sao_Paulo').format('HH:mm:ss');

const { state, saveCreds } = await useMultiFileAuthState('./datab/qr-code')
const { version, isLatest} = await fetchLatestBaileysVersion();

const loli = makeWASocket({
  logger: pino({ level: 'silent' }),
        printQRInTerminal: !pairingCode,
      mobile: useMobile,
      browser: ['Chrome (Linux)'],
     auth: {
         creds: state.creds,
         keys: makeCacheableSignalKeyStore(state.keys, pino({ level: "fatal" }).child({ level: "fatal" })),
      },
      browser: ['Chrome (Linux)', '', ''],
      markOnlineOnConnect: true,
      generateHighQualityLinkPreview: true,
      getMessage: async (key) => {
         let jid = jidNormalizedUser(key.remoteJid)
         let msg = await store.loadMessage(jid, key.id)

         return msg?.message || ""
      },
      msgRetryCounterCache,
      defaultQueryTimeoutMs: undefined,
   })
//==========================================\\

if (pairingCode && !loli.authState.creds.registered) {
console.log(`${chalk.redBright("Coloque o n√∫mero de whatsapp. Exemplo: +558598603654")}:`);
let phoneNumber = await question(`   ${chalk.cyan("- N√∫mero")}: `);
phoneNumber = phoneNumber.replace(/[^0-9]/g, "");

let code = await loli.requestPairingCode(phoneNumber);
code = code?.match(/.{1,4}/g)?.join("-") || code;
console.log(` ü•∂ ${chalk.redBright("Seu c√≥digo")}:`);
console.log(`   ${chalk.cyan("- C√≥digo")}: ${code}`);
rl.close();
}

const banner = cfonts.render(("LADY|BUG"), {
font: "block",
align: "center",
colors: [`cyan`,`white`,`cyan`],
})

loli.ev.on('creds.update', saveCreds);
store.bind(loli.ev)
loli.ev.on("chats.set", () => {
console.log("Tem conversas", store.chats.all())
})
loli.ev.on("contacts.set", () => {
console.log("Tem contatos", Object.values(store.contacts))
})
loli.ev.on("connection.update", (update) => {
const { connection, lastDisconnect } = update
if(connection === "close") {
const shouldReconnect = (lastDisconnect.error)?.output?.statusCode !== DisconnectReason.loggedOut
console.log("Conex√£o fechada devido a", lastDisconnect.error, "Tentando reconectar...", shouldReconnect);
if(shouldReconnect) {
startBase()
}
} else if(connection === "open") {
console.log(banner.string)
console.log(`${color(`${botName} Conectado com sucesso ‚úì `,'cyan')}`)
}
})

loli.ev.on('contacts.set', () => {
console.log('setando contatos...')
})

loli.ev.on('creds.update', saveCreds)

loli.ev.on('messages.upsert', async ({ messages }) => {
try {
//=============funcoes
const info = m = messages[0]
if (!info.message) return 

const key = {
    remoteJid: info.key.remoteJid,
    id: info.key.id, 
    participant: info.key.participant 
}
await loli.readMessages([key])

if (info.key && info.key.remoteJid == 'status@broadcast') return
const altpdf = Object.keys(info.message)
const type = altpdf[0] == 'senderKeyDistributionMessage' ? altpdf[1] == 'messageContextInfo' ? altpdf[2] : altpdf[1] : altpdf[0]

type_message = JSON.stringify(info.message)

const isQuotedImage = type === "extendedTextMessage" && type_message.includes("imageMessage")
const from = m.chat = info.key.remoteJid


/// ==============budy
const budy = (type === 'conversation') ? info.message.conversation : (type === 'extendedTextMessage') ? info.message.extendedTextMessage.text : ''

var Procurar_String = info.message?.conversation || info.message?.viewOnceMessageV2?.message?.imageMessage?.caption || info.message?.viewOnceMessageV2?.message?.videoMessage?.caption || info.message?.imageMessage?.caption || info.message?.videoMessage?.caption || info.message?.extendedTextMessage?.text || info.message?.viewOnceMessage?.message?.videoMessage?.caption || info.message?.viewOnceMessage?.message?.imageMessage?.caption || info.message?.documentWithCaptionMessage?.message?.documentMessage?.caption || info.message?.buttonsMessage?.imageMessage?.caption || ""

///============body
var body = (type === 'conversation') ?
info.message.conversation : (type == 'imageMessage') ?
info.message.imageMessage.caption : (type == 'videoMessage') ?
info.message.videoMessage.caption : (type == 'extendedTextMessage') ?
info.message.extendedTextMessage.text : (type == 'buttonsResponseMessage') ?
info.message.buttonsResponseMessage.selectedButtonId : (info.message.listResponseMessage && info.message.listResponseMessage.singleSelectenviar.selectedRowId.startsWith(prefix) && info.message.listResponseMessage.singleSelectenviar.selectedRowId) ? info.message.listResponseMessage.singleSelectenviar.selectedRowId : (type == 'templateButtonenviarMessage') ?
info.message.templateButtonenviarMessage.selectedId : (type === 'messageContextInfo') ? (info.message.buttonsResponseMessage?.selectedButtonId || info.message.listResponseMessage?.singleSelectenviar.selectedRowId || info.text) : ''
////========
const content = JSON.stringify(info.message);
const isCmd = body.startsWith(prefix)

const isGroup = from.endsWith("@g.us")


// Render de Jogos
gayzin = gayz√£o
fein = fei√£o 
matei = mateii
cornin = corn√£o
vesgin = vesg√£o
bebin = beb√£o
gadin = gad√£o
gostosin = gostos√£o
gostosinha = gostosona 
hitler = nazista
tapinha = tap√£o
beijin = beij√£o
chutin = chut√£o
dancinha = dan√ßa 
casalzin = casar
soquin = soc√£o 
By = "LADY-BOT"

//================= funcoes de Grupo ü•ã =============//

const dirGroup = `./arquivos/grupos/${from}.json`;

const nescj = "./dono/nescessario.json";

const data_IDGP = [{
groupId: from, x9: false, 
antiimg: false, antivideo: false,
antiaudio: false, antisticker: false,
antidoc: false, antictt: false,
antiloc: false, antilinkgp: false,
antilinkhard: false,
Odelete: false, antispam: false, 
antinotas: false, anticatalogo: false,
sistemGold: false, visuUnica: false, 
registrarFIGUS: false, soadm: false,
rg_aluguel: false,
listanegra: [], advertir: [], prefixos: ["!"],
advertir2: [], legenda_estrangeiro: "0",
legenda_documento: "0", legenda_video: "0",
legenda_imagem: "0", multiprefix: false, 
forca_ofc: [{acertos: 0, erros: 0, palavra: [], escreveu: [], palavra_ofc: 0, dica: 0, tema: 0}],
minerar_gold: [], ausentes: [], forca_inc: false, 
antipalavrao: {
active: false,
palavras: []
},
limitec: {
active: false,
quantidade: null
},
wellcome: [{
bemvindo1: false,
legendabv: "Ol√° #numerodele#, seja bem vindo (a)",
legendasaiu: 0
},
{
bemvindo2: false,
legendabv: "Ol√° #numerodele#, seja bem vindo (a)",
legendasaiu: 0
}],
simi1: false, simi2: false,
autosticker: false, autoresposta: false,
jogos: false, level: false,
bangp: false, nsfw: false
}];

if(isGroup && !fs.existsSync(dirGroup)){
fs.writeFileSync(dirGroup, JSON.stringify(data_IDGP, null, 2) + '\n');
}

try {
var dataGp = isGroup ? JSON.parse(fs.readFileSync(dirGroup)) : undefined;
} catch (e){
fs.writeFileSync(dirGroup, JSON.stringify(data_IDGP));
}

function setGp(index){
fs.writeFileSync(dirGroup, JSON.stringify(index, null, 2) + '\n')}

function setNes(index){
fs.writeFileSync(nescj, JSON.stringify(index, null, 2))}

/////=================
const isUrl = (url) => {
	return url.match(new RegExp(/https?:\/\/(www\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_+.~#?&/=]*)/, 'gi'))
			}
const sender = isGroup ? info.key.participant: from
const command = comando = isCmd ? body.slice(1).trim().split(/ +/).shift().toLocaleLowerCase() : null
const nome = pushName = info.pushName ? info.pushName: botName 
const pushname = info.pushName ? info.pushName : ""
const groupMetadata = isGroup ? await loli.groupMetadata(from): ""
const participants = isGroup ? await groupMetadata.participants : ''
const groupName = isGroup  ? groupMetadata.subject: ""
const groupDesc = isGroup ? groupMetadata.desc : ''
const groupMembers = isGroup ? groupMetadata.participants : ''
const groupAdmins = isGroup ? getGroupAdmins(groupMembers) : ''
const args = body.trim().split(/ +/).splice(1)
const q = text = args.join(' ')
const So_Adm = isGroup ? dataGp[0].soadm: undefined
const IS_sistemGold = isGroup ? dataGp[0].sistemGold : undefined
const criador = `${donoNumber}@s.whatsapp.net`
const isWelkom = isGroup ? dataGp[0].wellcome[0].bemvindo1 : undefined
const numeroBot = loli.user.id.split(":")[0]+"@s.whatsapp.net"
const isCreator = criador.includes(sender)
const isGroupAdmins = groupAdmins.includes(sender) || false 
const isBotAdmins = groupAdmins.includes(numeroBot) || false
const isBotGroupAdmins = groupAdmins.includes(numeroBot) || false
const isPremium = premium.includes(sender)
const TOKEN_GPT = nescessario.TOKEN_GPT


    loli.sendImage = async (jid, path, caption = '', quoted = '', options) => {
	let buffer = Buffer.isBuffer(path) ? path : /^data:.*?\/.*?;base64,/i.test(path) ? Buffer.from(path.split`,`[1], 'base64') : /^https?:\/\//.test(path) ? await (await getBuffer(path)) : fs.existsSync(path) ? fs.readFileSync(path) : Buffer.alloc(0)
        return await loli.sendMessage(jid, { image: buffer, caption: caption, ...options }, { quoted })
    }
   
//********************************************//

const groupIdscount = []
const numbersIds = []
for(let obj of countMessage) {
groupIdscount.push(obj.groupId)
}
if(isGroup && groupIdscount.indexOf(from) >= 0) {
var ind = groupIdscount.indexOf(from)
for(let obj of countMessage[ind].numbers) {numbersIds.push(obj.id)}
if(numbersIds.indexOf(sender) >=0) {
var indnum = numbersIds.indexOf(sender)
countMessage[ind].numbers[indnum].messages += 1
countMessage[ind].numbers[indnum].cmd_messages += isCmd ? 1 : 0
fs.writeFileSync('./arquivos/grupos/countmsg.json', JSON.stringify(countMessage, null, 2)+ '\n')
} else {
const messages = 1
const cmd_messages = isCmd ? 1 : 0
countMessage[ind].numbers.push({
id: sender,
messages: messages,
cmd_messages: cmd_messages
})
fs.writeFileSync('./arquivos/grupos/countmsg.json', JSON.stringify(countMessage, null, 2) + '\n')
}
} else if(isGroup) {
countMessage.push({
groupId: from,
numbers: [{
id: sender,
messages: 2,
cmd_messages: isCmd ? 1 : 0
}]
})
fs.writeFileSync('./arquivos/grupos/countmsg.json', JSON.stringify(countMessage, null, 2) + '\n')
}


const { mensagens } = require('./arquivos/funcoes/aleatoria.js');

var texto_exato = (type === 'conversation') ? info.message.conversation : (type === 'extendedTextMessage') ? info.message.extendedTextMessage.text : ''

var enviarmen = mensagens[Math.floor(Math.random() * mensagens.length)] 

const texto = texto_exato.slice(0).trim().split(/ +/).shift().toLowerCase()

async function escrever (texto) {
await loli.sendPresenceUpdate('composing', from) 
await esperar(1000)   
loli.sendMessage(from, { text: texto }, {quoted: info})
}

const min = JSON.parse(fs.readFileSync('./ladyft/edite/fotos.json'))
megu = min.megumax

const reply = (texto) => {
mimi = 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
 loli.sendMessage(from, {
document: fs.readFileSync('./arquivos/lib/arquivo.xlsx'),
mimetype: mimi,
jpegThumbnail: null,
mentions: null,
fileName: `${botName}`,
fileLength: 9999999999999999999999999999,
caption: texto,
footer: `Usuario:${pushname}`, 
contextInfo:{"externalAdReply": {"title": `${botName}`,"body": `Nome: ${pushname}‚Ää`, "previewType": "PHOTO","thumbnailUrl": `${megu}`,"thumbnail":  Buffer,"sourceUrl": "https://whatsapp.com/channel/0029Vb3AQtJ3AzNOz3mqx310"}}}, { quoted: info})}
          
const esperar = sleep = async (tempo) => {
    return new Promise(funcao => setTimeout(funcao, tempo));
}

const checkATMuser = (sender) => {

let position = false
Object.keys(dindin).forEach((i) => {
if (dindin[i].id === sender) {
position = i
}
})
if (position !== false) {
return dindin[position].dindin
}
}

const confirmATM = (sender, amount) => {

let position = false
Object.keys(dindin).forEach((i) => {
if (dindin[i].id === sender) {
position = i
}
})
if (position !== false) {
dindin[position].dindin -= amount
fs.writeFileSync('./funcoes_rpg/dinheiro/dindin.json', JSON.stringify(dindin))
}
}


const addKoinUser = (sender, amount) => {

let position = false
Object.keys(dindin).forEach((i) => {
if (dindin[i].id === sender) {
position = i
}
})
if (position !== false) {
dindin[position].dindin += amount
fs.writeFileSync('./funcoes_rpg/dinheiro/dindin.json', JSON.stringify(dindin))
}
}

const addATM = (sender) => {

const obj = {
 id: sender,
 dindin: 0
};
dindin.push(obj)
fs.writeFileSync('./funcoes_rpg/dinheiro/dindin.json', JSON.stringify(dindin))
}

const msgSemQuoted = (content, type, options = {}) => {
   const isFullUrl = (url) => new RegExp(/^https?:\/\/(www\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_+.~#?&/=]*)$/, 'gi').test(url);
const mediaKeys = ['image', 'video', 'sticker', 'audio', 'document', 'history', 'md-app-state'];
options[type || 'text'] = isFullUrl(content) && mediaKeys.includes(type) ? {url: content}: content;
return loli.sendMessage(from, options, {quoted: info}).catch(e => {
reply("Erro ao enviar a mensagem..");
})
}

// PRA LIMPAR DO CONTADOR QUEM N√ÉO EST√Å NO GRUPO
async function LIMPARDOCNT_QUEMJASAIU() {
var RD_CNT = countMessage[countMessage.map(i => i.groupId).indexOf(from)].numbers
CNT1 = []; for ( i of groupMembers) {CNT1.push(i.id)} 
CNT = []; for ( i of RD_CNT) {
if(!CNT1.includes(i.id)) CNT.push(i)}
for ( i of CNT) {
RD_CNT.splice(RD_CNT.map(i => i.id).indexOf(i.id), 1)}
fs.writeFileSync("./arquivos/countmsg.json", JSON.stringify(countMessage, null, 2))
}

const reagir = async (idgp, emj) => {
var reactionMessage = {
react: {
text: emj, 
key: info.key
}
} 
loli.sendMessage(idgp, reactionMessage)
}

const mencionarIMG = (teks= '', Url, ms) => {
memberr = []
vy = teks.includes('\n') ? teks.split('\n') : [teks]
for(vz of vy){ for(zn of vz.split(' ')){
if(zn.includes('@'))memberr.push(parseInt(zn.split('@')[1])+'@s.whatsapp.net')
}}
loli.sendMessage(from, {image: {url: Url}, caption: teks.trim(), mentions: memberr}, {quoted: info}) 
}

// MUTAR USU√ÅRIO 
const GroupsMutedActived = []
for(let obj of muted) {
    GroupsMutedActived.push(obj.jid)
}
const isMuted = (isGroup && GroupsMutedActived.indexOf(from) >= 0) ? true : false
const NumbersMuted = isMuted ? muted[GroupsMutedActived.indexOf(from)].numbers : []
if(isMuted && NumbersMuted.indexOf(sender) >= 0){
reply(`üê§üò° *Voc√™ deu um piu?* - Agora prepare-se para o seu julgamento!`)
setTimeout(async () => {
    loli.groupParticipantsUpdate(from, [sender], 'remove')
}, 1000)
return
}

if (isCmd) {
if (isFiltered(sender)) {
return reply(mess.floodCommands())
} else {
addFilter(sender)
}
} 

const mention = (teks= '', ms = info) => {
memberr = []
vy = teks.includes('\n') ? teks.split('\n') : [teks]
for(vz of vy){ for(zn of vz.split(' ')){
if(zn.includes('@'))memberr.push(parseInt(zn.split('@')[1])+'@s.whatsapp.net')
}}
loli.sendMessage(from, {text: teks.trim(), mentions: memberr}, {quoted: info}) 
}
//--------------//

//SISTEMA RPG\\


const isRoupab = roupab.includes(sender)

const iscasa = casa.includes(sender)

const isaguacoco = aguacoco.includes(sender)

const isCarab = carab.includes(sender) 

const isCaussa = caussa.includes(sender)

const istagrico = tagrico.includes(sender)

const isSapato = sapato.includes(sender)

const isPalitor = palitor.includes(sender) 

const isespada = espada.includes(sender)




//sistema banco//



const checkATM = checkATMuser(sender)
             try {
                 if (checkATM === undefined) addATM(sender)
                 const dinheirosaku = Math.floor(Math.random() * 0) + 0//GANHA ENTRA 10 * 50 POR CADA MSG
                  addKoinUser(from, dinheirosaku)
              } catch (err) {
                 console.error(err)
             }

//================//isquoted/const
const isImage = type == 'imageMessage'
const isVideo = type == 'videoMessage'
const isAudio = type == 'audioMessage'
const isSticker = type == 'stickerMessage'
const isContact = type == 'contactMessage'
const isLocation = type == 'locationMessage'
const isProduct = type == 'productMessage'
const isMedia = (type === 'imageMessage' || type === 'videoMessage' || type === 'audioMessage')
typeMessage = body.substr(0, 50).replace(/\n/g, '')
if (isImage) typeMessage = "Image"
else if (isVideo) typeMessage = "Video"
else if (isAudio) typeMessage = "Audio"
else if (isSticker) typeMessage = "Sticker"
else if (isContact) typeMessage = "Contact"
else if (isLocation) typeMessage = "Location"
else if (isProduct) typeMessage = "Product"

var PR_String = Procurar_String.toLowerCase().normalize('NFD').replace(/[\u0300-\u036f]/g, "");

var pes = (type === 'conversation' && info.message.conversation) ? info.message.conversation : (type == 'imageMessage') && info.message.imageMessage.caption ? info.message.imageMessage.caption : (type == 'videoMessage') && info.message.videoMessage.caption ? info.message.videoMessage.caption : (type == 'extendedTextMessage') && info.message.extendedTextMessage.text ? info.message.extendedTextMessage.text : ''

const isQuotedMsg = type === 'extendedTextMessage' && content.includes('textMessage')

const isQuotedVideo = type === 'extendedTextMessage' && content.includes('videoMessage')

const isQuotedDocument = type === 'extendedTextMessage' && content.includes('documentMessage')

const isQuotedAudio = type === 'extendedTextMessage' && content.includes('audioMessage')

const isQuotedSticker = type === 'extendedTextMessage' && content.includes('stickerMessage')

const isQuotedContact = type === 'extendedTextMessage' && content.includes('contactMessage')

const isQuotedLocation = type === 'extendedTextMessage' && content.includes('locationMessage')

const isQuotedProduct = type === 'extendedTextMessage' && content.includes('productMessage')
 
const messagesC = PR_String.slice(0).trim().split(/ +/).shift().toLowerCase();

const exportion = JSON.parse(fs.readFileSync('./exportion.json'))

const isAntiImg = isGroup ? antiimg.includes(from) : false

const isAntiVid = isGroup ? antivid.includes(from) : false	

const isAutoReact = isGroup ? autoreact.includes(from) : false

const isAntiLink = isGroup ? antilink.includes(from) : false

const isAntiNotas = isGroup ? antinotas.includes(from) : false

const isAntiCtt = isGroup ? antictt.includes(from) : false

const isAntiPv = (antipv.indexOf('Ativado') >= 0) ? true : false	

const isAntiAudio = isGroup ? antiaudio.includes(from) : false

const isModobn =  isGroup ? modobn.includes(from) : true

const Antidoc = isGroup ? antidoc.includes(from) : false

const isAntiFlood = isGroup ? antiflood.includes(from) : false	

const isAnticatalogo = isGroup ? anticatalogo.includes(from) : false

const isSimi2 = isGroup ? samih2.includes(from) : false

const isAntifake = isGroup ? antifake.includes(from) : false

const Antiloc = isGroup ? antiloc.includes(from) : false

const isAntiSticker = isGroup ? antisticker.includes(from) : false

const isAntiPorn = isGroup ? antiporn.includes(from) : true

const menc_jid = args?.join(" ").replace("@", "") + "@s.whatsapp.net"

const isSimi = isGroup ? samih.includes(from) : false

const isAntilinkgp = isGroup ? antilinkgp.includes(from) : false
        
const sender_ou_n = q.includes("@") ? menc_jid : sender


const mentions = (teks, memberr, id) => {
(id == null || id == undefined || id == false) ? loli.sendMessage(from, {text: teks.trim(), mentions: memberr}) : loli.sendMessage(from, {text: teks.trim(), mentions: memberr})
}
const time = moment.tz('America/Sao_Paulo').format('HH:mm:ss');
const hora = moment.tz('America/Sao_Paulo').format('HH:mm:ss');
const date = moment.tz('America/Sao_Paulo').format('DD/MM/YY');

const time2 = moment().tz('America/Sao_Paulo').format('HH:mm:ss')
if(time2 > "00:00:00" && time2 < "05:00:00"){
var tempo = ' ô·¥è·¥Ä ·¥ç·¥Ä·¥Ö Ä·¥ú…¢·¥Ä·¥Ö·¥Ä üåí'
} if(time2 > "05:00:00" && time2 < "12:00:00"){
var tempo = ' ô·¥è·¥Ä ·¥Ö…™·¥Ä üåï'
} if(time2 > "12:00:00" && time2 < "18:00:00"){
var tempo = ' ô·¥è·¥Ä ·¥õ·¥Ä Ä·¥Ö·¥á üåó'
} if(time2 > "18:00:00"){
var tempo = ' ô·¥è·¥Ä …¥·¥è…™·¥õ·¥á üåë'
}

const menc_prt = info.message?.extendedTextMessage?.contextInfo?.participant

// VERIFICADOS ‚≠êÔ∏è
const live = {key : {participant : '0@s.whatsapp.net'},message: {liveLocationMessage: {}}} 
const imgm = {key : {participant : '0@s.whatsapp.net'},message: {imageMessage: {}}}
const vid = {key : {participant : '0@s.whatsapp.net'},message: {videoMessage: {}}}
const contato = {key : {participant : '0@s.whatsapp.net'},message: {contactMessage:{displayName: `${pushname}`}}}
const doc = {key : {participant : '0@s.whatsapp.net'},message: {documentMessage:{}}}
const may = { key: { fromMe: false, participant: `0@s.whatsapp.net`, ...(from ? { remoteJid: '6283136505591-1614953337@g.us' } : {}) }, message: { 'imageMessage': { 'url': 'https://mmg.whatsapp.net/d/f/At0x7ZdIvuicfjlf9oWS6A3AR9XPh0P-hZIVPLsI70nM.enc', 'mimetype': 'image/png', 'caption': `${botName}`, 'fileSha256': '+Ia+Dwib70Y1CWRMAP9QLJKjIJt54fKycOfB2OEZbTU=',  forwardingScore: 508, isForwarded: true,'fileLength': '28777', 'height': 1080, 'width': 1079, 'mediaKey': 'vXmRR7ZUeDWjXy5iQk17TrowBzuwRya0errAFnXxbGc=', 'fileEncSha256': 'sR9D2RS5JSifw49HeBADguI23fWDz1aZu4faWG/CyRY=', 'directPath': '/v/t62.7118-24/21427642_840952686474581_572788076332761430_n.enc?oh=3f57c1ba2fcab95f2c0bb475d72720ba&oe=602F3D69', 'mediaKeyTimestamp': '1610993486', 'jpegThumbnail': fs.readFileSync('./loli/image/menu.jpg')} } }
const selo = { key: {fromMe: false, participant: `0@s.whatsapp.net`, ...(from ? { remoteJid: "status@broadcast" } : {}) }, message: { "imageMessage": { "url": "https://mmg.whatsapp.net/d/f/At0x7ZdIvuicfjlf9oWS6A3AR9XPh0P-hZIVPLsI70nM.enc", "mimetype": "image/jpeg","caption": `${botName}`, 'jpegThumbnail': fs.readFileSync('./loli/image/menu.jpg')}}}

const menc_os2 = q.includes("@") ? menc_jid : menc_prt 


 if (!isGroup && isCmd) console.log(
color(`ùêÇùêéùêåùêÄùêçùêÉùêé ùêçùêé ùêèùêëùêàùêïùêÄùêÉùêé`,'red'),'\n',
color('‚™º NOME DO BOT:','red'),color(botName, 'cyan'),'\n',
color('‚™º USU√ÅRIO:','red'),color(pushname,'cyan'),'\n',
color('‚™º COMANDO:','red'),color(budy, 'cyan'),'\n',
color('‚™º HOR√ÅRIO:','red'),color(hora,'cyan'),'\n',
color('‚™º DA–¢A:','red'),color(data,'cyan'),'\n')

if (!isCmd && !isGroup) console.log(
color(`ùêåùêÑùêçùêíùêÄùêÜùêÑùêå ùêçùêé ùêèùêëùêàùêïùêÄùêÉùêé`,'red'),'\n',
color('‚™º NOME DO BOT:','red'),color(botName, 'cyan'),'\n',
color('‚™º USU√ÅRIO:','red'),color(pushname,'cyan'),'\n',
color('‚™º MENSAGEM:','red'),color(budy,'cyan'),'\n',
color('‚™º HOR√ÅRIO:','red'),color(hora,'cyan'),'\n',
color('‚™º DATA:','red'),color(data,'cyan'),'\n')

if (isCmd && isGroup) console.log(
color(`ùêÇùêéùêåùêÄùêçùêÉùêé ùêÑùêå ùêÜùêëùêîùêèùêé`,'red'),'\n',
color('‚™º NOME DO BOT:','red'),color(botName, 'cyan'),'\n',
color('‚™º NOME DO GRUPO:','red'),color(groupName,'cyan'),'\n',
color('‚™º USU√ÅRIO:','red'),color(pushname,'cyan'),'\n',
color('‚™º COMANDO:','red'),color(budy,'cyan'),'\n',
color('‚™º HOR√ÅRIO:','red'),color(hora,'cyan'),'\n',
color('‚™º DATA:','red'),color(data,'cyan'),'\n')

if (!isCmd && isGroup) console.log(
color(`ùêåùêÑùêçùêíùêÄùêÜùêÑùêå ùêÑùêå ùêÜùêëùêîùêèùêé`,'red'),'\n',
color('‚™º NOME DO BOT:','red'),color(botName, 'cyan'),'\n',
color('‚™º NOME DO GRUPO:','red'),color(groupName,'cyan'),'\n',
color('‚™º USU√ÅRIO:','red'),color(pushname,'cyan'),'\n',
color('‚™º MENSAGEM:','red'),color(budy,'cyan'),'\n',
color('‚™º HOR√ÅRIO:','red'),color(hora,'cyan'),'\n',
color('‚™º DATA:','red'),color(data,'cyan'),'\n')

//
msg = {
registro: "_[‚ùó] Para ver o menu voc√™ precisa se registrar use /login_",
botadm: "[‚ùó] bot precisa ser adm",
aguarde: "[‚ùó] aguarde uns minutinho estou processadoüë®‚Äçü¶Ø",
dono: "[‚ùó] este comando so podera ser usado pelo meu donoüí£",
grupo: "[‚ùó] este comando so pode ser usado em grupoü´Ç",
private: "[‚ùó] este comando so pode ser usado no privadoüëÄ",
premium: "[‚ùó] ESTE PEDIDO √â SO PARA *USU√ÅRIOS PREMIUMS*",
adm: "este comando so pode ser usado por um adm",
botadm: "[‚ùó] bot precisa ser adm pra executar esse comando",
erro: "[‚ùó] ocorreu uma falha no comando por favor aguarde ate meu dono ajeitar", 
dono: "[‚ùó] Esse comando so pode ser usado pelo meu dono!!!",
abrindomenu: "_[‚ùó]Carregando menu aguarde..._",
}

const foto = { key: {fromMe: false, participant: `0@s.whatsapp.net`, ...(from ? { remoteJid: "120363034719882460@g.us" } : {}) },
message: { 
"imageMessage": {
"caption": ' ‚Ä¢ùë∫ùë®ùëµùë´ùëπùë∂-ùë©ùë∂ùëª‚Éüü•Ç‚Ä¢ ',
"jpegThumbnail": fs.readFileSync('./loli/image/menu.jpg')
}}}

const order = { key: {fromMe: false, participant: `0@s.whatsapp.net`, ...(from ? { remoteJid: "120363034719882460@g.us" } : {}) },
message: { 
"orderMessage": {
"thumbnail": fs.readFileSync('./loli/image/menu.jpg'),
"itemCount": 1000000000000,
"status": "INQUIRY",
"surface": "CATALOG",
"message": `üëÅ ‚Ä¢ùë∫ùë®ùëµùë´ùëπùë∂-ùë©ùë∂ùëª‚Éüü•Ç‚Ä¢ üëÅ`,
}}}


switch(comando) {

case 'comprarbot': case 'comprabot':
await delay(5000)
reply(`Ok vou te mandar a chave pix para voc√™ efetuar o pagamento, aguarde...`)
await delay(8000)
reply(`Qual forma voc√™ quer efetuar o pagamento?

/email
/telefone
/chavealeatoria`)
break

case 'email':
await delay(3000)
reply(`Ok enviando email`)
await delay(4000)
reply(`aqui esta a chave para voc√™ efetuar o pagamento`)
await delay(4000)
reply(`Nao tenho kkkkk`)
await delay(110000)
reply(`‚ùå_N√£o identifiquei o seu pagamento_‚ùå
Entre em contato com o desenvolvedor üëâüèª Wa.me/558598603654`) 
break

case 'tell':
await delay(3000)
reply(`Ok enviando chave...`)
await delay(4000)
reply(`aqui esta a chave para voc√™ efetuar o pagamento`)
await delay(5000)
reply(`nao tenho pix kkkkk`)
await delay(110000)
reply(`‚ùå_N√£o identifiquei o seu pagamento_‚ùå
Entre em contato com o desenvolvedor üëâüèª Wa.me/558598603654`) 
break

case 'chavealeatoria': case 'chavealeat√≥ria':
await delay(3000)
reply(`Ok enviando chavealeatoria...`)
await delay(4000)
reply(`nao tenho piquici`)
await delay(110000)
reply(`‚ùå_N√£o identifiquei o seu pagamento_‚ùå
Entre em contato com o desenvolvedor üëâüèª Wa.me/558598603654`) 
break
//Todos os comandos est√£o funcionando normalmente mas estao tudo embaralhado üòÖüòÖ e isso boa sorte.\\

case 'figurinha': case 's': case 'stickergifp': case 'figura': case 'f': case 'figu': case 'st': case 'stk': case 'fgif':

{
(async function () {
var legenda = q ? q?.split("/")[0] : `‚ïº‚ä≥‚ä∞ Solicitado Por:
‚ïº‚ä≥‚ä∞ Bot:
‚ïº‚ä≥‚ä∞ Dono:`
var autor = q ? q?.split("/")[1] : q?.split("/")[0] ? '' : `${pushname}
${botName}
${donoName}`
if (isMedia && !info.message.videoMessage || isQuotedImage) {
var encmedia = isQuotedImage ? info.message.extendedTextMessage.contextInfo.quotedMessage.imageMessage : info.message.imageMessage
rane = getRandom('.'+await getExtension(encmedia.mimetype))
buffimg = await getFileBuffer(encmedia, 'image')
fs.writeFileSync(rane, buffimg)
rano = getRandom('.webp')
exec(`ffmpeg -i ${rane} -vcodec libwebp -filter:v fps=fps=15 -lossless 1 -loop 0 -preset default -an -vsync 0 -s 800:800 ${rano}`, (err) => {
fs.unlinkSync(rane)
// "android-app-store-link": "https://play.google.com/store/search?q=%2B55%2094%209147-2796%20%F0%9F%94%A5%F0%9F%94%A5%F0%9F%94%A5%F0%9F%94%A5%F0%9F%94%A5&c=apps",
var json = {
"sticker-pack-name": legenda,
"sticker-pack-publisher": autor
}
var exifAttr = Buffer.from([0x49, 0x49, 0x2A, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x41, 0x57, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00])
var jsonBuff = Buffer.from(JSON.stringify(json), "utf-8")
var exif = Buffer.concat([exifAttr, jsonBuff])
exif.writeUIntLE(jsonBuff.length, 14, 4)
let nomemeta = Math.floor(Math.random() * (99999 - 11111 + 1) + 11111)+".temp.exif"
fs.writeFileSync(`./${nomemeta}`, exif) 
exec(`webpmux -set exif ${nomemeta} ${rano} -o ${rano}`, () => {
loli.sendMessage(from, {sticker: fs.readFileSync(rano)}, {quoted: info})
fs.unlinkSync(nomemeta)
fs.unlinkSync(rano)
})
})
} else if (isMedia && info.message.videoMessage.seconds < 11 || isQuotedVideo && info.message.extendedTextMessage.contextInfo.quotedMessage.videoMessage.seconds < 35) {
var encmedia = isQuotedVideo ? info.message.extendedTextMessage.contextInfo.quotedMessage.videoMessage : info.message.videoMessage
rane = getRandom('.'+await getExtension(encmedia.mimetype))
buffimg = await getFileBuffer(encmedia, 'video')
fs.writeFileSync(rane, buffimg)
rano = getRandom('.webp')
await ffmpeg(`./${rane}`)
.inputFormat(rane.split('.')[1])
exec(`ffmpeg -i ${rane} -vcodec libwebp -filter:v fps=fps=15 -lossless 1 -loop 0 -preset default -an -vsync 0 -s 200:200 ${rano}`, (err) => {
fs.unlinkSync(rane)
let json = {
"sticker-pack-name": legenda,
"sticker-pack-publisher": autor
}
let exifAttr = Buffer.from([0x49, 0x49, 0x2A, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x41, 0x57, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00])
let jsonBuff = Buffer.from(JSON.stringify(json), "utf-8")
let exif = Buffer.concat([exifAttr, jsonBuff])
exif.writeUIntLE(jsonBuff.length, 14, 4)
let nomemeta = "temp.exif"
fs.writeFileSync(`./${nomemeta}`, exif) 
exec(`webpmux -set exif ${nomemeta} ${rano} -o ${rano}`, () => {
loli.sendMessage(from, {sticker: fs.readFileSync(rano)}, {quoted: info})
fs.unlinkSync(nomemeta)
fs.unlinkSync(rano)
})
})
} else {
reply(`Voc√™ precisa enviar ou marcar uma imagem ou v√≠deo com no m√°ximo 10 segundos`)
}
})().catch(e => {
console.log(e)
reply("Hmm deu erro")
try {
if (fs.existsSync("temp.exif")) fs.unlinkSync("temp.exif");
if (fs.existsSync(rano)) fs.unlinkSync(rano);
if (fs.existsSync(media)) fs.unlinkSync(media);
} catch {}
})
}
break

//============MENUS AQUI===========\\
case 'menu': case 'ajuda': case 'help':
    reagir(from, "üêû")
    await sleep(1000)

    // Enviar √°udio primeiro
    const audio = fs.readFileSync('./loli/audio/minutinho.mp3') // Substitua pelo caminho correto do √°udio
    loli.sendMessage(from, {audio: audio, mimetype: 'audio/mp4'}, {quoted: info})
    
    // Enviar imagem do menu logo ap√≥s o √°udio
    await sleep(500) // Pequeno delay opcional entre o √°udio e a imagem
    loli.sendMessage(from,
    {
        image: fs.readFileSync('./loli/image/menu.jpg'),
        caption: menu(comando, prefix, hora, data, pushname, totalcmd),
        gifPlayback: true
    },
    {quoted: info})

break
case 'logos': case 'menulogos': case 'lg':
reagir(from, "üé®")
    await sleep(1000)
loli.sendMessage(from,
{image: fs.readFileSync('./loli/image/logos.jpg'),
caption: logos(comando, prefix, hora, data, pushname, totalcmd),
gifPlayback: true},
{quoted: info})
break

case 'menuvip':
reagir(from, "‚≠ê")
    await sleep(1000)
loli.sendMessage(from,
{image: fs.readFileSync('./loli/image/menu.jpg'),
caption: menuvip(comando, prefix, hora, data, pushname, totalcmd),
gifPlayback: true},
{quoted: info})
break

case 'jogos':
case 'menujogos':
reagir(from, "‚≠ê")
    await sleep(1000)
loli.sendMessage(from,
{image: fs.readFileSync('./loli/image/menu.jpg'),
caption: menujogos(comando, prefix, hora, data, pushname, totalcmd),
gifPlayback: true},
{quoted: info})
break

case 'menurpg':
reagir(from, "üßô‚Äç‚ôÇÔ∏è")
    await sleep(1000)
loli.sendMessage(from,
{image: fs.readFileSync('./loli/image/menu.jpg'),
caption: menurpg(comando, prefix, hora, data, pushname, totalcmd),
gifPlayback: true},
{quoted: info})
break

case 'menuseries':
reagir(from, "üìΩÔ∏è")
    await sleep(1000)
loli.sendMessage(from,
{image: fs.readFileSync('./loli/image/menu.jpg'),
caption: menuseries(comando, prefix, hora, data, pushname, totalcmd),
gifPlayback: true},
{quoted: info})
break

case 'pesquisas':
reagir(from, "üîé")
    await sleep(1000)
loli.sendMessage(from,
{image: fs.readFileSync('./loli/image/menu.jpg'),
caption: pesquisas(comando, prefix, hora, data, pushname, totalcmd),
gifPlayback: true},
{quoted: info})
break

case 'contasgratis':
reagir(from, "üÜì")
    await sleep(1000)
loli.sendMessage(from,
{image: fs.readFileSync('./loli/image/menu.jpg'),
caption: contasgratis(comando, prefix, hora, data, pushname, totalcmd),
gifPlayback: true},
{quoted: info})
break

case 'menuia':
reagir(from, "ü§ñ")
    await sleep(1000)
loli.sendMessage(from,
{image: fs.readFileSync('./loli/image/menu.jpg'),
caption: menuia(comando, prefix, hora, data, pushname, totalcmd),
gifPlayback: true},
{quoted: info})
break

case 'menutravazap':
reagir(from, "üò°")
    await sleep(1000)
loli.sendMessage(from,
{image: fs.readFileSync('./loli/image/menu.jpg'),
caption: menutravazap(comando, prefix, hora, data, pushname, totalcmd),
gifPlayback: true},
{quoted: info})
break

case 'menuadm':
case 'adms':
    reagir(from, "üëë")
    await sleep(1000)

    if (!isGroupAdmins) return reply(msg.adm)
    if (!isGroup) return reply(msg.grupo)

    // Enviar √°udio para administradores
    const audiomenu = await fs.readFileSync("./loli/audio/adm.mp3")
    loli.sendMessage(from, {audio: audiomenu, mimetype: 'audio/mpeg', ptt: true}, {quoted: info})

    await delay(4000)

    // Enviar imagem do menu
    loli.sendMessage(from,
    {
        image: fs.readFileSync('./loli/image/menu.jpg'),
        caption: menuadm(comando, prefix, hora, data, pushname, totalcmd),
        gifPlayback: true
    },
    {quoted: info})

break
case 'menubrincadeiras':
case 'brincadeiras':
    reagir(from, "‚öΩ")
    await sleep(1000)

    if (!isGroup) return reply(msg.grupo)

    // Reagir com √≠cone do jogo
    await loli.sendMessage(from, { react: { text: 'üéÆ', key: info.key } })

    // Enviar √°udio do menu de jogos (somente uma vez)
    const audioJogos = await fs.readFileSync("./loli/audio/jogos.mp3") // Nome alterado para evitar conflito
    await loli.sendMessage(from, { audio: audioJogos, mimetype: 'audio/mpeg', ptt: true }, { quoted: info })

    await delay(4000)

    // Enviar imagem do menu de jogos
    await loli.sendMessage(from, {
        image: fs.readFileSync('./loli/image/menu.jpg'),
        caption: brincadeiras(comando, prefix, hora, data, pushname),
        gifPlayback: true
    }, { quoted: info })

break
		
case 'criador':
reagir(from, "üßíüèª")
    await sleep(1000)
loli.sendMessage(from,
{image: fs.readFileSync('./loli/image/menu.jpg'),
caption: criado(comando, prefix, hora, data, pushname, totalcmd),
gifPlayback: true},
{quoted: info})
break

case 'alugar':
    reagir(from, "üí≤")
    await sleep(1000)
await loli.sendMessage(from, { react: { text: `üçÉ`, key: info.key }})
loli.sendMessage(from,
{image: fs.readFileSync('./loli/image/menu.jpg'),
caption: alugar(comando, prefix, hora, data, pushname),
gifPlayback: true},
{quoted: info})
break

case 'menudono':
reagir(from, "üêû")
    await sleep(1000)
await sleep(1000)
if(!isCreator) return reply(msg.dono)
await loli.sendMessage(from, { react: { text: `üçÉ`, key: info.key }})
loli.sendMessage(from,
{image: fs.readFileSync('./loli/image/menu.jpg'),
caption: menudono(comando, prefix, hora, data, pushname),
gifPlayback: true},
{quoted: info})
break
		
case 'menudow':
case 'downloads':
    reagir(from, "‚ö°");
    await sleep(1000);
    loli.sendMessage(
        from,
        {
            image: fs.readFileSync('./loli/image/menu.jpg'),
            caption: downloads(prefix, hora, data, pushname),
            gifPlayback: true
        },
        { quoted: info }
    );
    break;

case 'menuconsulta':
case 'consultas':
    reagir(from, "üåê");
    await sleep(1000);
    loli.sendMessage(
        from,
        {
            image: fs.readFileSync('./loli/image/menu.jpg'),
            caption: consultas(prefix, hora, data, pushname),
            gifPlayback: true
        },
        { quoted: info }
    );
    break;

case 'menudonoticias':
case 'noticias':
    reagir(from, "üì∞");
    await sleep(1000);
    loli.sendMessage(
        from,
        {
            image: fs.readFileSync('./loli/image/menu.jpg'),
            caption: noticias(prefix, hora, data, pushname),
            gifPlayback: true
        },
        { quoted: info }
    );
    break;
case "menu18":
reagir(from, "üîû")
    await sleep(1000)
if(!isPremium) return reply(msg.premium)
await loli.sendMessage(from, { react: { text: `üîû`, key: info.key }})
templateMassage = {
image: {url:"./loli/image/menu.jpg",
quoted: info},
caption: menu18(prefix, hora, data, pushname),
headerType: 4,
contextinfo:{externalAdReply:{
thumbnail: global.goimg,
mediaType:2,
//templateButtons: templateButtons
}}
}
loli.sendMessage(from, templateMassage)
break

case 'documento':
reply(`enviando...`)
if(!isCreator) return reply(msg.dono)
loli.sendMessage(from, {
document: fs.readFileSync('./loli/image/menu.jpg'),
mimetype: 'application/zip',
fileName: 'ü§¨${botName}ü§¨'
},
{quoted: info
})
break

case 'txt-desativar9': // ${botName}
reply(`Enviando no pv`)
await delay(5000)
bymonarge =`‚ä∂Õ°Õú€ú€ú€£ üõëSuporte: https://www.whatsapp.com/contact/?lang=pt_br&subject=messenger \n\nüìÑ ‚Ä¢ Texto: \n\nOl√° , eu perdi todos meus documentos junto com meu celular e preciso imediatamente que desativem meu n√∫mero:
+55 99 9999-9999`
loli.sendMessage(sender, {text: bymonarge}, {quoted: info})
break

case 'txt-desativar8': // ${botName}
reply(`Enviando no pv`)
await delay(5000)
bymonarge =`‚ä∂Õ°Õú€ú€ú€£ üõëSuporte: https://www.whatsapp.com/contact/?lang=pt_br&subject=messenger \n\nüìÑ ‚Ä¢ Texto: \n\nÂÅ∑‚æõ‰∫ÜÊàëÁöÑ‚ºøÊú∫ÂíåÊàëÊâÄÊúâÁöÑÂÆù‚ªâÔºåËØ∑‚Ω¥Âç≥Á¶Å‚ΩåÊàëÁöÑÂ∏ê‚ºæ
+55 99 9999-9999`
loli.sendMessage(sender, {text: bymonarge}, {quoted: info})
break

case 'txt-desativar7': // ${botName}
reply(`Enviando no pv`)
await delay(5000)
bymonarge =`‚ä∂Õ°Õú€ú€ú€£ üõëSuporte: https://www.whatsapp.com/contact/?lang=pt_br&subject=messenger \n\nüìÑ ‚Ä¢ Texto: \n\nOl√° , eu gostaria de desativar meu n√∫mero do WhatsApp porque eu estou migrando para o telegram , Meu n√∫mero:
+55 99 9999-9999`
loli.sendMessage(sender, {text: bymonarge}, {quoted: info})
break

case 'txt-desativar4': // ${botName}
reply(`Enviando no pv`)
await delay(5000)
bymonarge =`‚ä∂Õ°Õú€ú€ú€£ üõëSuporte: https://www.whatsapp.com/contact/?lang=pt_br&subject=messenger \n\nüìÑ ‚Ä¢ Texto: \n\nPerdido/Roubado: Por favor, desative minha conta
+55 11 11111-11111`
loli.sendMessage(sender, {text: bymonarge}, {quoted: info})
break

case 'txt-desban3': // ${botName}
reply(`Enviando no pv`)
await delay(5000)
bymonarge =`‚ä∂Õ°Õú€ú€ú€£ üõëSuporte: https://www.whatsapp.com/contact/?lang=pt_br&subject=messenger \n\nüìÑ ‚Ä¢ Texto: \n\nMeu numero foi banido, utilizo ele para falar com meus amigos e familia. Al√©m de falar com meus clientes, e estou sendo prejudicado perdendo vendas +55 99 9999-9999`
loli.sendMessage(sender, {text: bymonarge}, {quoted: info})
break

case 'txt-desban4': // ${botName}
reply(`Enviando no pv`)
await delay(5000)
bymonarge =`‚ä∂Õ°Õú€ú€ú€£ üõëSuporte: https://www.whatsapp.com/contact/?lang=pt_br&subject=messenger \n\n?? ‚Ä¢ Texto: \n\nOla suporte do whatsapp , meu numero ,(numero) foi banido injustamente do whatsapp , estou solicitando o desbanimento imediato de meu n√∫mero `
loli.sendMessage(sender, {text: bymonarge}, {quoted: info})
break

case 'txt-sair-1-2': // by: loli-MD
reply(`Enviando no pv`)
await delay(5000)
bymonarge =`‚ä∂Õ°Õú€ú€ú€£ üõëSuporte: https://www.whatsapp.com/contact/?lang=pt_br&subject=messenger \n\n?? ‚Ä¢ Texto: \n\nEu nao consigo entrar no whatsapp , meu n√∫mero esta -1 , solicito que resetem minha verifica√ß√£o de n√∫mero!
N√∫mero: +55 99 9999-9999`
loli.sendMessage(sender, {text: bymonarge}, {quoted: info})
break

case 'txt-sair-1-1': // by: loli-MD
reply(`Enviando no pv`)
await delay(5000)
bymonarge =`‚ä∂Õ°Õú€ú€ú€£ üõëSuporte: https://www.whatsapp.com/contact/?lang=pt_br&subject=messenger \n\nüìÑ ‚Ä¢ Texto: \n\nMeu n√∫mero est√° no suporte algu√©m solicitou meu c√≥digo por engano meu n√∫mero √© usado para conversas com familiares que est√£o com convite por favor reinicie o meu c√≥digo de verifica√ß√£o via SMS!
N√∫mero: +55 99 9999-9999`
loli.sendMessage(sender, {text: bymonarge}, {quoted: info})
break

case 'txt-desativar7': // ${botName}
reply(`Enviando no pv`)
await delay(5000)
bymonarge =`‚ä∂Õ°Õú€ú€ú€£ üõëSuporte: https://www.whatsapp.com/contact/?lang=pt_br&subject=messenger \n\nüìÑ ‚Ä¢ Texto: \n\nOl√° , eu gostaria de desativar meu n√∫mero do WhatsApp porque eu estou migrando para o telegram , Meu n√∫mero:
+55 99 9999-9999`
loli.sendMessage(sender, {text: bymonarge}, {quoted: info})
break

case 'txt-desativar6': // ${botName}
reply(`Enviando no pv`)
await delay(5000)
bymonarge =`‚ä∂Õ°Õú€ú€ú€£ üõëSuporte: https://www.whatsapp.com/contact/?lang=pt_br&subject=messenger \n\nüìÑ ‚Ä¢ Texto: \n\nOl√° fui assaltado a uns 30 minutos e roubaram todos meus pertences , quero que desativem minha conta do whatsapp.
N√∫mero: +55 99 9999-9999`
loli.sendMessage(sender, {text: bymonarge}, {quoted: info})
break

case 'txt-desativar5': // ${botName}
reply(`Enviando no pv`)
await delay(5000)
bymonarge =`‚ä∂Õ°Õú€ú€ú€£ üõëSuporte: https://www.whatsapp.com/contact/?lang=pt_br&subject=messenger \n\nüìÑ ‚Ä¢ Texto: \n\nMeu numero do whatsapp foi roubado , desativem minha conta imensamente , desde j√° agrade√ßo! meu numero :
+55 99999-99999`
loli.sendMessage(sender, {text: bymonarge}, {quoted: info})
break

case 'txt-desativar3': // ${botName}
reply(`Enviando no pv`)
await delay(5000)
bymonarge =`‚ä∂Õ°Õú€ú€ú€£ üõëSuporte: https://www.whatsapp.com/contact/?lang=pt_br&subject=messenger \n\nüìÑ ‚Ä¢ Texto: \n\nEstou solicitando a desativa√ß√£o tempor√°ria de minha conta no whatsapp , meu numero:
+55 11 11111-1111`
loli.sendMessage(sender, {text: bymonarge}, {quoted: info})
break

case 'txt-desativar2': // ${botName}
reply(`Enviando no pv`)
await delay(5000)
bymonarge =`‚ä∂Õ°Õú€ú€ú€£ üõëSuporte: https://www.whatsapp.com/contact/?lang=pt_br&subject=messenger \n\nüìÑ ‚Ä¢ Texto: \n\nPlease Deactivate The My Account Number (n√∫mero*) Immediately Because The Number Has Been Lost`
loli.sendMessage(sender, {text: bymonarge}, {quoted: info})
break

case 'txt-desativar1': // ${botName}
reply(`Enviando no pv`)
await delay(5000)
bymonarge =`‚ä∂Õ°Õú€ú€ú€£ üõëSuporte: https://www.whatsapp.com/contact/?lang=pt_br&subject=messenger \n\nüìÑ ‚Ä¢ Texto: \n\nOl√°,perdi todos os meus documentos e o meu chip foi roubado. Pe√ßo que desativem
minha conta imediatamente,no chip h√° dados sobre mim por isso pe√ßo que desativem,meu  n√∫mero imediatamente (n√∫mero)`
loli.sendMessage(sender, {text: bymonarge}, {quoted: info})
break

case 'txt-desban1': // ${botName}
reply(`Enviando no pv`)
await delay(5000)
bymonarge =`‚ä∂Õ°Õú€ú€ú€£ üõëSuporte: https://www.whatsapp.com/contact/?lang=pt_br&subject=messenger \n\nüìÑ ‚Ä¢ Texto: \n\nMeu n√∫mero (N√∫mero) foi banido indevidamente isto foi um engano . Fui clonado e roubaram meu n√∫mero preciso ativar minha conta tenho uma empresa de eletrodom√©sticos e tenho pedidos pendentes.`
loli.sendMessage(sender, {text: bymonarge}, {quoted: info})
break

case 'txt-desban2': // ${botName}
reply(`Enviando no pv`)
await delay(5000)
bymonarge =`‚ä∂Õ°Õú€ú€ú€£ üõëSuporte: https://www.whatsapp.com/contact/?lang=pt_br&subject=messenger \n\nüìÑ ‚Ä¢ Texto: \n\nMeu n√∫mero (Numero) , foi banido do whatsapp injustamente e tenho provas pra mostrar que o banimento foi um erro do sistema.`
loli.sendMessage(sender, {text: bymonarge}, {quoted: info})
break

case 'txt-desban4': // ${botName}
reply(`Enviando no pv`)
await delay(5000)
bymonarge =`‚ä∂Õ°Õú€ú€ú€£ üõëSuporte: https://www.whatsapp.com/contact/?lang=pt_br&subject=messenger \n\n?? ‚Ä¢ Texto: \n\nOla suporte do whatsapp , meu numero ,(numero) foi banido injustamente do whatsapp , estou solicitando o desbanimento imediato de meu n√∫mero `
loli.sendMessage(sender, {text: bymonarge}, {quoted: info})
break

case 'txt-desban5': // ${botName}
reply(`Enviando no pv`)
await delay(5000)
bymonarge =`‚ä∂Õ°Õú€ú€ú€£ üõëSuporte: https://www.whatsapp.com/contact/?lang=pt_br&subject=messenger \n\nüìÑ ‚Ä¢ Texto: \n\nOla eu sou roberto silva, eu comprei um n√∫mero n√∫mero para meu filho fazer os trabalhos da escola em qual ele estuda , por√©m quando fui tentar entrar , estava dizendo que o n√∫mero foi banido e eu nem sequer entrei no n√∫mero, n√£o fiz nada eu ja comprei o n√∫mero e ele ja estava assim , ele precisa urgentemente desse n√∫mero para fazer os trabalhos da escola.
Verifiquem o ma√≠s r√°pido poss√≠vel!
N√öMERO: 55 99 9999-9999`
loli.sendMessage(sender, {text: bymonarge}, {quoted: info})
break

case 'txt-sair-1-2': // ${botName}
reply(`Enviando no pv`)
await delay(5000)
bymonarge =`‚ä∂Õ°Õú€ú€ú€£ üõëSuporte: https://www.whatsapp.com/contact/?lang=pt_br&subject=messenger \n\n?? ‚Ä¢ Texto: \n\nEu nao consigo entrar no whatsapp , meu n√∫mero esta -1 , solicito que resetem minha verifica√ß√£o de n√∫mero!
N√∫mero: +55 99 9999-9999`
loli.sendMessage(sender, {text: bymonarge}, {quoted: info})
break

case 'txt-sair-1-1': // ${botName}
reply(`Enviando no pv`)
await delay(5000)
bymonarge =`‚ä∂Õ°Õú€ú€ú€£ üõëSuporte: https://www.whatsapp.com/contact/?lang=pt_br&subject=messenger \n\nüìÑ ‚Ä¢ Texto: \n\nMeu n√∫mero est√° no suporte algu√©m solicitou meu c√≥digo por engano meu n√∫mero √© usado para conversas com familiares que est√£o com convite por favor reinicie o meu c√≥digo de verifica√ß√£o via SMS!
N√∫mero: +55 99 9999-9999`
loli.sendMessage(sender, {text: bymonarge}, {quoted: info})
break

//===============FIM CMD TRAVA=================\\

//===============MENU ADM==============\\


case 'ban': case 'kick':
    if (!isBotAdmins) return reply(msg.botadm)
    if (!isGroup) return reply(msg.grupo)
    if (!isGroupAdmins) return reply(msg.adm)
    {
        // Corrigido: Removido 'await' da leitura do arquivo de √°udio
        const audiomenu = fs.readFileSync("./loli/audio/ban.mp3");
        
        loli.sendMessage(from, {audio: audiomenu, mimetype: 'audio/mpeg', ptt:true}, {quoted: info});

        if (info.message.extendedTextMessage === undefined || info.message.extendedTextMessage === null) {
            return reply('Marque a mensagem da pessoa que deseja banir');
        }

        if (info.message.extendedTextMessage.contextInfo.participant !== null && 
            info.message.extendedTextMessage.contextInfo.participant !== undefined && 
            info.message.extendedTextMessage.contextInfo.participant !== "") {
                
            mentioned = info.message.extendedTextMessage.contextInfo.mentionedJid[0] 
                ? info.message.extendedTextMessage.contextInfo.mentionedJid[0] 
                : info.message.extendedTextMessage.contextInfo.participant;

            let responseb = await loli.groupParticipantsUpdate(from, [mentioned], 'remove');
            
            if (responseb[0].status === "200") return reply(`*Usu√°rio removido do grupo com sucessoüôçüèª‚Äç‚ôÇÔ∏è*`);
            else if (responseb[0].status === "406") return reply('Como vc quer que eu remova o adm supremacy????');
            else if (responseb[0].status === "404") return reply('*Este usu√°rio j√° foi removido ou saiu do grupo*');
            else return reply('Tenta dnv');
        
        } else if (info.message.extendedTextMessage.contextInfo.mentionedJid != null && 
                   info.message.extendedTextMessage.contextInfo.mentionedJid != undefined) {

            mentioned = info.message.extendedTextMessage.contextInfo.mentionedJid;

            if (mentioned.length > 1) {
                if (mentioned.length > groupMembers.length || 
                    mentioned.length === groupMembers.length || 
                    mentioned.length > groupMembers.length - 3) return reply(`Vai arquivar msm??`);
                
                let sexocomrato = 0;

                for (let banned of mentioned) {
                    await sleep(100);
                    let responseb2 = await loli.groupParticipantsUpdate(from, [banned], 'remove');
                    if (responseb2[0].status === "200") sexocomrato = sexocomrato + 1;
                }
                return reply(``);
            
            } else {
                let responseb3 = await loli.groupParticipantsUpdate(from, [mentioned[0]], 'remove');
                
                if (responseb3[0].status === "200") return reply(`*Usu√°rio removido do grupo com sucessoüôçüèª‚Äç‚ôÇÔ∏è*`);
                else if (responseb3[0].status === "406") return reply('Como vc quer que eu remova o adm supremacy????');
                else if (responseb3[0].status === "404") return reply('Este usu√°rio j√° foi removido ou saiu');
                else return reply('Tenta dnv');
            }
        }
    }
break;

case 'nomegp':
if (!isBotAdmins) return reply(msg.botadm)
if (!isCreator) if (!isGroupAdmins) reply (`comando apenas para admins`)
if (!isGroupAdmins) if (!isCreator) nadm = fs.readFileSync('./loli/audio/soadm')

if (!isGroupAdmins) if (!isCreator) return loli.sendMessage(from, nadm, MessageType.audio, {quoted: info, mimetype: 'audio/mp4', ptt:true})
if (!isGroup) return reply(`Este comando so pode ser usado em grupo`);
if (!q) return reply(` `);
loli.groupUpdateSubject(from, `${q}`)
loli.sendMessage(from, {text: 'Sucesso, alterou o nome do grupo'})
break

case 'descgp':
case 'descri√ß√£ogp': 
if (!isGroupAdmins) return reply(msg.adm)
if (!isBotAdmins) return reply(msg.botadm)
if (!info.key.fromMe && !isCreator && !isBotGroupAdmins) return loli.sendMessage(from, {text: 'somente dono ou adm'})
if (!isGroup) return reply(`Este comando so pode ser usado em grupo`);
if (!q) return reply(` `);
loli.groupUpdateDescription(from, `${q}`)
loli.sendMessage(from, {text: 'Sucesso, alterou a descri√ß√£o do grupo'}, {quoted: loc})
break

case 'promover': case 'promote':
if (!isGroup) return reply(msg.grupo)
if (!isGroupAdmins) return reply(msg.adm)
if (info.message.extendedTextMessage === undefined || info.message.extendedTextMessage === null) return reply('Vai colocar o vento como adm???')
mentioned = info.message.extendedTextMessage.contextInfo.mentionedJid[0] ? info.message.extendedTextMessage.contextInfo.mentionedJid[0] : info.message.extendedTextMessage.contextInfo.participant
let responsedm = await loli.groupParticipantsUpdate(from, [mentioned], 'promote')
if (responsedm[0].status === "200") return reply('Temos um novo admir')
else if (responsedm[0].status === "404") return reply('Esse maluco nem ta no grupo ü§î')
else return reply('Tenta dnv '-'')
break

case "grupo":
if (!isGroup) return reply(msg.grupo)
if (!isGroupAdmins) return reply(msg.adm)
if (!isBotGroupAdmins) return reply(msg.botadm)
try {
if (q == "a") {
await loli.groupSettingUpdate(from, "not_announcement")
reply("Grupo aberto com sucesso")
}
if (q == "f") {
await loli.groupSettingUpdate(from, "announcement")
reply("Grupo fechado com sucesso ")
}
} catch(e) {
console.log(e)
reply(resposta.erro)
}
break

case 'rebaixar': case 'rebaixa':
if (!isGroupAdmins) return reply(msg.adm)
if (!isBotAdmins) return reply(msg.botadm)
if (!isGroup) return reply(msg.grupo)
if (!isGroupAdmins) return reply('nao e adm...')
if (info.message.extendedTextMessage === undefined || info.message.extendedTextMessage === null) return reply('Marque ou responda a mensagem de quem voc√™ quer tirar de admin')
mentioned = info.message.extendedTextMessage.contextInfo.mentionedJid[0] ? info.message.extendedTextMessage.contextInfo.mentionedJid[0] : info.message.extendedTextMessage.contextInfo.participant
let responsepm = await loli.groupParticipantsUpdate(from, [mentioned], 'demote')
if (responsepm[0].status === "406") return reply('Como vc quer que eu remova o adm supremacy????')
else if (responsepm[0].status === "200") return reply('Voce perdeu o cargo de adm por motivos justo, Lamento voce nao e mais adm do grupo üòÇüòÇ')
else if (responsepm[0].status === "404") return reply('Esse cara nem ta no grupo')
else return reply('tente dnv')
break

case 'reviver': case 'add':
reply(`Desculpe esse comando esta dando ban no n√∫mero nao e poss√≠vel usar`)
break

case 'marcarwa':
try {
if (!isGroup) return reply(msg.grupo)
if (!isGroupAdmins) return reply(msg.adm)
if (!isGroupAdmins && !isCreator) return reply('Voc√™ precisa ser ADM pra utilizar este comando')  
if(q.includes(`.`)) return reply("N√£o pode utilizar comandos nesse comando")
members_id = []
 let metadata = await loli.groupMetadata(from)
teks = (args.length > 1) ? body.slice(10).trim() : ''
teks += `„Äò *üë• MARCANDO TODOS üôÇ* „Äô\n\n*„Äòüë•„ÄôMEMBROS:* ${metadata.participants.length ? metadata.participants.length : "undefined"}\n\n`
for (let mem of groupMembers) {
teks += `‚ï†‚û• https://wa.me/${mem.id.split('@')[0]}\n`
members_id.push(mem.id)
}
loli.sendMessage(from, {text: teks}, {quoted: info})
} catch {
reply('ERROR!!')
}
break

case 'resetarlink':
if (!isBotAdmins) return reply(msg.botadm)
if (!isGroup) return reply(msg.grupo)
if (!isGroupAdmins) return reply(msg.adm)
try {
await loli.groupRevokeInvite(from)
reply("*LINK DO GRUPO RESETADO COM SUCESSO‚úÖ*")
} catch(e) {
console.log(e)
reply(resposta.erro)
}
break

case 'antiimg':
if (!isBotAdmins) return reply(msg.botadm)
if (!isGroup) return reply(msg.grupo)
if (!isGroupAdmins) return reply(msg.adm)
if (args.length < 1) return reply('1 pra ligar / 0 pra desligar')
if (Number(args[0]) === 1) {
if (isAntiImg) return reply('J√° Esta ativo')
antiimg.push(from)
fs.writeFileSync('./arquivos/antis/antiimg.json', JSON.stringify(antiimg))
reply('Ativou com sucesso o recurso de anti imagem neste grupo‚úîÔ∏è')
} else if (Number(args[0]) === 0) {
if (!isAntiImg) return reply('Ja esta Desativado.')
antiimg.splice(from, 1)
fs.writeFileSync('./arquivos/antis/antiimg.json', JSON.stringify(antiimg))
reply('Desativou com sucesso o recurso de anti imagem neste grupo‚úîÔ∏è')
} else {
reply('1 para ativar, 0 para desativar')
}
break

case 'saibot':
if (!isGroup) return reply(mag.grupo)
if (!isGroupAdmins) return reply(msg.adm)
if (!isBotGroupAdmins) return reply(msg.botadm)
reply(`ok ${pushname} me desculpe se eu nao pude ajud√°-lo(a) com o que vc precisava....adeusüòî`)
await delay(1000)
try {
await loli.groupLeave(from)
} catch(e) {
console.log(e)
reply(resposta.erro)
}
break

//============FIM DOS CMD ADM=============\\

//============CMD DONO===========\\
case 'sairgp':
if (!isCreator) return loli.sendMessage(from, {text: 'somente dono'})
try {
loli.groupLeave(from)
} catch(erro) {
reply(String(erro))
}
break

case 'reiniciar':
if (!isCreator) return reply(msg.dono)
loli.sendMessage(from,{text: `_Ok Reiniciando Isso vai levar alguns segundos..._`}, {quoted: info})
setTimeout(() => {process.exit(0)}, 3000)
break

case 'foto':
if (!isCreator) return loli.sendMessage(from, {text: 'somente dono'})
loli.sendMessage(from, {image: fs.readFileSync('./loli/image/menu.jpg'), caption: 'ùë∫ùë®ùëµùë´ùëπùë∂-ùë©ùë∂ùëª‚Éüü•Ç'},{quoted: info})
break

case 'video':
if (!isCreator) return loli.sendMessage(from, {text: 'somente dono'})
loli.sendMessage(from, {video: fs.readFileSync('./loli/video/cantada brabakkkkk.mp4'), caption: 'ùë∫ùë®ùëµùë´ùëπùë∂-ùë©ùë∂ùëª‚Éüü•Ç'},{quoted: info})
break


case 'dado':
const dadus = ["‚öÄ", "‚öÅ", "‚öÇ", "‚öÉ", "‚öÑ", "‚öÖ"]
dadu = dadus[Math.floor(Math.random() * dadus.length)]
dador = fs.readFileSync('./arquivos/funcoes/dado/' + dadu + '.webp')
loli.sendMessage(from, {
sticker: dador
}, {
quoted: info
})
break

case 'limpeza':
if (!isCreator) return loli.sendMessage(from, {text: 'somente dono'})
loli.sendMessage(m.chat, {text: `krl lixo pra kct\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Limpo com sucesso ‚úÖ`},{quoted: m})
break

case 'fotopraperfil_femino':{
if(!isPremium) return reply(msg.premium)
await loli.sendMessage(from, { react: { text: `‚úÖ`, key: info.key }})
reply(`Enviando a foto no seu perfil...`)
bla = await fetchJson("https://world-ecletix.onrender.com/api/femininotrava")

loli.sendMessage(sender, {image: {url: bla.url}})
}break




case 'meme':{
if(!isPremium) return reply(msg.premium)
reply(`enviando meme aguarde...`)
bla = await fetchJson("https://world-ecletix.onrender.com/api/meme")

loli.sendMessage(from, {video: {url: bla.url}})
}break

case 'onlyfans': {
  if (!isPremium) return reply(msg.premium);
  reply(`Estou enviando no seu PV ${pushname}, se n√£o for porque a API caiu.`);
  
  // Envia a imagem diretamente usando a nova API
  loli.sendMessage(sender, {image: {url: "https://world-ecletix.onrender.com/api/onlyfans"}});
}
break

case 'foto18':
case 'foto+18': {
  if (!isPremium) return reply(msg.premium);
  reply(`Estou enviando no seu PV ${pushname}, se n√£o for porque a API caiu.`);
  
  // Fazendo a requisi√ß√£o diretamente para a nova API
  loli.sendMessage(sender, {image: {url: "https://world-ecletix.onrender.com/api/atriz"}});
}
break;
case 'gerarlink':
case 'uplink':
reagir(from, "üíæ")
try {//By: ñßÑ ùêãùêîùêÇùêÄùêí ùêåùêéùêÉ ùêÉùêéùêåùêàùêçùêÄ ñßÑ
let media, type, mimetype
if (isQuotedSticker || (info.message.stickerMessage && info.message.stickerMessage.mimetype === 'image/webp')) {
media = isQuotedSticker ? info.message.extendedTextMessage.contextInfo.quotedMessage.stickerMessage : info.message.stickerMessage
mimetype = 'image/webp'
type = 'sticker'
} else if (isQuotedImage || isImage) {
media = isQuotedImage ? info.message.extendedTextMessage.contextInfo.quotedMessage.imageMessage : info.message.imageMessage
mimetype = media.mimetype
type = 'image'
} else if (isQuotedVideo || isVideo) {
media = isQuotedVideo ? info.message.extendedTextMessage.contextInfo.quotedMessage.videoMessage : info.message.videoMessage
mimetype = media.mimetype
type = 'video'
} else if (isQuotedAudio || isAudio) {
media = isQuotedAudio ? info.message.extendedTextMessage.contextInfo.quotedMessage.audioMessage : info.message.audioMessage
mimetype = media.mimetype
type = 'audio'
} else if (isQuotedDocument || isDocument) {
media = isQuotedDocument ? info.message.extendedTextMessage.contextInfo.quotedMessage.documentMessage : info.message.documentMessage
mimetype = media.mimetype
type = mimetype.split('/')[0]
} else {
return reply('‚ùå Marque uma Imagem, V√≠deo, √Åudio, Sticker ou Documento.')
}
const ext = mimetype.split('/').pop()
const validExtensions = { mpeg: 'mp3', m4a: 'mp3' }
const finalExt = validExtensions[ext] || ext
const tempFile = `temp_${Date.now()}.${finalExt}`
const fileBuffer = await getFileBuffer(media, type)
fs.writeFileSync(tempFile, fileBuffer)
console.log(`üü¢ Enviando arquivo para a API: ${tempFile}`)
const FormData = require('form-data')
const form = new FormData()
form.append('file', fs.createReadStream(tempFile))
const response = await axios.post('https://zero-two.info/upload', form, {
headers: { ...form.getHeaders() }
})
if (!response || !response.data || !response.data.fileUrl) {
throw new Error('‚ùå Sem resposta v√°lida da API de upload.')
}
const fileUrl = response.data.fileUrl
const fileExtension = fileUrl.split('.').pop()
if (fileExtension === 'webp' && type === 'sticker') {
reply(`üìÑ Sticker identificado, gerando link.\n\nüîó *LINK:* ${fileUrl}`)
loli.sendMessage(from, { sticker: fileBuffer }, { quoted: info })
} else if (['jpg', 'jpeg', 'png', 'gif'].includes(fileExtension)) {
reply('üñºÔ∏è Imagem identificado, gerando link.')
loli.sendMessage(from, { image: fileBuffer, caption: `üîó *LINK:* ${fileUrl}` }, { quoted: info })
} else if (['mp4'].includes(fileExtension)) {
reply('üé• Video identificado, gerando link.')
loli.sendMessage(from, { video: fileBuffer, caption: `üîó *LINK:* ${fileUrl}` }, { quoted: info })
} else if (['mp3', 'wav'].includes(fileExtension)) {
reply(`üéµ Audio identificado, gerando link.\n\nüîó *LINK:* ${fileUrl}`)
loli.sendMessage(from, { audio: { url: fileUrl }, mimetype: "audio/mpeg", ptt: true }, { quoted: info })
} else {
reply('üóÇ Arquivo/Documento identificado, gerando link.')
loli.sendMessage(from, { document: fileBuffer, caption: `üîó *LINK:* ${fileUrl}`, mimetype, fileName: `arquivo.${fileExtension}` }, { quoted: info })
}
console.log(`üü¢ Arquivo enviado com sucesso: ${fileUrl}`)
fs.unlinkSync(tempFile)
} catch (error) {
console.error('‚ùå Erro no upload:', error)
reply('‚ùå Ocorreu um erro durante o upload.')
}
break
 
case 'lomotifs':
case 'lomotif': {
  if (!isPremium) return reply(msg.premium);
  reply(`Estou enviando no seu PV ${pushname}, se n√£o for porque a API caiu.`);
  
  // Fazendo a requisi√ß√£o diretamente para a nova API
  loli.sendMessage(sender, {video: {url: "https://world-ecletix.onrender.com/api/editsfeminina"}});
}
break;
case 'seguidores':
reagir(from, "üì∑")
await sleep(1000)
reply(`*_ü•∂ Ol√° , aqui est√° o seu pedido, espero que voc√™ goste!_*
-
‚òï m√©todo de seguidores no Instagram 
-
üåê *https://pt.anotepad.com/notes/nf7g2f5g`)
break
case 'onlyfans': {
  if (!isPremium) return reply(msg.premium);
  reply(`Estou enviando no seu PV ${pushname}, se n√£o for porque a API caiu.`);
  
  // Envia a imagem diretamente usando a nova API
  loli.sendMessage(sender, {image: {url: "https://world-ecletix.onrender.com/api/onlyfans"}});
}
break;
case 'fotinhas': {
  if (!isPremium) return reply(msg.premium);
  reply(`Estou enviando no seu PV ${pushname}, se n√£o for porque a API caiu.`);
  
  // Envia a imagem diretamente usando a nova API
  loli.sendMessage(sender, {image: {url: "https://world-ecletix.onrender.com/api/fotinhas"}});
}
break;
case 'foto_aleatoria': {
  if (!isPremium) return reply(msg.premium);
  reply(`Estou enviando no seu PV ${pushname}, se n√£o for porque a API caiu.`);
  
  // Envia a imagem diretamente usando a nova API
  loli.sendMessage(sender, {image: {url: "https://world-ecletix.onrender.com/api/pack"}});
}
break;

case 'pussy':{
if(!isPremium) return reply(msg.premium)
reply(`Estou enviando no seu PV ${pushname} se n√£o for porque API caiu.`)
bla = await fetchJson("https://clover-t-bot-r0wt.onrender.com/nsfw/neko?key=768934&username=comefemea")

loli.sendMessage(sender, {image: {url: bla.url}})
}break

case 'neko2':{
if(!isPremium) return reply(msg.premium)
reply(`Estou enviando no seu PV ${pushname} se n√£o for porque API caiu.`)
bla = await fetchJson("https://clover-t-bot-r0wt.onrender.com/nsfw/neko?key=768934&username=comefemea")

loli.sendMessage(sender, {image: {url: bla.url}})
}break

case 'achego':{
if(!isPremium) return reply(msg.premium)
reply(`Estou enviando no seu PV ${pushname} se n√£o for porque API caiu.`)
bla = await fetchJson("https://clover-t-bot-r0wt.onrender.com/nsfw/neko?key=768934&username=comefemea")

loli.sendMessage(sender, {image: {url: bla.url}})
}break

case 'manga':{
if(!isPremium) return reply(msg.premium)
reply(`Estou enviando no seu PV ${pushname} se n√£o for porque API caiu.`)
bla = await fetchJson("https://clover-t-bot-r0wt.onrender.com/nsfw/neko?key=768934&username=comefemea")

loli.sendMessage(sender, {image: {url: bla.url}})
}break

case 'foot':{
if(!isPremium) return reply(msg.premium)
reply(`Estou enviando no seu PV ${pushname} se n√£o for porque API caiu.`)
bla = await fetchJson("https://clover-t-bot-r0wt.onrender.com/nsfw/neko?key=768934&username=comefemea")

loli.sendMessage(sender, {image: {url: bla.url}})
}break

case 'v√≠deo18':
case 'video18': {
  if (!isPremium) return reply(msg.premium);
  reply(`Estou enviando no seu PV ${pushname}, se n√£o for porque a API caiu.`);
  
  // Fazendo a requisi√ß√£o diretamente para a nova API
  loli.sendMessage(sender, {video: {url: "https://world-ecletix.onrender.com/api/videozinhos"}});
}
break;

case 'aesthetic': {
  if (!isPremium) return reply(msg.premium);
  reply(`Estou enviando no seu PV ${pushname}, se n√£o for porque a API caiu.`);
  
  // Envia a imagem diretamente usando a nova API
  loli.sendMessage(sender, {image: {url: "https://world-ecletix.onrender.com/api/aesthetic"}});
}
break

case 'cosplay': {
  if (!isPremium) return reply(msg.premium);
  reply(`Estou enviando no seu PV ${pushname}, se n√£o for porque a API caiu.`);
  
  // Envia a imagem diretamente usando a nova API
  loli.sendMessage(sender, {image: {url: "https://world-ecletix.onrender.com/api/cosplay"}});
loli.sendMessage(sender, {video: {url: bla.url}})
}break


case 'cosplayloli': {
  if (!isPremium) return reply(msg.premium);
  reply(`Estou enviando no seu PV ${pushname}, se n√£o for porque a API caiu.`);
  
  // Envia a imagem diretamente usando a nova API
  loli.sendMessage(sender, {image: {url: "https://world-ecletix.onrender.com/api/cosplayloli"}});
}
break;

case 'cosplaysagiri': {
  if (!isPremium) return reply(msg.premium);
  reply(`Estou enviando no seu PV ${pushname}, se n√£o for porque a API caiu.`);
  
  // Envia a imagem diretamente usando a nova API
  loli.sendMessage(sender, {image: {url: "https://world-ecletix.onrender.com/api/cosplaysagiri"}});
}
break;


case 'game_wallp': {
  if (!isPremium) return reply(msg.premium);
  reply(`Estou enviando no seu PV ${pushname}, se n√£o for porque a API caiu.`);
  
  // Envia a imagem diretamente usando a nova API
  loli.sendMessage(sender, {image: {url: "https://world-ecletix.onrender.com/api/gameWallp"}});
}
break;

case 'pookemon': {
  if (!isPremium) return reply(msg.premium);
  reply(`Estou enviando no seu PV ${pushname}, se n√£o for porque a API caiu.`);
  
  // Envia a imagem diretamente usando a nova API
  loli.sendMessage(sender, {image: {url: "https://world-ecletix.onrender.com/api/pokemon"}});
}
break;

case 'satanic': {
  if (!isPremium) return reply(msg.premium);
  reply(`Estou enviando no seu PV ${pushname}, se n√£o for porque a API caiu.`);
  
  // Envia a imagem diretamente usando a nova API
  loli.sendMessage(sender, {image: {url: "https://world-ecletix.onrender.com/api/satanic"}});
}
break;

case 'nime': {
  if (!isPremium) return reply(msg.premium);
  reply(`Estou enviando no seu PV ${pushname}, se n√£o for porque a API caiu.`);
  
  // Envia a imagem diretamente usando a nova API
  loli.sendMessage(sender, {image: {url: "https://world-ecletix.onrender.com/api/Nime"}});
}
break;

case 'shotas': {
  if (!isPremium) return reply(msg.premium);
  reply(`Estou enviando no seu PV ${pushname}, se n√£o for porque a API caiu.`);
  
  // Envia a imagem diretamente usando a nova API
  loli.sendMessage(sender, {image: {url: "https://world-ecletix.onrender.com/api/shotas"}});
}
break;


case 'trava2':
if(!isCreator) return replu(msg.dono)
reply(`ü§¨ ${venomiphone1}`) 
break

case 'lbc':{
if(!isPremium) return reply(msg.premium)
reply(`Estou enviando no seu PV ${pushname} se n√£o for porque API caiu.`)
bla = await fetchJson("https://clover-t-bot-r0wt.onrender.com/nsfw/neko?key=768934&username=comefemea")

loli.sendMessage(sender, {image: {url: bla.url}})
}break

case 'hentai4':{
if(!isPremium) return reply(msg.premium)
reply(`Estou enviando no seu PV ${pushname} se n√£o for porque API caiu.`)
bla = await fetchJson("https://clover-t-bot-r0wt.onrender.com/nsfw/neko?key=768934&username=comefemea")

loli.sendMessage(sender, {image: {url: bla.url}})
}break

case 'hentai3':{
if(!isPremium) return reply(msg.premium)
reply(`Estou enviando no seu PV ${pushname} se n√£o for porque API caiu.`)
bla = await fetchJson("https://clover-t-bot-r0wt.onrender.com/nsfw/neko?key=768934&username=comefemea")

loli.sendMessage(sender, {image: {url: bla.url}})
}break


case 'zettai':{
if(!isPremium) return reply(msg.premium)
reply(`Estou enviando no seu PV ${pushname} se n√£o for porque API caiu.`)
bla = await fetchJson("https://clover-t-bot-r0wt.onrender.com/nsfw/neko?key=768934&username=comefemea")

loli.sendMessage(sender, {image:  {url: bla.url}}) 
}break

case 'bdsm':{
if(!isPremium) return reply(msg.premium)
reply(`Estou enviando no seu PV ${pushname} se n√£o for porque API caiu.`)
bla = await fetchJson("https://clover-t-bot-r0wt.onrender.com/nsfw/neko?key=768934&username=comefemea")

loli.sendMessage(sender, {image:  {url: bla.url}}) 
}break

case 'glasses':{
if(!isPremium) return reply(msg.premium)
reply(`Estou enviando no seu PV ${pushname} se n√£o for porque API caiu.`)
bla = await fetchJson("https://clover-t-bot-r0wt.onrender.com/nsfw/neko?key=768934&username=comefemea")

loli.sendMessage(sender, {image:  {url: bla.url}}) 
}break

case 'orgy':{
if(!isPremium) return reply(msg.premium)
reply(`Estou enviando no seu PV ${pushname} se n√£o for porque API caiu.`)
bla = await fetchJson("https://clover-t-bot-r0wt.onrender.com/nsfw/neko?key=768934&username=comefemea")

loli.sendMessage(sender, {image:  {url: bla.url}}) 
}break
		case 'minerarcarvao':
if (!isGroup) return reply('somente em grupos')
reagir(from, '‚õèÔ∏è')
let minerado = Math.floor(Math.random() * 100)
AdicionarSaldo(sender, minerado)
let saldoAtual = VerSaldo(sender)
await loli.sendMessage(from, {image: {url:`https://storage.oberonhosting.com.br/media/e530f3cd4e2c2b4d.jpg`}, caption: `Voc√™ minerou ${minerado} de carv√£o!
Seu saldo atual √©: ${saldoAtual}`})
break

case 'minerarferro'://Lana modz 
    if (!isGroup) return reply('somente em grupos')
    reagir(from, '‚õèÔ∏è')
    let minerador = Math.floor(Math.random() * 100)
    AdicionarSaldo(sender, minerador)
    let totaldesaldo = VerSaldo(sender)
    await loli.sendMessage(from, {
        image: { url: `http://br5.bronxyshost.com:4034/uploads/1731324021377.jpg` },
        caption: `Voc√™ minerou ${minerador} de ferro!
Seu saldo atual √©: ${totaldesaldo}`
    })///LANA MODZ 
    break

case 'minerarouro':// Lana modz 
    if (!isGroup) return reply('somente em grupos')
    reagir(from, '‚õèÔ∏è')
    let ourocoins = Math.floor(Math.random() * 50) + 50 // Valor ajustado para minerar entre 50 e 100 de ouro
    AdicionarSaldo(sender, ourocoins)
    let saldoCoins = VerSaldo(sender)
    await loli.sendMessage(from, {image: {url: `http://br5.bronxyshost.com:4034/uploads/1731325428613.jpg`}, caption: `Voc√™ minerou ${ourocoins} de ouro!
Seu saldo atual √©: ${saldoCoins}`})
    break//üëåe voc√™ e gay

case 'explorarcaverna'://Lana Modz 
    if (!isGroup) return reply('somente em grupos')
    reagir(from, '‚õèÔ∏è')

    // Simula a descoberta de ouro em uma explora√ß√£o
    let cavernacoins = Math.floor(Math.random() * 50) + 50 // Gera entre 50 e 100 moedas de ouro
    AdicionarSaldo(sender, cavernacoins)
    let exploraCoins = VerSaldo(sender)

    // Envia a mensagem com uma imagem ilustrativa
    await loli.sendMessage(from, {
        image: { url: `https://storage.oberonhosting.com.br/media/ec23200a4aec69a6.jpg` },
        caption: `Voc√™ explorou uma caverna misteriosa e encontrou ${cavernacoins} de ouro!
Seu saldo atual √©: ${exploraCoins}`
    })
    break//Lana Modz
 case 'versolicitacoes': {//by alana Modz
    if (!isGroupAdmins && !SoDono) return reply('so adm')
    if (!isBotGroupAdmins) return reply('nao sou adm')
//bot precisa ser adm do grupo pra ver as solicita√ß√µes 
    try {
        const req = await loli.groupRequestParticipantsList(from)
        let totalRequest = req.length
//aqui ea pe√ßa chave o bot vai ver quantas solicita√ß√£o tem no zeu Grupo
        if (totalRequest === 0) {
            return reply(`*N√£o h√° nenhuma solicita√ß√£o pendente no grupo üíÅ‚Äç‚ôÇÔ∏è*`)
        } else {
            return reply(`*Existem ${totalRequest} solicita√ß√£o(√µes) pendente(s) no grupo!*`)
        }
    } catch (error) {
        console.error('Erro ao verificar as solicita√ß√µes:', error)
        reply(`*Ocorreu um erro ao tentar verificar as solicita√ß√µes. Por favor, tente novamente mais tarde.*`)
    }
}//üìùe por favor n√£o apague os cr√©ditos okay 
break//Lana modz dona da furina v1
 case 'aceitar': case '‚úÖ': {
    if(!isGroupAdmins && !SoDono) return reply('so adms') // NKZIN AMA A ALANA
    if(!isBotGroupAdmins) return reply('nao sou adm')
    const req = await loli.groupRequestParticipantsList(from)//queria ser bom na programa√ß√£o, estou preste a desistir.
    let totalRequest = req.length
if (req == 0) return reply(`*TEM SOLICITA√á√ÉO NAO MANO*`)
    for (var i of req) {
        i.jid.replace += `Sujeito: @${i.jid.replace("@s.whatsapp.net", "")}\nN√∫mero solicitante: ${i.jid.replace("@s.whatsapp.net", "")}\n`;
        await loli.groupRequestParticipantsUpdate(from, [i.jid.replace("@s.whatsapp.net", "")+"@s.whatsapp.net"], "approve")
    }
    reply('*SOLICITA√á√ïES ACEITAS*')
}
break
 case 'recusar': case '‚ùå': {
    if (!isGroupAdmins && !SoDono) return reply('so adms') // Nk
    if (!isBotGroupAdmins) return reply('nao sou adm')

    const req = await loli.groupRequestParticipantsList(from) //AMO A ALANA: NKZIN 
    let totalRequest = req.length

    if (totalRequest == 0) return reply(`*TEM SOLICITA√á√ÉO NAO PAE*`)

    for (let i of req) {
        let userJid = i.jid //NK
        await loli.groupRequestParticipantsUpdate(from, [userJid], "reject") //NKZIN DA ALANA
    }
    
    reply('*SOLICITA√á√ïES RECUSADAS*')
}
break

case 'imgpralink3':
case 'gerarlink3': 
try { 
    // essa porra foi criada por mim, entao deixe os cr√©ditos, by: ryuu
    if (isQuotedImage) {
        const boij = isQuotedImage 
        ? JSON.parse(JSON.stringify(info).replace("quotedM", "m")).message.extendedTextMessage.contextInfo.message.imageMessage 
        : info;

        const fetch = require('node-fetch');
        const FormData = require('form-data');

        // Fun√ß√£o para fazer upload da imagem no Uguu
        async function uploadImageToUguu(imageBuffer) {
            const form = new FormData();
            form.append('files[]', imageBuffer, { filename: 'image.jpg' });

            const response = await fetch('https://uguu.se/upload', {
                method: 'POST',
                body: form
            });

            const data = await response.json();

            // Verifica se o upload foi bem-sucedido e se a URL foi retornada
            if (response.ok && data.files && data.files[0].url) {
                return data.files[0].url;
            } else {
                throw new Error('Falha ao obter o link da imagem a partir da resposta.');
            }
        }

        // Garante que a fun√ß√£o `getFileBuffer` est√° dispon√≠vel
        const owgi = await getFileBuffer(boij, "image");
        const imageUrl = await uploadImageToUguu(owgi);
        
        const ryuumods = `_*Link gerado com sucesso*_‚ö°Ô∏è\n\n${imageUrl}`;
        reply(ryuumods);

    } else {
        reply(`${pushname}, voc√™ tem que marcar a foto desejada.`);
    }
    
} catch (e) {
    console.log('Detalhes do erro:', e); 
    reply('Erro ao processar a imagem e gerar o link...');
} 
break;
case 'plaq':{
if(!isPremium) return reply(msg.premium)
    if (args.length < 1) return reply(`${prefix}plaq e digite o seu nome`)
    teks = body.slice(6)
    if (teks.length > 15) return reply('O texto √© longo, at√© 15 caracteres') //maximo de caracteres
    buffer =(`https://raptibef.sirv.com/images%20(3).jpeg?text.0.text=${teks}&text.0.position.gravity=center&text.0.position.x=19%25&text.0.size=45&text.0.color=000000&text.0.opacity=55&text.0.font.family=Crimson%20Text&text.0.font.weight=300&text.0.font.style=italic&text.0.outline.opacity=21`)
    loli.sendMessage(sender, {image: {url: buffer }, caption: ' *Plaquinha feita*'})
    await loli.sendMessage(from, { react: { text: `üîû`, key: info.key }})
    }
    reply(`a plaquinha esta sendo enviado no seu privado...`)
    break

case 'plaq2':{
if(!isPremium) return reply(msg.premium)
    if (args.length < 1) return reply(`${prefix}plaq e digite o seu nome`)
    teks = body.slice(6)
    if (teks.length > 15) return reply('O texto √© longo, at√© 15 caracteres') //maximo de caracteres
    buffer =(`https://umethroo.sirv.com/BUNDA1.jpg?text.0.text=${teks}&text.0.position.x=-20%25&text.0.position.y=-20%25&text.0.size=18&text.0.color=000000&text.0.font.family=Architects%20Daughter&text.0.font.weight=700&text.0.background.opacity=65`)
    loli.sendMessage(sender, {image: {url: buffer }, caption: ' *Plaquinha feita*'})
    await loli.sendMessage(from, { react: { text: `üîû`, key: info.key }})
    }
    reply(`a plaquinha esta sendo enviado no seu privado...`)
    break

case 'plaq3':{
if(!isPremium) return reply(msg.premium)
    if (args.length < 1) return reply(`${prefix}plaq e digite o seu nome`)
    teks = body.slice(6)
    if (teks.length > 15) return reply('O texto √© longo, at√© 15 caracteres') //maximo de caracteres
    buffer =(`https://umethroo.sirv.com/bunda3.jpg?text.0.text=${teks}&text.0.position.gravity=center&text.0.position.x=-25%25&text.0.position.y=-17%25&text.0.size=17&text.0.color=000000&text.0.font.family=Architects%20Daughter&text.0.font.weight=700&text.0.font.style=italic`)
    loli.sendMessage(sender, {image: {url: buffer }, caption: ' *Plaquinha feita*'})
    await loli.sendMessage(from, { react: { text: `üîû`, key: info.key }})
    }
    reply(`a plaquinha esta sendo enviado no seu privado...`)
    break

case 'plaq4':{
if(!isPremium) return reply(msg.premium)
    if (args.length < 1) return reply(`${prefix}plaq e digite o seu nome`)
    teks = body.slice(6)
    if (teks.length > 15) return reply('O texto √© longo, at√© 15 caracteres') //maximo de caracteres
    buffer =(`https://umethroo.sirv.com/peito1.jpg?text.0.text=${teks}&text.0.position.x=-48%25&text.0.position.y=-68%25&text.0.size=14&text.0.color=000000&text.0.font.family=Shadows%20Into%20Light&text.0.font.weight=700`)
    loli.sendMessage(sender, {image: {url: buffer }, caption: ' *Plaquinha feita*'})
    await loli.sendMessage(from, { react: { text: `üîû`, key: info.key }})
    }
    reply(`a plaquinha esta sendo enviado no seu privado...`)
    break

case 'plaq5':{
if(!isPremium) return reply(msg.premium)
    if (args.length < 1) return reply(`${prefix}plaq e digite o seu nome`)
    teks = body.slice(6)
    if (teks.length > 15) return reply('O texto √© longo, at√© 15 caracteres') //maximo de caracteres
    buffer =(`https://umethroo.sirv.com/9152e7a9-7d49-48ef-b8ac-2e6149fda0b2.jpg?text.0.text=${teks}&text.0.position.x=-70%25&text.0.position.y=-23%25&text.0.size=17&text.0.color=000000&text.0.font.family=Architects%20Daughter&text.0.font.weight=300`)
    loli.sendMessage(sender, {image: {url: buffer }, caption: ' *Plaquinha feita*'})
    await loli.sendMessage(from, { react: { text: `üîû`, key: info.key }})
    }
    reply(`a plaquinha esta sendo enviado no seu privado...`)
    break

case 'plaq6':{
if(!isPremium) return reply(msg.premium)
    if (args.length < 1) return reply(`${prefix}plaq e digite o seu nome`)
    teks = body.slice(6)
    if (teks.length > 15) return reply('O texto √© longo, at√© 15 caracteres') //maximo de caracteres
    buffer =(`https://clutamac.sirv.com/1011b781-bab1-49e3-89db-ee2c064868fa%20(1).jpg?text.0.text=${teks}&text.0.position.gravity=northwest&text.0.position.x=22%25&text.0.position.y=60%25&text.0.size=12&text.0.color=000000&text.0.opacity=47&text.0.font.family=Roboto%20Mono&text.0.font.style=italic`)
    loli.sendMessage(sender, {image: {url: buffer }, caption: ' *Plaquinha feita*'})
    await loli.sendMessage(from, { react: { text: `üîû`, key: info.key }})
    }
    reply(`a plaquinha esta sendo enviado no seu privado...`)
    break

case 'plaq7':{
if(!isPremium) return reply(msg.premium)
    if (args.length < 1) return reply(`${prefix}plaq e digite o seu nome`)
    teks = body.slice(6)
    if (teks.length > 15) return reply('O texto √© longo, at√© 15 caracteres') //maximo de caracteres
    buffer =(`https://umethroo.sirv.com/Torcedora-da-sele%C3%A7%C3%A3o-brasileira-nua-mostrando-a-bunda-236x300.jpg?text.0.text=${teks}&text.0.position.x=-64%25&text.0.position.y=-39%25&text.0.size=25&text.0.color=1b1a1a&text.0.font.family=Architects%20Daughter`)
    loli.sendMessage(sender, {image: {url: buffer }, caption: ' *Plaquinha feita*'})
    await loli.sendMessage(from, { react: { text: `üîû`, key: info.key }})
    }
    reply(`a plaquinha esta sendo enviado no seu privado...`)
    break

case 'loli' :{
if(!isPremium) return reply(msg.premium)
reply("aguarde um momento, eu vou enviar no seu pv se demorar demais e pq nao encontrei a foto...")
    waifuddd = await axios.get('https://waifu.pics/api/sfw/shinobu')
 var wbuttsssr = [
    {buttonId: `-loli`, buttonText: {displayText: `>>`}, type: 1},
    ]
        let buttonMessagessfgr = {
        image: {url:waifuddd.data.url},
        caption: 'vc e um(a) lolicon?ü§î!',
 //       buttons: wbuttsssr,
        headerType: 2
         }     
                                  
    await loli.sendMessage(sender, buttonMessagessfgr, { quoted:info }).catch(err => {
        return('error..')
        })
        }
break

case 'only1': //${botName} 
if(!isPremium) return reply(msg.premium)
await loli.sendMessage(from, { react: { text: `‚úÖ`, key: info.key }})
reply(`[‚òëÔ∏è]Enviado no seu pv`)
only1 = `
Luiz russo (mans√£o maromba)
‚å†üåê‚å°> https://t.me/+8cJ7yGnq5fI2YjYx
`
loli.sendMessage(sender, {text: only1}, {quoted: info})
break

case 'only2': //${botName} 
if(!isPremium) return reply(msg.premium)
await loli.sendMessage(from, { react: { text: `‚úÖ`, key: info.key }})
reply(`[‚òëÔ∏è]Enviado no seu pv`)
only2 = `
Luiza blue 
‚å†üåê‚å°> https://t.me/+JaX8wY_45843ZTBh
`
loli.sendMessage(sender, {text: only2}, {quoted: info})
break

case 'only3': //${botName} 
if(!isPremium) return reply(msg.premium)
await loli.sendMessage(from, { react: { text: `‚úÖ`, key: info.key }})
reply(`[‚òëÔ∏è]Enviado no seu pv`)
only3 = `
Isadora vale 
‚å†üåê‚å°> https://t.me/+smb4i0bxRl41ZjRh
`
loli.sendMessage(sender, {text: only3}, {quoted: info})
break

case 'only4': //${botName} 
if(!isPremium) return reply(msg.premium)
await loli.sendMessage(from, { react: { text: `‚úÖ`, key: info.key }})
reply(`[‚òëÔ∏è]Enviado no seu pv`)
only4 = `
Ingrid bianchi
‚å†üåê‚å°> https://t.me/+RJtf2TqTQ8NjZjlh
`
loli.sendMessage(sender, {text: only4}, {quoted: info})
break

case 'only5'://${botName}  
if(!isPremium) return reply(msg.premium)
await loli.sendMessage(from, { react: { text: `‚úÖ`, key: info.key }})
reply(`[‚òëÔ∏è]Enviado no seu pv`)
only5 = `
Lizy Donato 
‚å†üåê‚å°> https://t.me/+gmSjm2WZnb41OGEx
`
loli.sendMessage(sender, {text: only5}, {quoted: info})
break

case 'only6': //${botName} 
if(!isPremium) return reply(msg.premium)
await loli.sendMessage(from, { react: { text: `‚úÖ`, key: info.key }})
reply(`[‚òëÔ∏è]Enviado no seu pv`)
only6 = ` 
Feh Galv√£o
‚å†üåê‚å°> https://t.me/+naeQ1pp8ajswMjgx
`
loli.sendMessage(sender, {text: only6}, {quoted: info})
break

case 'only7': //${botName} 
if(!isPremium) return reply(msg.premium)
await loli.sendMessage(from, { react: { text: `‚úÖ`, key: info.key }})
reply(`[‚òëÔ∏è]Enviado no seu pv`)
only7 = `
Tatyzack
‚å†üåê‚å°> https://t.me/+NvglGFhOLSY5NmZ
`
loli.sendMessage(sender, {text: only7}, {quoted: info})
break

case 'only8'://${botName}  
if(!isPremium) return reply(msg.premium)
await loli.sendMessage(from, { react: { text: `‚úÖ`, key: info.key }})
reply(`[‚òëÔ∏è]Enviado no seu pv`)
only8 = `
Ayrla Souza 
‚å†üåê‚å°> https://t.me/+XLziPd47MWo2N2Y
`
loli.sendMessage(sender, {text: only8}, {quoted: info})
break

case 'only9'://${botName} 
if(!isPremium) return reply(msg.premium)
await loli.sendMessage(from, { react: { text: `‚úÖ`, key: info.key }})
reply(`[‚òëÔ∏è]Enviado no seu pv`)
only9 = `
ALINE FARIA
‚å†üåê‚å°> https://t.me/+j1xp_hmXrx5lZWMx
`
loli.sendMessage(sender, {text: only9}, {quoted: info})
break

case 'limpar':
if(!isGroup) return reply(msg.grupo)
if(!isGroupAdmins) return reply(msg.adm)
clear = `üóëÔ∏è\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nüóëÔ∏è\n‚ù≤‚ùó‚ù≥ *L…™·¥ç·¥ò·¥á·¥¢·¥Ä ·¥Ö·¥á C ú·¥Ä·¥õ C·¥è…¥·¥Ñ ü·¥ú…™ÃÅ·¥Ö·¥Ä* ‚úÖ`
if(verificado === true) {
loli.sendMessage(from, {text: clear}, {quoted: info, contextInfo : { forwardingScore: 500, isForwarded:true}})
} else {
loli.sendMessage(from, {text: clear}, {quoted: info, contextInfo : { forwardingScore: 500, isForwarded:true}})  
}
break

case 'only10'://${botName} 
if(!isPremium) return reply(msg.premium)
await loli.sendMessage(from, { react: { text: `‚úÖ`, key: info.key }})
reply(`[‚òëÔ∏è]Enviado no seu pv`)
only10 = `
KINE CHAN 
‚å†üåê‚å°> https://t.me/+YIVax4IQ9aFlMDgx
`
loli.sendMessage(sender, {text: only10}, {quoted: info})
break

case 'only11': //${botName} 
if(!isPremium) return reply(msg.premium)
await loli.sendMessage(from, { react: { text: `‚úÖ`, key: info.key }})
reply(`[‚òëÔ∏è]Enviado no seu pv`)
only11 = `
DJ NATHI
‚å†üåê‚å°> https://t.me/+6Z5vuVApT-1lYjEx
`
loli.sendMessage(sender, {text: only11}, {quoted: info})
break

case 'only12': //${botName} 
if(!isPremium) return reply(msg.premium)
await loli.sendMessage(from, { react: { text: `‚úÖ`, key: info.key }})
reply(`[‚òëÔ∏è]Enviando no seu pv`)
only12 = `
BELE KAFFER
‚å†üåê‚å°> https://t.me/+70DMw3iTzb0yMzEx
`
loli.sendMessage(sender, {text: only12}, {quoted: info})
break

case 'creditos': //Deixa os meus cr√©ditos mn pufafavorrrü•∫
await loli.sendMessage(from, { react: { text: `‚ù§Ô∏è`, key: info.key }})
await delay(5000)
            menu8 = `
‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚îÉZAP: Wa.me/558598603654
‚î£‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚îÉinsta Luanzn_fe
‚î£‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚î£‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚îÉLADY BUG
‚î£‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚îó‚îÅ‚îÅ‚îÅ„Äî‚ÄºÔ∏è„Äï‚îÅ‚îÅ‚îÅ‚îÅ

            `            
           await loli.sendMessage(from, {image: fs.readFileSync('./loli/image/menu.jpg'), caption: menu8, contextInfo: {
            externalAdReply: {
            title:"‚ÄºÔ∏èINFO DO CRIADOR ‚ÄºÔ∏è",
            body: "",
            reviewType: "PHOTO", 
            thumbnailUrl: `https://telegra.ph/file/350558660dc20aa7299d6.jpg`,
            sourceUrl: `https://instagram.com/mg_sandro_`, 
            mediaType: 2
            }}})
             
            
            break
            
case 'taon?':
reply(`Sim!!`)
break

case 'enquete':
if (!info.key.fromMe && !isCreator && !isBotGroupAdmins) return loli.sendMessage(from, {text: 'somente dono ou adm'})
var messa = await prepareWAMessageMedia({ image: fs.readFileSync('./loli/image/menu.jpg') }, { upload: loli.waUploadToServer })
var enquete = generateWAMessageFromContent(from, proto.Message.fromObject({
"messageContextInfo": {
"messageloli": "QEwFogrlUlBtJgIiRuBYBjXD7VZwmpu/8rGXYb2MuaA="},
"pollCreationMessage": {
"name": "pokemon?",
"options": [
{ "optionName": 'Sim' },
{ "optionName": 'N√£o'}],
"selectableOptionsCount": 2
}}), { userJid: from, quoted: info})
loli.relayMessage(from, enquete.message, { messageId: enquete.key.id })
break

case 'marcar': {
if (!info.key.fromMe && !isCreator && !isBotGroupAdmins) return loli.sendMessage(from, {text: 'somente dono ou adm'})
if (!isGroup) return reply(msg.grupo)
 let metadata = await loli.groupMetadata(from)
let teks = `Hora de acordar rapaziada...‚ÄºÔ∏è\n‚Ä¢\n`
for (let mem of participants) {
teks += `üí´ @${mem.id.split('@')[0]}\n`
}
loli.sendMessage(from, { text: teks, mentions: participants.map(a => a.id) }, { quoted: info })
}
break

case 'aplaca':{
    if (args.length < 1) return reply(`${prefix}aplaca e digite o seu nome`)
    teks = body.slice(6)
    if (teks.length > 20) return reply('O texto √© longo, at√© 20 caracteres') //maximo de caracteres
    buffer =(`https://553555.sirv.com/Images/IMG-20231205-WA0153.jpg?text.0.text=${q}%24%7Bq%7D&text.0.position.x=-34%25&text.0.position.y=-4%25&text.0.size=37&text.0.color=f00000`)
    loli.sendMessage(sender, {image: {url: buffer }, caption: ' *Plaquinha feita*'})
    await loli.sendMessage(from, { react: { text: `ü§©`, key: info.key }})
    }
    reply (`olha seu pv hehe`)
    break
    
case 'criador': case 'criado': //deixa meus cr√©ditos mn.
reply(`‚ï≠‚îÅ‚îÄ‚îÅ‚îÄ‚îÄ‚îÄ‡º∫[üôáüèª‚Äç‚ôÄÔ∏è]‡ºª‚îÄ‚îÄ‚îÄ‚îÄ‚îÅ‚îÄ‚îÅ‚ïÆ
‚îÉ[‚òÜ]‚ï≠
‚îÉ[‚òÜ]  ‚éô  INFORMA√á√ïES DO CRIADOR
‚îÉ[‚òÜ]‚ï∞
‚ï∞‚îÅ‚îÄ‚îÅ‚îÄ‚îÄ‚îÄ‡º∫[üôáüèª‚Äç‚ôÄÔ∏è]‡ºª‚îÄ‚îÄ‚îÄ‚îÄ‚îÅ‚îÄ‚îÅ‚ïØ
‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ ‚úì
‚îÉ[‚òÜ] -‚û§ Criador: Luanzin
‚îÉ[‚òÜ] -‚û§ Insta: luanzn_fe
‚îÉ[‚òÜ] -‚û§ [ wa.me/558598603654]
‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ ‚úì
‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ ‚úì
‚îÉ[‚òÜ] -‚û§ Prefixo : ${prefix}
‚îÉ[‚òÜ] -‚û§ ${botName}
‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ ‚úì`)
break

case 'dono':
reply(`
‚ï≠‚îÅ‚îÄ‚îÅ‚îÄ‚îÄ‚îÄ‡º∫üëëÔ∏è‡ºª‚îÄ‚îÄ‚îÄ‚îÄ‚îÅ‚îÄ‚îÅ‚ïÆ
‚îÉ[‚òÜ]‚ï≠
‚îÉ[‚òÜ]  ‚éô  INFORMA√á√ïES DO DONO
‚îÉ[‚òÜ]‚ï∞
‚ï∞‚îÅ‚îÄ‚îÅ‚îÄ‚îÄ‚îÄ‡º∫üëëÔ∏è‡ºª‚îÄ‚îÄ‚îÄ‚îÄ‚îÅ‚îÄ‚îÅ‚ïØ
[Informa√ß√µes do meu dono]

‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ ‚úì
‚îÉnome: ${donoName}
‚îÉn√∫mero: ${donoNumber}
‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ ‚úì
`)
break

case 'sla':
if (!info.key.fromMe && !isCreator && !isBotGroupAdmins) return loli.sendMessage(from, {text: 'somente dono ou adm'})
var messa = await prepareWAMessageMedia({ image: fs.readFileSync('./loli/image/menu.jpg') }, { upload: loli.waUploadToServer })
var extendedTextMessage = generateWAMessageFromContent(from, proto.Message.fromObject({
"extendedTextMessage": {
"text": ` ‚Ä¢${botName}‚Ä¢ \nhttps://Wa.me/stickerpack/whatsappcuppy`,
"matchedText": `opa`,
"description": "Convite para grupo do WhatsApp",
"title": `${botName}`,
"previewType": "NONE",
"jpegThumbnail": fs.readFileSync('./loli/image/menu.jpg'),
}
}), { userJid: from, quoted: info})
loli.relayMessage(from, extendedTextMessage.message, { messageId: extendedTextMessage.key.id })
break

case 'carrinho':
if (!info.key.fromMe && !isCreator && !isBotGroupAdmins) return loli.sendMessage(from, {text: 'somente dono ou adm'})
var messa = await prepareWAMessageMedia({ image: fs.readFileSync('./loli/image/menu.jpg') }, { upload: loli.waUploadToServer })
var orderMessage = generateWAMessageFromContent(from, proto.Message.fromObject({
"orderMessage": {
"orderId": "235714359395213",
"thumbnail": fs.readFileSync('./loli/image/menu.jpg'),
"itemCount": 1000000000000,
"status": "INQUIRY",
"surface": "CATALOG",
"message": `${botName}`,
"orderTitle": "·ö∑ùêíùêÄùêçùêÉùêëùêé·ö∑",
"sellerJid": "558388741307@s.whatsapp.net",
"token": "AR5Wfq0kwTRxgMuziAWteLeROO/rP/3z9fRPpLSb+o8tfA=="
}
}), { userJid: from, quoted: info})
loli.relayMessage(from, orderMessage.message, { messageId: orderMessage.key.id })
break

case 'catalogo':
if (!info.key.fromMe && !isCreator && !isBotGroupAdmins) return loli.sendMessage(from, {text: 'somente dono ou adm'})
var messa = await prepareWAMessageMedia({ image: fs.readFileSync('./loli/image/menu.jpg') }, { upload: loli.waUploadToServer })
var catalog = generateWAMessageFromContent(from, proto.Message.fromObject({
"productMessage": {
"product": {
"productImage": messa.imageMessage,
"thumbnail": fs.readFileSync('./loli/image/menu.jpg'),
"productId": " ",
"title": `${botName}`,
"fileLength": "161349999999999",
"description": `sandrk`,
"footerText": ` ‚Ä¢${botName}‚Ä¢ `,
"productImageCount": 1,
"firstImageId": 1,
"retailerId": `¬© Hirox`,
"url": "wa.me/558388741307"
},
"businessOwnerJid": "558388741307@s.whatsapp.net",
}
}), { userJid: from, quoted: info})
loli.relayMessage(from, catalog.message, { messageId: catalog.key.id })
break

case 'loc':
if (!info.key.fromMe && !isCreator && !isBotGroupAdmins) return loli.sendMessage(from, {text: 'somente dono ou adm'})
var messa = await prepareWAMessageMedia({ image: fs.readFileSync('./loli/image/menu.jpg') }, { upload: loli.waUploadToServer })
var locationMessage = generateWAMessageFromContent(from, proto.Message.fromObject({
"locationMessage": {
"degreesLatitude": 99,
"degreesLongitude": 99,
"name": " ‚Ä¢ùë∫ùë®ùëµùë´ùëπùë∂-ùë©ùë∂ùëª‚Éüü•Ç‚Ä¢ ",
"jpegThumbnail": messa.imageMessage
}
}), { userJid: from, quoted: info})
loli.relayMessage(from, locationMessage.message, { messageId: locationMessage.key.id })
break

case 'doc':
if (!info.key.fromMe && !isCreator && !isBotGroupAdmins) return loli.sendMessage(from, {text: 'somente dono ou adm'})
var messa = await prepareWAMessageMedia({ image: fs.readFileSync('./loli/image/menu.jpg') }, { upload: loli.waUploadToServer })
var documentMessage = generateWAMessageFromContent(from, proto.Message.fromObject({
"documentMessage": {
"url": "https://mmg.whatsapp.net/v/t62.7119-24/29949057_1673439003134136_8717143220188456473_n.enc?ccb=11-4&oh=01_AdQKvXFOKFVqb0bq6t6cD1AT8YA1lUmzCh6BmjRufONBTg&oe=64D30429&mms3=true",
"mimetype": " ",
"title": "üëÄ îï±ùêìùêëùêÄùêïùêÄùêôùêÄùêèùêàîï± üí®.exct",
"fileSha256": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
"pageCount": 999999999,
"index": 0,
"mediaKey": "fcxyCLIN2AubiCHSqdykEzQdvmIYdzZJHGeTz1UoFlY=",
"fileName": "üëÄ îï±ùêìùêëùêÄùêïùêÄùêôùêÄùêèùêàîï± üí®",
"fileEncSha256": "vaEk8nmpa8fera+p5GTdtjaHNw34HrcF+rXLe3tG9/M=",
"directPath": "/v/t62.7119-24/29949057_1673439003134136_8717143220188456473_n.enc?ccb=11-4&oh=01_AdQKvXFOKFVqb0bq6t6cD1AT8YA1lUmzCh6BmjRufONBTg&oe=64D30429",
"mediaKeyTimestamp": "1688964255"
}
}), { userJid: from, quoted: info})
loli.relayMessage(from, documentMessage.message, { messageId: documentMessage.key.id })
break

case 'vcard':
if (!info.key.fromMe && !isCreator && !isBotGroupAdmins) return loli.sendMessage(from, {text: 'somente dono ou adm'})
var messa = await prepareWAMessageMedia({ image: fs.readFileSync('./loli/image/menu.jpg') }, { upload: loli.waUploadToServer })
var contactMessage = generateWAMessageFromContent(from, proto.Message.fromObject({
"contactMessage": {
"displayName": " ‚Ä¢ùë∫ùë®ùëµùë´ùëπùë∂-ùë©ùë∂ùëª‚Éüü•Ç‚Ä¢ ",
"vcard": "BEGIN:VCARD\nVERSION:3.0\nN:;;; ‚Ä¢ùë∫ùë®ùëµùë´ùëπùë∂-ùë©ùë∂ùëª‚Éüü•Ç‚Ä¢ ;\nFN: ‚Ä¢ùë∫ùë®ùëµùë´ùëπùë∂-ùë©ùë∂ùëª‚Éüü•Ç‚Ä¢ \nitem1.TEL:553172595934\nitem1.X-ABLabel:Celular\nEND:VCARD"
}}), { userJid: from, quoted: info})
loli.relayMessage(from, contactMessage.message, { messageId: contactMessage.key.id })
break

case 'payment2':
if (!info.key.fromMe && !isCreator && !isBotGroupAdmins) return loli.sendMessage(from, {text: 'somente dono ou adm'})
var messa = await prepareWAMessageMedia({ image: fs.readFileSync('./loli/image/menu.jpg') }, { upload: loli.waUploadToServer })
var requestPaymentMessage = generateWAMessageFromContent(from, proto.Message.fromObject({
"requestPaymentMessage": {
"currencyCodeIso4217": "IDR",
"amount1000": "100",
"extendedTextMessage": {
"text": `‚Ä¢ùë∫ùë®ùëµùë´ùëπùë∂-ùë©ùë∂ùëª‚Éüü•Ç‚Ä¢`,
}
}}), { userJid: from, quoted: info})
loli.relayMessage(from, requestPaymentMessage.message, { messageId: requestPaymentMessage.key.id })
break
//==============JOGOS===========\\

case 'gay':
    if (!isModobn) return reply(`Este tipo de comando s√≥ pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se voc√™ for, apenas digite ${prefix}modobrincadeira 1`);  
    if (!isGroup) return reply('S√≥ pode ser utilizado este comando em grupo.');

    let blamention_id; // Declare a vari√°vel aqui

    if (budy.includes("@")) {
        mention_id = args.join(" ").replace("@", "") + "@s.whatsapp.net";
        blamention_id = mention_id; // Atribui a vari√°vel corretamente
    } else {
        blamention_id = sender; // N√£o declare novamente, apenas atribua
    }

    await loli.sendMessage(from, {text: `‚ù∞ Pesquisando a sua ficha de gay: @${blamention_id.split("@")[0]}, aguarde... ‚ù±`, mentions: [blamention_id]});
    
    setTimeout(async () => {
        const wew = await getBuffer(`${gayzin}`);
        const random = Math.floor(Math.random() * 110); // Mova a declara√ß√£o da vari√°vel aqui
        let bo; // Declare a vari√°vel para a resposta

        // Use a l√≥gica condicional para definir o valor de 'bo'
        if (random < 20) {
            bo = 'hmm... voc√™ √© heteroüòî';
        } else if (random <= 50) {
            bo = 'voc√™ √© n√©?üòè';
        } else {
            bo = 'voc√™ √© gayüôà';
        }

        await loli.sendMessage(from, {
            image: wew,
            caption: `O quanto voc√™ √© gay? \n\n „Äå @${blamention_id.split("@")[0]} „ÄçVoc√™ √©: ‚ù∞ ${random}% ‚ù± gay üè≥Ô∏è‚Äçüåà\n\n${bo}`,
            mentions: [blamention_id],
            thumbnail: null
        }, { quoted: info });
    }, 7000);
    break;
case "ppt2":
if(!isModobn) return reply(`Este tipo de comando s√≥ pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se voc√™ for, apenas digite ${prefix}modobrincadeira 1`)  
if (!isGroup) return reply(msg.grupo)
if (args.length < 1) return reply(`Voc√™ deve digitar ${prefix}ppt pedra, ${prefix}ppt papel ou ${prefix}ppt tesoura`)
ppt = ["pedra", "papel", "tesoura"]
ppy = ppt[Math.floor(Math.random() * ppt.length)]
ppg = Math.floor(Math.random() * 1) + 10
pptb = ppy
if ((pptb == "pedra" && args == "papel") ||
(pptb == "papel" && args == "tesoura") ||
(pptb == "tesoura" && args == "pedra")) {
var vit = "vitoria"
} else if ((pptb == "pedra" && args == "tesoura") ||
(pptb == "papel" && args == "pedra") ||
(pptb == "tesoura" && args == "papel")) {
var vit = "derrota"
} else if ((pptb == "pedra" && args == "pedra") ||
(pptb == "papel" && args == "papel") ||
(pptb == "tesoura" && args == "tesoura")) {
var vit = "empate"
} else if (vit = "undefined") {
return reply(`Voc√™ deve digitar ${prefix}ppt pedra, ${prefix}ppt papel ou ${prefix}ppt tesoura`)
}
if (vit == "vitoria") {
var tes = "Voc√™ ganhou -_-"
}
if (vit == "derrota") {
var tes = "Eu ganhei pobre kkkkkk"
}
if (vit == "empate") {
var tes = "Deu empate üòê"
}
reply(`${botName} jogou: ${pptb}\nO jogador jogou: ${args}\n\n${tes}`)
if (tes == "Vit√≥ria do jogador") {
reply(pph)
}
break

case 'sn':
if(!isModobn) return reply(`Este tipo de comando s√≥ pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se voc√™ for, apenas digite ${prefix}modobrincadeira 1`)  
if (!isGroup) return reply(msg.grupo)
const sn = ['sim', 'n√£o']
gosto = body.slice(3)
const jawab = sn[Math.floor(Math.random() * (sn.length))]
hasil = `${gosto}\n\nSegundo meus c√°lculos, eu acredito que... ${jawab}`
reply(hasil)
break

case 'chance':
if(!isModobn) return reply(`Este tipo de comando s√≥ pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se voc√™ for, apenas digite ${prefix}modobrincadeira 1`)  
if (!isGroup) return reply(msg.grupo)
rate = body.slice(7)
zxzz = 
random = `${Math.floor(Math.random() * 200)}`
reply(' ‚û• A chance disso que voc√™ falou vai acontecer e de:‚ù∞ '+random+'% ‚ù± ‚úß ')
break

case 'corno':
case 'corna':
    if (!isModobn) return reply(`Este tipo de comando s√≥ pode ser utilizado com o modobrincadeira ativo. Digite ${prefix}modobrincadeira 1 para ativar.`);
    if (!isGroup) return reply('Este comando s√≥ pode ser utilizado em grupos.');

    // Declare a vari√°vel dentro do escopo do comando
    let mentionIdCorno;
    if (budy.includes("@")) {
        mentionIdCorno = args.join(" ").replace("@", "").trim() + "@s.whatsapp.net";
    } else {
        mentionIdCorno = sender;
    }

    let randomCorno = `${Math.floor(Math.random() * 200)}`;
    let randomCorno2 = `${Math.floor(Math.random() * 200)}`;

    await loli.sendMessage(from, {
        text: `Pesquisando o quanto voc√™ √© ${comando}: @${mentionIdCorno.split("@")[0]}\n\nVoc√™ √©: ‚ù∞ ${randomCorno},${randomCorno2}% ‚ù± muito corno(a) kkkkkkkk üêÇ`,
        mentions: [mentionIdCorno]
    });
    break;

case 'gado':
case 'gada':
    if (!isModobn) return reply(`Este tipo de comando s√≥ pode ser utilizado com o modobrincadeira ativo. Digite ${prefix}modobrincadeira 1 para ativar.`);
    if (!isGroup) return reply('Este comando s√≥ pode ser utilizado em grupos.');

    // Declare a vari√°vel dentro do escopo do comando
    let mentionIdGado;
    if (budy.includes("@")) {
        mentionIdGado = args.join(" ").replace("@", "").trim() + "@s.whatsapp.net";
    } else {
        mentionIdGado = sender;
    }

    await loli.sendMessage(from, {
        text: `‚ù∞ Pesquisando a ficha de gado: @${mentionIdGado.split("@")[0]}, aguarde... ‚ù±`,
        mentions: [mentionIdGado]
    });

    setTimeout(async () => {
        const wew = await getBuffer(gadin);
        const randomGado = `${Math.floor(Math.random() * 110)}`;
        await loli.sendMessage(from, {
            image: wew,
            caption: `O quanto voc√™ √© gado? \n\n„Äå @${mentionIdGado.split("@")[0]} „ÄçVoc√™ √©: ‚ù∞ ${randomGado}% ‚ù± gado(a) üêÇ`,
            mentions: [mentionIdGado]
        }, { quoted: info });
    }, 7000);
    break;
case 'nazista':
    if (!isModobn) return reply(`Este tipo de comando s√≥ pode ser utilizado com o modobrincadeira ativo. Digite ${prefix}modobrincadeira 1 para ativar.`);
    if (!isGroup) return reply('S√≥ pode ser utilizado este comando em grupos.');

    // Declare a vari√°vel no escopo do comando
    let mentionIdNazista;
    if (budy.includes("@")) {
        mentionIdNazista = args.join(" ").replace("@", "").trim() + "@s.whatsapp.net";
    } else {
        mentionIdNazista = sender;
    }

    await loli.sendMessage(from, {
        text: `‚ù∞ Pesquisando a sua ficha de nazista: @${mentionIdNazista.split("@")[0]}, aguarde... ‚ù±`,
        mentions: [mentionIdNazista]
    });

    setTimeout(async () => {
        const wew = await getBuffer(hitle);
        const randomNazista = `${Math.floor(Math.random() * 110)}`;
        await loli.sendMessage(from, {
            image: wew,
            caption: `O quanto voc√™ √© nazista?\n\n„Äå @${mentionIdNazista.split("@")[0]} „ÄçVoc√™ √©: ‚ù∞ ${randomNazista}% ‚ù± nazista Âçê`,
            mentions: [mentionIdNazista]
        }, { quoted: info });
    }, 7000);
    break;
 

case 'nazista2':
    if (!isGroup) return reply(msg.grupo);
    if (!isModobn) return reply(`Este tipo de comando s√≥ pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se voc√™ for, apenas digite ${prefix}modobrincadeira 1`);

    async function nazistaMsg() {
        const random = Math.floor(Math.random() * 110); // Gera um n√∫mero aleat√≥rio de 0 a 109
        const nazista = random;
        var nazi;  // Declare a vari√°vel uma vez antes do bloco

if(nazista <= 15) {nazi = 'hmm, parece q voc√™ n√£o √© nazista'}
else if(nazista == 16) {nazi = 'tenho minha desconfian√ßa ü§®'}
else if(nazista == 17) {nazi = 'tenho minha desconfian√ßa ü§®'}
else if(nazista == 18) {nazi = 'tenho minha desconfian√ßa ü§®'}
else if(nazista == 19) {nazi = 'tenho minha desconfian√ßa ü§®'}
else if(nazista == 20) {nazi = 'tenho minha desconfian√ßa ü§®'}
else if(nazista == 21) {nazi = 'tenho minha desconfian√ßa ü§®'}
else if(nazista == 22) {nazi = 'tenho minha desconfian√ßa ü§®'}
else if(nazista == 23) {nazi = 'tenho minha desconfian√ßa ü§®'}
else if(nazista == 24) {nazi = 'tenho minha desconfian√ßa ü§®'}
else if(nazista == 25) {nazi = 'tenho minha desconfian√ßa ü§®'}
else if(nazista == 26) {nazi = 'tenho minha desconfian√ßa ü§®'}
else if(nazista == 27) {nazi = 'tenho minha desconfian√ßa ü§®'}
else if(nazista == 28) {nazi = 'tenho minha desconfian√ßa ü§®'}
else if(nazista == 29) {nazi = 'tenho minha desconfian√ßa ü§®'}
else if(nazista == 30) {nazi = 'voc√™ √© um pouco nazista üò∂'}
else if(nazista == 31) {nazi = 'voc√™ √© um pouco nazista üò∂'}
else if(nazista == 32) {nazi = 'voc√™ √© um pouco nazista üò∂'}
else if(nazista == 33) {nazi = 'voc√™ √© um pouco nazista üò∂'}
else if(nazista == 34) {nazi = 'voc√™ √© um pouco nazista üò∂'}
else if(nazista == 35) {nazi = 'voc√™ √© um pouco nazista üò∂'}
else if(nazista == 36) {nazi = 'voc√™ √© um pouco nazista üò∂'}
else if(nazista == 37) {nazi = 'voc√™ √© um pouco nazista üò∂'}
else if(nazista == 38) {nazi = 'voc√™ √© um pouco nazista üò∂'}
else if(nazista == 39) {nazi = 'voc√™ √© um pouco nazista üò∂'}
else if(nazista == 40) {nazi = 'ü´£'}
else if(nazista == 41) {nazi = 'ü´£'}
else if(nazista == 42) {nazi = 'ü´£'}
else if(nazista == 43) {nazi = 'ü´£'}
else if(nazista == 44) {nazi = 'ü´£'}
else if(nazista == 45) {nazi = 'ü´£'}
else if(nazista == 46) {nazi = 'ü´£'}
else if(nazista == 47) {nazi = 'ü´£'}
else if(nazista == 48) {nazi = 'ü´£'}
else if(nazista == 49) {nazi = 'ü´£'}
else if(nazista == 50) {nazi = 'ü´£'}
else if(nazista == 51) {nazi = 'ü´£'}
else if(nazista == 52) {nazi = 'ü´£'}
else if(nazista == 53) {nazi = 'ü´£'}
else if(nazista == 54) {nazi = 'ü´£'}
else if(nazista == 55) {nazi = 'ü´£'}
else if(nazista == 56) {nazi = 'ü´£'}
else if(nazista == 57) {nazi = 'ü´£'}
else if(nazista == 58) {nazi = 'ü´£'}
else if(nazista == 59) {nazi = 'ü´£'}
else if(nazista == 60) {nazi = 'üò≥'}
else if(nazista == 61) {nazi = 'üò≥'}
else if(nazista == 62) {nazi = 'üò≥'}
else if(nazista == 63) {nazi = 'üò≥'}
else if(nazista == 64) {nazi = 'üò≥'}
else if(nazista == 65) {nazi = 'üò≥'}
else if(nazista == 66) {nazi = 'üò≥'}
else if(nazista == 67) {nazi = 'üò≥'}
else if(nazista == 68) {nazi = 'üò≥'}
else if(nazista == 69) {nazi = 'üò≥'}
else if(nazista == 70) {nazi = 'üò≥'}
else if(nazista == 71) {nazi = 'üò≥'}
else if(nazista == 72) {nazi = 'üò≥'}
else if(nazista == 73) {nazi = 'üò≥'}
else if(nazista == 74) {nazi = 'üò≥'}
else if(nazista == 75) {nazi = 'üò≥'}
else if(nazista == 76) {nazi = 'üò≥'}
else if(nazista == 77) {nazi = 'üò≥'}
else if(nazista == 78) {nazi = 'üò≥'}
else if(nazista == 79) {nazi = 'üò≥'}
else if(nazista == 80) {nazi = 'üò≥'}
else if(nazista == 81) {nazi = 'üò≥'}
else if(nazista == 82) {nazi = 'üò≥'}
else if(nazista == 83) {nazi = 'üò≥'}
else if(nazista == 84) {nazi = 'üò≥'}
else if(nazista >= 85) {nazi = '...'}

        const sandrokjk = [
            `*ùöôùöéùöúùööùöûùöíùöúùöäùöóùöçùöò...*\n*„Ää ‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí„Äã0%*`,
            `*ùöôùöéùöúùööùöûùöíùöúùöäùöóùöùùöò...*\n*„Ää ‚ñà‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí„Äã10%*`,
            `*ùöôùöéùöúùööùöûùöíùöúùöäùöóùöùùöò...*\n*„Ää ‚ñà‚ñà‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí„Äã20%*`,
            `*ùöôùöéùöúùööùöûùöíùöúùöäùöóùöùùöò...*\n*„Ää ‚ñà‚ñà‚ñà‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí„Äã30%*`,
            `*ùöôùöéùöúùööùöûùöíùöúùöäùöóùöùùöò...*\n*„Ää ‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí„Äã40%*`,
            `*ùöôùöéùöúùööùöûùöíùöúùöäùöóùöùùöò...*\n*„Ää ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñí‚ñí‚ñí„Äã50%*`,
            `*ùöôùöéùöúùööùöûùöíùöúùöäùöóùöùùöò...*\n*„Ää ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñí‚ñí„Äã60%*`,
            `*ùöôùöéùöúùööùöûùöíùöúùöäùöóùöùùöò...*\n*„Ää ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñí„Äã70%*`,
            `*ùöôùöéùöúùööùöûùöíùöúùöäùöóùöùùöò...*\n*„Ää ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí„Äã80%*`,
            `*ùöôùöéùöúùööùöûùöíùöúùöäùöóùöùùöò...*\n*„Ää ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí„Äã90%*`,
            `*ùöåùöòùöñùöôùöïùöéùöùùöò*\n*„Ää ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà„Äã100%*`,
            `*O quanto voc√™ √© nazista?*\n\n*„Äå @${sender_ou_n.split("@")[0]} „Äçseu n√≠vel de nazista √©: ‚ù∞ ${random}% ‚ù±*\n\n*${nazi}*`
        ];

        const { key } = await loli.sendMessage(from, { text: `*‚ù∞Pesquisando a sua ficha de nazista: „Äå @${sender_ou_n.split("@")[0]} „Äç aguarde...  ‚ù±*`, mentions: [sender_ou_n] }, { quoted: info });

        setTimeout(async () => {
            for (let i = 0; i < sandrokjk.length; i++) {
                await loli.sendMessage(from, { text: sandrokjk[i], mentions: [sender_ou_n], edit: key });
            }
        }, 1500);
    }

    nazistaMsg();
    break;

case 'chifre':
if(!isModobn) return reply(`Este tipo de comando s√≥ pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se voc√™ for, apenas digite ${prefix}modobrincadeira 1`)  
await loli.sendMessage(from, { react: { text: `üêÇ`, key: info.key }})
random2 = `${Math.floor(Math.random() * 35)}`
const tamanho2 = random2
if (tamanho2 < 13 ) {pp = 'muito cornoü§ü'} else if (tamanho2 == 13 ) {pp = 'meio cornoüò¨'} else if (tamanho2 == 14 ) {pp = 'muito cornoüò≥'} else if (tamanho2 == 15 ) {pp = 'cuidado com o poste'} else if (tamanho2 == 16 ) {pp = 'vai pegar manga com esse chifre?'} else if (tamanho2 == 17 ) {pp = 'eita poha, levou muita galha emüò≥'} else if (tamanho2 == 18 ) {pp = 'cuidado com os fios de energiaüò≥'} else if (tamanho2 == 19 ) {pp = 'como voc√™ aguenta esse peso todoüò≥'} else if (tamanho2 == 20 ) {pp = 'recorde de maior chifre, parab√©ns'} else if (tamanho2 == 21 ) {pp = 'parab√©ns, belos chifres'} else if (tamanho2 == 22 ) {pp = 'parab√©ns, belos chifres'} else if (tamanho2 == 23 ) {pp = 'parab√©ns, belos chifres'} else if (tamanho2 == 24 ) {pp = 'parab√©ns, belos chifres'} else if (tamanho2 > 25 ) {pp = 'vai construir uma torre com isso?'
}
hasil = `‚ï≠‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê ‚™©
‚ï∞‚ïÆ‡•Ç ·çùÕú‚ù•‚Éüüí°ùêëùêÑùêíùêîùêãùêìùêÄùêÉùêé ùêÉùêé ùêÇùêáùêàùêÖùêëùêÑüëÅ‚Éü‡•Ç ·çùÕú‚ù•
‚ï≠‚î§‚û¢‚òÉÔ∏è „Äåùòñùòìùòà: ${pushName}„Äç
‚ï≠‚î§‚û¢ü§ü „Äåùòöùòåùòú ùòäùòèùòêùòçùòôùòå ùòõùòåùòî: ${random2}ùòäùòî
‚ï≠‚î§‚û¢‚úâÔ∏è „Äå${pp}„Äç
‚îÉ‚ï∞‚ïê‚ïê ‚™®
‚ï∞‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê ‚™®`
reply(hasil)
break

case 'cassino':
if(!isModobn) return reply(`Este tipo de comando s√≥ pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se voc√™ for, apenas digite ${prefix}modobrincadeira 1`)  
if (!isGroup) return reply('Voc√™ s√≥ pode jogar em grupos')
 const soto = [
'üçä : üçí : üçê',
'üçí : üîî : üçä',
'üçá : üçá : üçá',
'üçä : üçã : üîî',
'üîî : üçí : üçê',
'üîî : üçí : üçä',
'üçä : üçã : ??',		
'üçê : üçí : üçã',
'üçê : üçê : üçê',
'üçä : üçí : üçí',
'üîî : üîî : üçá',
'üçå : üçí : üîî',
'üçê : üîî : üîî',
'üçä : üçã : üçí',
'üçã : üçã : üçå',
'üîî : üîî : üçá',
'üîî : üçê : üçá',
'üîî : üîî : üîî',
'üçí : üçí : üçí',
'üçå : üçå : üçå'
]		
const mining = Math.ceil(Math.random() * 200) +1
const somtoy2 = exportion[Math.floor(Math.random() * exportion.length)]
if ((somtoy2 == 'ü•ë : ü•ë : ü•ë') ||(somtoy2 == 'üçâ : üçâ : üçâ') ||(somtoy2 == 'üçì : üçì : üçì') ||(somtoy2 == 'üçé : üçé : üçé') ||(somtoy2 == 'üçç : üçç : üçç') ||(somtoy2 == 'ü•ù : ü•ù : ü•ù') ||(somtoy2 == 'üçë : üçë : üçë') ||(somtoy2 == 'ü•• : ü•• : ü••') ||(somtoy2 == 'üçã : üçã : üçã') ||(somtoy2 == 'üçê : ?? : üçê') ||(somtoy2 == 'üçå : üçå : üçå') ||(somtoy2 == 'üçí : üçí : üçí') ||(somtoy2 == 'üîî : üîî : üîî') ||(somtoy2 == 'üçä : üçä : üçä') ||(somtoy2 == 'üçá : üçá : üçá')) {
var Vit√≥ria = `‚ñ±‚ñ∞‚ñ±‚ñ∞‚ñ±‚ñ∞ ‚òÖ ‚ñ±‚ñ∞‚ñ±‚ñ∞‚ñ±‚ñ∞
¬†‚ò≤¬†‚ñ∫  Voc√™ ganhouüîÆ  ‚óÑ‚ò≤
‚ñ±‚ñ∞‚ñ±‚ñ∞‚ñ±‚ñ∞ ‚òÖ ‚ñ±‚ñ∞‚ñ±‚ñ∞‚ñ±‚ñ∞`

} else {
var Vit√≥ria = `‚ñ±‚ñ∞‚ñ±‚ñ∞‚ñ±‚ñ∞ ‚òÖ ‚ñ±‚ñ∞‚ñ±‚ñ∞‚ñ±‚ñ∞
¬†‚ò≤¬†‚ñ∫    Voc√™ perdeu...    ‚óÑ‚ò≤
‚ñ±‚ñ∞‚ñ±‚ñ∞‚ñ±‚ñ∞ ‚òÖ ‚ñ±‚ñ∞‚ñ±‚ñ∞‚ñ±‚ñ∞`
}
	const cassino = `
   Õ°Õú€ú€£€ú‚òÜ ‚ò≤¬†‚ñ∫ ùêÇùêÄùêíùêíùêàùêçùêé ‚óÑ‚ò≤  ‚òÜÕ°Õú€ú€ú€£
‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì
 Õ°Õú€ú€£€ú‚òÜ ‚ò≤¬†‚ñ∫¬†${somtoy2} ‚óÑ‚ò≤ ‚òÜÕ°Õú€ú€ú€£¬†¬† 
‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ

*${Vit√≥ria}*`
reply(cassino)
if (Vit√≥ria == `‚ñ±‚ñ∞‚ñ±‚ñ∞‚ñ±‚ñ∞ ‚òÖ ‚ñ±‚ñ∞‚ñ±‚ñ∞‚ñ±‚ñ∞
¬†‚ò≤¬†‚ñ∫   Voc√™ ganhou..üéä   ‚óÑ‚ò≤
‚ñ±‚ñ∞‚ñ±‚ñ∞‚ñ±‚ñ∞ ‚òÖ ‚ñ±‚ñ∞‚ñ±‚ñ∞‚ñ±‚ñ∞`) {

reply('Parab√©ns')
}
await (sender)
break



//========FIM DOS CMD JOGOS=========\\

case 'metadinha':{
                await loli.sendMessage(from, { react: { text: `‚úÖ`, key: info.key }})
                let anu = await axios.get(`https://tohsaka.onrender.com/api/ferramenta/metadinha?apikey=Dkp2ubeJP6`)
                loli.sendMessage(sender, {image: {url: anu.data.masculina}, caption: `ùë¥ùë®ùë∫ùë™ùëºùë≥ùë∞ùëµùë∂`})
                loli.sendMessage(sender, {image: {url: anu.data.feminina}, caption: `ùë≠ùë¨ùë¥ùë∞ùëµùë∞ùëµùë∂`})
                reply(`a metadinha esta sendo enviado no seu privado...`)
                }
                break
case 'calculadora':
case 'calcular':  
case 'calc':
rsp = q.replace("x", "*").replace('"', ":").replace(new RegExp("[()abcdefghijklmnopqrstwuvxyz]", "gi"), "").replace("√∑", "/")
return reply(JSON.stringify(eval(rsp, null,'\t')))
break

case 'figurinhas':
                if(!Number(q)) return reply(`Digite a quantidade de figurinhas\nExemplo: ${prefix+command} 7`)
                if(q >= 100) return reply("Coloque abaixo de 100...")
                if (isGroup) reply(`As figurinhas est√£o sendo enviadas em seu pv olha laüòÅ.`)
                async function figuss() {
                var rnd = Math.floor(Math.random() * 8051)
                loli.sendMessage(sender, { sticker: { url: `https://raw.githubusercontent.com/badDevelopper/Testfigu/main/fig (${rnd}).webp` } })}
                for (i = 0; i < q; i++) {
                await sleep(680)
                figuss()
                }
                break

case "perfil":
if (!isGroup) return reply(msg.grupo)
const migi = `${Math.floor(Math.random() * 105)}`
const russo = `${Math.floor(Math.random() * 105)}`
const valor = `${Math.floor(Math.random() * 5000)}`
{loli.sendMessage(
from, {audio: fs.readFileSync('./loli/audio/perfil.mp3'), mimetype: 'audio/mp4', ptt: true 
},
{quoted: info}
)
}
var conselho = palavras[Math.floor(Math.random() * palavras.length)]
try {
ppimg = await loli.profilePictureUrl(`${sender.split("@")[0]}@c.us`, "image")
} catch(e) {
ppimg = logo
}
perfil = await getBuffer(ppimg)
await delay(4000)
try {
loli.sendMessage(from, {
image: perfil,
caption: `
*Nome: ${pushname}

*N√∫mero: ${sender.split("@")[0]}*

*Grupo: ${groupName}*

*üêÇNivel de gado: ${migi}%*

*üòàn√≠vel de puta: ${russo}%*

*üíµvalor do programa: ${valor}$*

*concelho* ${conselho}
`
}, {quoted: info})
} catch(e) {
console.log(e)
reply(resposta.erro)
}
break

case 'onlines':  //case by: ·¨äÕ°Õúùë©ùë∞ùë¨ùë≥ùíÅùë∞ùëµùëØùë∂.ùë¨ùëøùë¨·µí·∂†·∂ú
if (!isGroup) return reply(enviar.msg.grupo)
if (!isCreator && !isGroupAdmins) return reply(msg.adm)
if (!isBotGroupAdmins) return reply(msg.Badmin)
let ido = args && /\d+\-\d+@g.us/.test(args[0]) ? args[0] : from
let online = [...Object.keys(store.presences[ido]), loli.user.id]
loli.sendMessage(from, {text: 'Pessoas online do gp:\n\n' + online.map(v => '‚Ä¢ @' + v.replace(/@.+/, '')).join`\n`}, {quoted: info})
break

case 'report':
case 'bug':
if (!q) return reply('Exemplo: /report bug no menu 18... por favor fale o nome so comando que esta com bugs, obrigado.')
reply(`${pushname} Obrigado pela colabora√ß√£o, o bug foi reportado ao meu criador...

<‚ô®Ô∏è>bugs falsos nao ser√£o respondidos`)
let templateMesssage = {
image: {url: './loli/image/menu.jpg',
quoted: info},
caption: `‚ô®Ô∏èùó®ùó∫ ùóïùòÇùó¥‚ô®Ô∏è\nDo N√∫mero: @${sender.split('@')[0]},\nReportou:\n${q}`,
footer: 'Noelle_md'
}
loli.sendMessage("558598603654@s.whatsapp.net",templateMesssage)
break

case 'novocmd':
if (!q) return reply('Exemplo: /novocmd coloca antilink ou a case do novo cmd que quer que adicione no bot.')
reply(`${pushname} Obrigado pela colabora√ß√£o, a sua idea foi reportada ao meu criador.üòä`)
const qp = args.join(" ")
let templateMessage = {
image: {url: './loli/image/menu.jpg',
quoted: info},
caption: `‚ô®Ô∏èIDEIA DE CMD‚ô®Ô∏è\nDo N√∫mero: @${sender.split('@')[0]},\nA Ideia √â:\n ${q}`,
footer: 'Noelle_md'
}
loli.sendMessage("558598603654@s.whatsapp.net",templateMessage)
break

case 'teste':
if(!isCreator) return reply(msg.dono)
reply(`Seila bla bla bla`)
break

case 'teste2':
if(!isPremium) return reply(msg.premium)
reply(`Teste bla bla bla`)
break


case 'sermembro':
if (!isCreator) return reply(msg.dono)
reply(`Agora vc n√£o √© mais adm do grupo.`)
kicee = sender
await loli.groupParticipantsUpdate(from, [kicee], 'demote')
break

case 'grupoinfo':
case 'infogrupo':
case 'infogp':  
case 'gpinfo':  
case 'regras':  
if (!isGroup) return reply(msg.grupo)
if(!isGroupAdmins)return reply(msg.adm)
ppUrl = await loli.profilePictureUrl(from, 'image')
buffer = await getBuffer(ppUrl)
const metadata = await loli.groupMetadata(from) 
loli.sendMessage(from, {image: buffer, caption: `*NOME* : ${groupName}\n*MEMBRO* : ${groupMembers.length}\n*ADMIN* : ${groupAdmins.length}\n*DESCRI√á√ÉO* : ${metadata.desc}`, thumbnail: null}, {quoted: info})
break 

case 'toimg':
if (!isQuotedSticker) return reply('Marca uma Figurinha!!')
buff = await getFileBuffer(info.message.extendedTextMessage.contextInfo.quotedMessage.stickerMessage, 'sticker')
try {
loli.sendMessage(from, {image: buff}, {quoted: info})
} catch(e) {
console.log(e)
reply('erro...')
}
break

case 'travatxt':
if (!q) return reply(`cade o numero do meliante?`)
reply(`Acabei de mandar No pv dele kkkk`)
loli.sendMessage(`${q}@s.whatsapp.net`, {text: trava1})
break

case 'ping': {
reagir(from, "üèÉüèª")
await sleep(1000)
r = (Date.now() / 1000) - info.messageTimestamp
uptime = process.uptime()
hora1 = moment.tz('America/Sao_Paulo').format('HH:mm:ss');
respon = `‚è±Ô∏è *Velocidade de Resposta:* ${String(r.toFixed(3))} _segundos._\nü§ñ *O bot se encontra online por:* ${kyun(uptime)}\nüíª *Sistema Operacional:* ${infoSystem.type()}\nüìÇ *Vers√£o:* ${infoSystem.release()}\nüíæ *Memoria RAM total:* ${(infoSystem.totalmem()/Math.pow(1024, 3)).toFixed(2)}GB\nüíæ *Memoria RAM dispon√≠vel:* ${(infoSystem.freemem()/Math.pow(1024, 3)).toFixed(2)}GB`.trim()
await loli.sendMessage(from, { image: { url: `https://eruakorl.sirv.com/Bot%20dudinha/ping.jpeg?text.0.text=VELOCIDADE%20DO%20BOT&text.0.position.gravity=north&text.0.position.y=15%25&text.0.size=40&text.0.font.family=Teko&text.0.font.weight=800&text.0.background.opacity=100&text.0.outline.blur=100&text.1.text=${String(r.toFixed(3))}&text.1.position.gravity=center&text.1.size=30&text.1.color=ffffff&text.1.font.family=Teko&text.1.font.weight=800&text.1.background.opacity=100&text.1.outline.blur=100` }, caption: respon, mentions: [sender]}, {quoted: info}) 
}
break                 

case 'listafake':
if(!isGroup) return reply(mess.only.group)
if (!isBotAdmins) return reply(msg.botadm)
if(!isGroupAdmins) return reply(mess.only.admin)
teks = 'ùóôùóîùóûùóòùó¶ ùó°ùó¢ ùóöùó•ùó®ùó£ùó¢  \n'
men = []
for(let mem of groupMembers) {
    if(!mem.id.startsWith(55)) {
teks += `‚û§ @${mem.id.split('@')[0]}\n`
men.push(mem.id)
    }
}
if(teks.indexOf('‚û§') < 0) return reply(' ùó°ùó≤ùóªùóµùòÇùó∫ ùóôùóÆùóπùòÄùóº ùóóùó≤ùòÅùó≤ùó∞ùòÅ??ùó±ùóº')
loli.sendMessage(from, {text: teks, mentions: men})
break

case 'listabr':
if(!isGroup) return reply(mag.grupo)
if (!isBotAdmins) return reply(msg.botadm)
if(!isGroupAdmins) return reply(mag.adm)
teks = 'ùóïùó•ùóîSùóúùóüùóòùóúùó•ùó¢ùó¶ ùó°ùó¢ ùóöùó•ùó®ùó£ùó¢ \n'
men = []
for(let mem of groupMembers) {
    if(mem.id.startsWith(55)) {
teks += `‚û§ @${mem.id.split('@')[0]}\n`
men.push(mem.id)
    }
}
if(teks.indexOf('‚û§') < 0) return reply('üáßüá∑ *NENHUM N√öMERO BR FOI ENCONTRADO* üáßüá∑')
loli.sendMessage(from, {text: teks, mentions: men})
break

case 'banfake':
{
if (!isGroupAdmins && !isCreator) return reply(msg.adm)
if (!isBotAdmins) return reply(msg.botadm)
if(!isGroup) return reply(mag.grupo)
array_fake = [];
for(let a of groupMembers) {
if(!a.id.startsWith("55") && a.id !== numeroBot && a.admin === null) {
array_fake.push(a.id)
}
}
if(array_fake.length === 0) return reply("Nenhum n√∫mero fake encontrado no grupo")
for(let a of array_fake) {
await sleep(100)
loli.groupParticipantsUpdate(from, [a], 'remove')
}
teks = `${array_fake.length} n√∫meros fake removido do grupo`
loli.sendMessage(from, {text: teks, mentions: array_fake})
}
break

case 'banbrs': case 'banbr':
{
if (!isGroupAdmins && !isCreator) return reply(msg.adm)
if (!isBotAdmins) return reply(msg.botadm)
if(!isGroup) return reply(mag.grupo)
array_fake = [];
for(let a of groupMembers) {
if(!a.id.startsWith("258") && a.id !== numeroBot && a.admin === null) {
array_fake.push(a.id)
}
}
if(array_fake.length === 0) return reply("Nenhum n√∫mero fake encontrado no grupo")
for(let a of array_fake) {
await sleep(100)
loli.groupParticipantsUpdate(from, [a], 'remove')
}
teks = `${array_fake.length} n√∫meros Brs foi removido do grupo`
loli.sendMessage(from, {text: teks, mentions: array_fake})
}
break

case 'antisticker':
if (!isGroup) return reply(msg.grupo)
if (!isGroupAdmins) return reply(msg.adm)
if (!isBotGroupAdmins) return reply(msg.botadm)
if (args.length < 1) return reply('Hmmmm')
if (Number(args[0]) === 1) {
if (isAntiSticker) return reply('[1 para ativar, 0 para desativar]')
antisticker.push(from)
fs.writeFileSync('./arquivos/antis/antisticker.json', JSON.stringify(antisticker))
reply('Ativou com sucesso o recurso de anti sticker neste grupo‚úîÔ∏è')
} else if (Number(args[0]) === 0) {
if (!isAntiSticker) return reply('Ja esta Desativado.')
antisticker.splice(from, 1)
fs.writeFileSync('./arquivos/antis/antisticker.json', JSON.stringify(antisticker))
reply('Desativou com sucesso o recurso de anti sticker neste grupo‚úîÔ∏è')
} else {
reply('[1 para ativar, 0 para desativar]')
}
break

 case 'fazernick':{ // BY ALIZINDEV //by: ALIZINDEV 
if (!q) return reply(`Exemple\n${prefix+command} AlizinDev`)
let lizink_res = await fetchJson(`https://alizindev-api.onrender.com/api/tools/styletext?text=${q}&apikey=a93e85c1`)
let lizinn = lizink_res.resultado
let alizinnk =`*NICKS*\n\n`
for (let x of lizinn){
alizinnk +=`RESULTADO : ${x.result}\n\n`
}
reply(alizinnk)
}
break

case 'listaadmins': case 'listaadm': // BY ALIZINDEV BY ALIZIN DEV 
if (!isGroup) return reply('_so em grupos..._')
teks = `Lista de administradores do grupo *${groupMetadata.subject}*\nTotal : ${groupAdmins.length}\n\n`
no = 0
for (let admon of groupAdmins) {
no += 1
teks += `[${no.toString()}] @${admon.split('@')[0]}\n`
}
mentions(teks, groupAdmins, true)
break

case 'antidoc':
if (!isGroup) return reply(msg.grupo)
if (!isBotGroupAdmins) return reply(msg.botadm)
try {														 
if (args.length < 1) return reply('1 pra ativar, 0 pra desligar')
if (Number(args[0]) === 1) {
antidoc.push(from)
fs.writeFileSync('./arquivos/antis/antidoc.json', JSON.stringify(antidoc))
reply('Ativou com sucesso o recurso de anti documento neste grupo‚úîÔ∏è')
} else if (Number(args[0]) === 0) {
antidoc.splice(from, 1)
fs.writeFileSync('./arquivos/antis/antidoc.json', JSON.stringify(antidoc))
reply('Desativou com sucesso o recurso de antidocumento neste grupo‚úîÔ∏è')
 } else {
reply('1 para ativar, 0 para desativar')
}
} catch {
reply('Deu erro, tente novamente :/')
}
break

case 'antivideo':
if (!isGroup) return reply(msg.grupo)
if (!isGroupAdmins) return reply(msg.adm)
if (!isBotGroupAdmins) return reply(msg.botadm)
if (args.length < 1) return reply('[1 para ativar, 0 para desativar]')
if (Number(args[0]) === 1) {
if (isAntiVid) return reply('Ja esta ativo')
antivid.push(from)
fs.writeFileSync('./arquivos/antis/antivideo.json', JSON.stringify(antivid))
reply('Ativou com sucesso o recurso de anti video neste grupo‚úîÔ∏è')
} else if (Number(args[0]) === 0) {
if (!isAntiVid) return reply('Ja esta Desativado')
antivid.splice(from, 1)
fs.writeFileSync('./arquivos/antis/antivideo.json', JSON.stringify(antivid))
reply('Desativou com sucesso o recurso de anti video neste grupo‚úîÔ∏è')
} else {
reply('1 para ativar, 0 para desativar')
}
break



case 'beijo':
if(!isModobn) return reply(`Este tipo de comando s√≥ pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se voc√™ for, apenas digite ${prefix}modobrincadeira 1`)  
if(!isGroup) return reply('S√≥ pode ser utilizado este comando, em grupo.')
if (m.message.extendedTextMessage === undefined || m.message.extendedTextMessage === null) return reply('Marque algu√©m que vc quer da um beijo')
mentioned = m.message.extendedTextMessage.contextInfo.mentionedJid
pru = '.\n'
for (let _ of mentioned) {
pru += `@${_.split('@')[0]}\n`
}
susp = `Voc√™ deu um beijo gostoso na(o) @${mentioned[0].split('@')[0]} üòÅüëâüëà‚ù§` 
wew = await getBuffer(`${beijin}`)
await loli.sendMessage(from, {video: wew, gifPlayback: true, caption: susp, mentions: mentioned}, {quoted: info})
break
case "ppt":
if(!isModobn) return reply(`Este tipo de comando s√≥ pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se voc√™ for, apenas digite ${prefix}modobrincadeira 1`)  
if (!isGroup) return reply(msg.grupo)
if (args.length < 1) return reply(`Voc√™ deve digitar ${prefix}ppt pedra, ${prefix}ppt papel ou ${prefix}ppt tesoura`)
ppt = ["pedra", "papel", "tesoura"]
ppy = ppt[Math.floor(Math.random() * ppt.length)]
ppg = Math.floor(Math.random() * 1) + 10
pptb = ppy
if ((pptb == "pedra" && args == "papel") ||
(pptb == "papel" && args == "tesoura") ||
(pptb == "tesoura" && args == "pedra")) {
var vit = "vitoria"
} else if ((pptb == "pedra" && args == "tesoura") ||
(pptb == "papel" && args == "pedra") ||
(pptb == "tesoura" && args == "papel")) {
var vit = "derrota"
} else if ((pptb == "pedra" && args == "pedra") ||
(pptb == "papel" && args == "papel") ||
(pptb == "tesoura" && args == "tesoura")) {
var vit = "empate"
} else if (vit = "undefined") {
return reply(`Voc√™ deve digitar ${prefix}ppt pedra, ${prefix}ppt papel ou ${prefix}ppt tesoura`)
}
if (vit == "vitoria") {
var tes = "Voc√™ ganhou -_-"
}
if (vit == "derrota") {
var tes = "Eu ganhei pobre kkkkkk"
}
if (vit == "empate") {
var tes = "Deu empate üòê"
}
reply(`${botName} jogou: ${pptb}\nO jogador jogou: ${args}\n\n${tes}`)
if (tes == "Vit√≥ria do jogador") {
reply(pph)
}
break



case 'chance':
if(!isModobn) return reply(`Este tipo de comando s√≥ pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se voc√™ for, apenas digite ${prefix}modobrincadeira 1`)  
if (!isGroup) return reply(msg.grupo)
rate = body.slice(7)
zxzz = 
random = `${Math.floor(Math.random() * 200)}`
reply(' ‚û• A chance disso que voc√™ falou vai acontecer e de:‚ù∞ '+random+'% ‚ù± ‚úß ')
break


// Caso 'casar'
case 'casar':
    if (!isModobn) return reply(`Este tipo de comando s√≥ pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se voc√™ for, apenas digite ${prefix}modobrincadeira 1`);
    if (!isGroup) return reply('S√≥ pode ser utilizado este comando, em grupo.');

    let casarMentionId; // Vari√°vel para armazenar o ID da men√ß√£o
    if (budy.includes("@")) {
        let mentionId = args.join(" ").replace("@", "") + "@s.whatsapp.net";
        casarMentionId = mentionId; // Atribui o ID mencionado
    } else {
        casarMentionId = sender; // Se n√£o houver men√ß√£o, usa o remetente
    }

    // Mensagem de casamento com men√ß√£o
    let suspCasar = `Parab√©ns, Agora Voc√™ Pegou Pris√£o Perp√©tua, Digo, se Casou Com @${casarMentionId.split('@')[0]}`;
    let jrqCasar = await getBuffer(`${casalzin}`);
    
    // Envia a mensagem com v√≠deo
    await loli.sendMessage(from, {
        video: jrqCasar,
        gifPlayback: true,
        caption: suspCasar,
        mentions: [casarMentionId]
    }, { quoted: info });
    break;

// Caso 'dan√ßa' ou 'dan√ßar'
case 'dan√ßa':
case 'dan√ßar':
    if (!isModobn) return reply(`Este tipo de comando s√≥ pode ser utilizado com o modobrincadeira ativo, fale com um adm ou, se voc√™ for, apenas digite ${prefix}modobrincadeira 1.`);
    if (!isGroup) return reply('Este comando s√≥ pode ser utilizado em grupos.');

    let dan√ßaMentionId; // Vari√°vel para armazenar o ID da men√ß√£o
    if (budy.includes("@")) {
        let mentionId = args.join(" ").replace("@", "") + "@s.whatsapp.net";
        dan√ßaMentionId = mentionId; // Atribui o ID mencionado
    } else {
        dan√ßaMentionId = sender; // Se n√£o houver men√ß√£o, usa o remetente
    }

    // Enviar a mensagem inicial com men√ß√£o
    await loli.sendMessage(from, {
        text: `‚ù∞ Pesquisando parceiros de dan√ßa: @${dan√ßaMentionId.split("@")[0]}, aguarde... ‚ù±`,
        mentions: [dan√ßaMentionId]
    });

    // Aguardar um tempo antes de enviar o v√≠deo
    setTimeout(async () => {
        let jrqDanca = await getBuffer(`${dancinha}`);
        await loli.sendMessage(from, {
            video: jrqDanca,
            gifPlayback: true,
            caption: `Voc√™ e o(a) @${dan√ßaMentionId.split("@")[0]} est√£o dan√ßando para o TikTok! üï∫üíÉ`,
            mentions: [dan√ßaMentionId]
        }, { quoted: info });
    }, 7000); // Aguardar 7 segundos
    break;

// Caso 'soco'
case 'soco':
    if (!isModobn) return reply(`Este tipo de comando s√≥ pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se voc√™ for, apenas digite ${prefix}modobrincadeira 1`);
    if (!isGroup) return reply('S√≥ pode ser utilizado este comando, em grupo.');

    let socoMentionId; // Vari√°vel para armazenar o ID da men√ß√£o
    if (budy.includes("@")) {
        let mentionId = args.join(" ").replace("@", "") + "@s.whatsapp.net";
        socoMentionId = mentionId; // Atribui o ID mencionado
    } else {
        socoMentionId = sender; // Se n√£o houver men√ß√£o, usa o remetente
    }

    let suspSoco = `@${socoMentionId.split('@')[0]} Voc√™ Recebeu um Soc√£o`;
    let jrqSoco = await getBuffer(`${soquin}`);
    await loli.sendMessage(from, {
        video: jrqSoco,
        gifPlayback: true,
        caption: suspSoco,
        mentions: [socoMentionId]
    }, { quoted: info });
    break;

    case 'chute':
case 'chutar':
    if (!isModobn) return reply(`Este tipo de comando s√≥ pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se voc√™ for, apenas digite ${prefix}modobrincadeira 1.`);
    if (!isGroup) return reply('S√≥ pode ser utilizado este comando, em grupo.');

    // Declarar uma vari√°vel para men√ß√£o
    let mentionIdChutar;

    if (budy.includes("@")) {
        let userMention = args.join(" ").replace("@", "") + "@s.whatsapp.net";
        mentionIdChutar = userMention; // Atribui√ß√£o aqui
    } else {
        mentionIdChutar = sender; // Atribui√ß√£o aqui
    }

    // Mensagem de chute com men√ß√£o
    let suspChute = `Voc√™ acabou de dar um chute em @${mentionIdChutar.split('@')[0]} ü§°`;

    // Obter o buffer do v√≠deo
    try {
        let jry = await getBuffer(`${chutin}`);
        // Enviar v√≠deo com men√ß√£o e legenda
        await loli.sendMessage(from, {
            video: jry,
            gifPlayback: true,
            caption: suspChute,
            mentions: [mentionIdChutar]
        }, { quoted: info });
    } catch (error) {
        reply("Erro ao carregar o v√≠deo. Tente novamente mais tarde.");
    }
    break;

case 'chutar2':  // Alana vendedora de ovo frito
    if (!isGroup) return reply('S√≥ pode ser utilizado este comando em grupo.');

    let chutarMentionId; // Vari√°vel para armazenar o ID da men√ß√£o
    if (budy.includes("@")) {
        chutarMentionId = args.join(" ").replace("@", "") + "@s.whatsapp.net"; // Atribui o ID mencionado
    } else {
        chutarMentionId = sender; // Se n√£o houver men√ß√£o, usa o remetente
    }

    // Mensagem de chute com men√ß√£o
    const suspChutar = `Voc√™ acabou de dar um chute em @${chutarMentionId.split('@')[0]} ü§°`;

    // Obter o buffer do v√≠deo da URL especificada
    try {
        const jry = await getBuffer(`https://telegra.ph/file/d4b2525d2e1aeb33fa626.mp4`);
        // Enviar v√≠deo com men√ß√£o e legenda
        await loli.sendMessage(from, {
            video: jry,
            gifPlayback: true,
            caption: suspChutar,
            mentions: [chutarMentionId] // Usando a vari√°vel correta aqui
        }, { quoted: contato });
    } catch (error) {
        reply("Erro ao carregar o v√≠deo. Tente novamente mais tarde.");
    }
    break;
// Caso 'feio'
case 'feio':
    if (!isModobn) return reply(`Este tipo de comando s√≥ pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se voc√™ for, apenas digite ${prefix}modobrincadeira 1`);
    if (!isGroup) return reply('S√≥ pode ser utilizado este comando, em grupo.');

    let feio_mention_id;

    if (budy.includes("@")) {
        let mention_id = args.join(" ").replace("@", "") + "@s.whatsapp.net";
        feio_mention_id = mention_id;  // Atribui o ID mencionado
    } else {
        feio_mention_id = sender;  // Se n√£o houver men√ß√£o, usa o remetente
    }

    await loli.sendMessage(from, { text: `Pesquisando a sua ficha de feio : @${feio_mention_id.split("@")[0]} aguarde...`, mentions: [feio_mention_id] });

    setTimeout(async () => {
        let wew = await getBuffer(`${fein}`);
        let random = `${Math.floor(Math.random() * 110)}`;
        let feio = random;

        let bo = '';
        if (feio < 20) { bo = '√â, n√£o √© feio'; } 
        else if (feio == 21 || feio == 23 || feio == 24 || feio == 25 || feio == 26 || feio == 27 || feio == 2 || feio == 29 || feio == 30) { 
            bo = '+/- feio'; 
        } else if (feio == 31) { 
            bo = 'Ainda t√° na m√©dia'; 
        } else if (feio == 32 || feio == 33) { 
            bo = 'Da pra pegar umas(ns) novinha(o) ainda'; 
        } else if (feio == 34) { 
            bo = '√â fein, mas tem baum cora√ß√£o'; 
        } else if (feio == 35) { 
            bo = 'T√° na m√©dia, mas n√£o deixa de ser feii'; 
        } else if (feio == 36) { 
            bo = 'Bonitin mas √© feio com orgulho'; 
        } else if (feio == 37) { 
            bo = 'Feio e pregui√ßoso(a), vai se arrumar praga feia'; 
        } else if (feio == 3) { 
            bo = 'tenho'; 
        } else if (feio == 39) { 
            bo = 'Feio, mas um banho e se arrumar deve resolver'; 
        } else if (feio == 40) { 
            bo = 'FeiN, mas n√£o existe gente feia, existe gente que n√£o conhece os produtos jequity'; 
        } else if (feio == 41) { 
            bo = 'Voc√™ √© feio, mas √© legal, continue assim'; 
        } else if (feio == 42) { 
            bo = 'Nada que uma maquiagem e se arrumar n√£o resolva ü•¥'; 
        } else if (feio == 43) { 
            bo = 'Feio que d√≥i de ver, compra uma m√°scara que melhora'; 
        } else if (feio == 44) { 
            bo = 'Feio mas nada que um saco na cabe√ßa n√£o resolva n√©!?'; 
        } else if (feio == 45) { 
            bo = 'Voc√™ √© feio, mas tem bom gosto'; 
        } else if (feio == 46) { 
            bo = 'Feio, mas tem muitos amigos'; 
        } else if (feio == 47) { 
            bo = 'Feio, mas tem l√°bia pra pegar v√°rias novinhas'; 
        } else if (feio == 4) { 
            bo = 'Feio e ainda n√£o sabe se vestir, vixi'; 
        } else if (feio == 49) { 
            bo = 'Feiooo'; 
        } else if (feio == 50) { 
            bo = 'Voc√™ √© feio, mas n√£o se enxerga üßê'; 
        } else if (feio > 51) { 
            bo = 'Voc√™ √© feio demais üôà'; 
        }

        await loli.sendMessage(from, { 
            image: wew, 
            caption: `O quanto voc√™ √© feio? \n\n „Äå @${feio_mention_id.split("@")[0]} „ÄçVoc√™ √©: ‚ù∞ ${random}% ‚ù± feio üôâ\n\n${bo}`, 
            mentions: [feio_mention_id], 
            thumbnail: null 
        }, { quoted: info });
    }, 7000);
    break;




// Caso 'soco'




case 'casal':
if(!isModobn) return reply(`Este tipo de comando s√≥ pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se voc√™ for, apenas digite ${prefix}modobrincadeira 1`)  
if(!isGroup) return reply('S√≥ pode ser utilizado este comando, em grupo.')
audiomenu = await fs.readFileSync("./loli/audio/shipo.mp3")
loli.sendMessage(from, {audio: audiomenu, mimetype: 'audio/mpeg', ptt:true}, {quoted: info})
membr = []
const suamae11 = groupMembers
const suamae21 = groupMembers
const teupai11 = suamae11[Math.floor(Math.random() * suamae11.length)]
const teupai21 = suamae21[Math.floor(Math.random() * suamae21.length)]
var shipted1 = ["1%", `2%`, `3%`, `4%`, `5%`, `6%`, `7`, `%`, `9%`, `10`, `11%`, `12%`,`13%`, `14%`, `15%`, `16%`, `17%`, `1%`, `19%`, `20%`, `21%`, `22`, `23%`, `24%`, `25%`, `26%`, `27%`, `2%`, `27%`, `2%`, `29%`, `30%`, `31%`, `32%`, `33%`, `34%`, `35%`, `36%`, `37%`, `3%`, `39%`, `40%`, `41%`, `42%`, `43%`, `44%`, `45%`, `46%`, `47%`, `4%`, `49%`, `50%`, `51%`, `52%`, `53%`, `54%`, `55%`, `56%`, `57%`, `5%`, `59%`, `60%`, `61%`, `62%`, `63%`, `64%`, `65%`, `66%`, `67%`, `6%`, `69%`, `70%`, `71%`, `72%`, `73%`, `74%`, `75%`, `76%`, `77%`, `7%`, `79%`, `0%`, `1%`, `2%`, `5%`, `4%`, `5%`, `6%`, `7%`, `%`, `9%`, `90%`, `91%`, `92%`, `93%`, `94%`, `95%`, `96%`, `97%`, `9%`, `99%`, `100%`]
const shipted = shipted1[Math.floor(Math.random() * shipted1.length)]
jet = `*Hmmm.... Eu Shipo eles 2üíòüíò*\n\n1= @${teupai11.id.split('@')[0]}\ne esse\n2= @${teupai21.id.split('@')[0]}\ncom uma porcentagem de: ${shipted}`
membr.push(teupai11.id)
membr.push(teupai21.id)
mentions(jet, membr, true)
break

case 'shipo':
if(!isModobn) return reply(`Este tipo de comando s√≥ pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se voc√™ for, apenas digite ${prefix}modobrincadeira 1`)  
teks = args.join(" ")
if(teks.length < 10) return reply('Marque uma pessoa do grupo para encontrar o par dela')
membrr = []
const suamae111 = groupMembers
const suamae211 = groupMembers
const teupai111 = suamae111[Math.floor(Math.random() * suamae111.length)]
const teupai211 = suamae211[Math.floor(Math.random() * suamae211.length)]
var shipted1 = ["1%", `2%`, `3%`, `4%`, `5%`, `6%`, `7`, `%`, `9%`, `10`, `11%`, `12%`,`13%`, `14%`, `15%`, `16%`, `17%`, `1%`, `19%`, `20%`, `21%`, `22`, `23%`, `24%`, `25%`, `26%`, `27%`, `2%`, `27%`, `2%`, `29%`, `30%`, `31%`, `32%`, `33%`, `34%`, `35%`, `36%`, `37%`, `3%`, `39%`, `40%`, `41%`, `42%`, `43%`, `44%`, `45%`, `46%`, `47%`, `4%`, `49%`, `50%`, `51%`, `52%`, `53%`, `54%`, `55%`, `56%`, `57%`, `5%`, `59%`, `60%`, `61%`, `62%`, `63%`, `64%`, `65%`, `66%`, `67%`, `6%`, `69%`, `70%`, `71%`, `72%`, `73%`, `74%`, `75%`, `76%`, `77%`, `7%`, `79%`, `0%`, `1%`, `2%`, `5%`, `4%`, `5%`, `6%`, `7%`, `%`, `9%`, `90%`, `91%`, `92%`, `93%`, `94%`, `95%`, `96%`, `97%`, `9%`, `99%`, `100%`]
const shiptedd = shipted1[Math.floor(Math.random() * shipted1.length)]
jet = `*Hmmm.... Eu Shipo eles 2üíòüíò*\n\n1 = @${teupai111.id.split('@')[0]}\n && 2 = ${teks} com uma porcentagem de: ${shiptedd}`
membrr.push(teupai111.id)
membrr.push(teupai211.id)
mentions(jet, membrr, true)
break

case 'idgp':
reply(`${from}`)
break

case 'a1':
loli.sendMessage(from, {
audio: fs.readFileSync('./arquivos/musica/a1.mp3'),
mimetype: 'audio/mp4'
},
{quoted: info
})
break

case 'a2':
loli.sendMessage(from, {
audio: fs.readFileSync('./arquivos/musica/a2.mp3'),
mimetype: 'audio/mp4'
},
{quoted: info
})
break

case 'a3':
loli.sendMessage(from, {
audio: fs.readFileSync('./arquivos/musica/a3.mp3'),
mimetype: 'audio/mp4'
},
{quoted: info
})
break


case 'japonesa':
try {
loli.sendMessage(from, {image: {url: `https://aemt.me/japan`}}, {quoted: info}).catch(() => {
return reply('erro...')
})
await sleep(600)
loli.sendMessage(from, {text: 'MANDANDO...'}, {quoted: info});
} catch {
reply('A API CAIU')
}
break

case 'a4':
loli.sendMessage(from, {
audio: fs.readFileSync('./arquivos/musica/a4.mp3'),
mimetype: 'audio/mp4'
},
{quoted: info
})
break

case 'suruba':
if(!isModobn) return reply(`Este tipo de comando s√≥ pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se voc√™ for, apenas digite ${prefix}modobrincadeira 1`)  
if(!isGroup) return reply(msg.grupo)
if(!isModobn) return reply(`Este comando so pode ser utilizado com o comando ${prefix}modo-gamer 1 ativado, para desativar s√≥ basta utilizar ${prefix}modo-gamer 0`)
const quantidadeSafados = args.join(' ')
if(!quantidadeSafados) return reply(`Informe por favor a quantidade de pessoas voc√™ deseja em sua suruba... *Exemplo:* ${prefix+command} 4`)
emojiskk = ["ü•µ", "üòà", "ü´£", "üòè"]
emojis = emojiskk[Math.floor(Math.random() * emojiskk.length)]  
frasekk = [`t√° querendo rela√ß√µes sexuais a ${quantidadeSafados}, topa?`, `quer que *${quantidadeSafados}* pessoas venham de *chicote, algema e corda de alpinista*.`, `quer que ${quantidadeSafados} pessoas der tapa na cara, lhe chame de cachorra e fud3r bem gostosinho...`]
context = frasekk[Math.floor(Math.random() * frasekk.length)]  
ABC = `${prefix} @${sender.split('@')[0]} ${context}\n\n`
for (var i = 0; i < quantidadeSafados; i++) {
ABC += `@${somembros[Math.floor(Math.random() * somembros.length)].split("@")[0]}\n`
}
mencionarIMG(ABC, suruba);
break;

case 'addpremium': case 'addvip':
if (!isCreator) loli.sendMessage(from, ndono2, sticker)
if (info.message.extendedTextMessage === undefined || info.message.extendedTextMessage === null) return 
mentioned = info.message.extendedTextMessage.contextInfo.mentionedJid
pru = '.\n'
for (let _ of mentioned) {
pru += `@${_.split('@')[0]}\n`
}
premium.push(`${mentioned}`)
fs.writeFileSync('./Premiums/usuarios/premium.json', JSON.stringify(premium))
susp = `üëë@${mentioned[0].split('@')[0]} foi adicionado √† lista de usu√°rios premium com sucessoüëë`
mentions(`${susp}`, mentioned, true)   
break 

case 'serprem': case 'servip':
if (!isCreator) return reply(msg.dono)
premium.push(`${donoNumber}@s.whatsapp.net`)
fs.writeFileSync('./Premiums/usuarios/premium.json', JSON.stringify(premium))
reply(`Pronto ${donoNumber} voc√™ foi adicionado na lista premium.`)
break

case 'modobrincadeiras':  
case 'modobrincadeiras':  
case 'Modobrincadeira':
if (!isGroup) return reply(msg.grupo)
if (!isGroupAdmins) return reply(msg.adm)
if (args.length < 1) return reply('Hmmmm')
if (Number(args[0]) === 1) {
if (isModobn) return reply('o modobrincadeira j√° est√° ativo')
modobn.push(from)
fs.writeFileSync('./arquivos/grupos/brincadeiras.json', JSON.stringify(modobn))
reply(`\`\`\`‚úìAtivado com sucesso o modobrincadeiras no grupo\`\`\` *${groupMetadata.subject}*`)
} else if (Number(args[0]) === 0) {
if (!isModobn) return reply('o modobrincadeira j√° est√° Desativado')  
modobn.splice(from, 1)
fs.writeFileSync('./arquivos/grupos/brincadeiras.json', JSON.stringify(modobn))
reply(`\`\`\`‚úìModo brincadeiras desativado com sucesso no grupo\`\`\` *${groupMetadata.subject}*`)
} else {
reply('1 para ativar, 0 para desligar')
}
break 

case 'delpremium': case 'delvip':
if (!isGroup) return reply(msg.grupo)
if (!isCreator) return  reply(msg.dono)
if (!budy.includes("@55")) {
num = info.message.extendedTextMessage.contextInfo.participant
bla = premium.includes(num)
if(!bla) return reply("_Este n√∫mero n√£o est√° incluso na lista premium.._")  
pesquisar = num
processo = premium.indexOf(pesquisar)
while(processo >= 0){
premium.splice(processo, 1)
processo = premium.indexOf(pesquisar)
}
fs.writeFileSync('./Premiums/usuarios/premium.json', JSON.stringify(premium))
loli.sendMessage(from, {text: ` ${num.split("@")[0]} foi tirado da lista premium com sucesso..`}, {quoted: info})
} else {
mentioned = args.join(" ").replace("@", "") + "@s.whatsapp.net"
bla = premium.includes(mentioned)
if(!bla) return reply("_Este n√∫mero n√£o est√° incluso na lista premium.._")  
pesquisar = mentioned
processo = premium.indexOf(pesquisar)
while(processo >= 0){
premium.splice(processo, 1)
processo = premium.indexOf(pesquisar)
}
fs.writeFileSync('./Premiums/usuarios/premium.json', JSON.stringify(premium))
loli.sendMessage(from, {text: ` @${mentioned.split("@")[0]} foi tirado da lista premium com sucesso..`}, {quoted: info})
}
break

case 'listavip': case 'listaprem':
if(!isCreator) return reply(msg.dono)   
if(!isPremium) return reply(msg.premium)   
tkks = '‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ*„Äå _PREMIUM USERüëë_ „Äç\n'
for (let V of premium) {
tkks += `‚îÇ+  @${V.split('@')[0]}\n`
}
tkks += `‚îÇ+ Total : ${premium.length}\n‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ*„Äå _${botName}_ „Äç*‚îÄ‚îÄ‚îÄ‚îÄ`
reply(tkks.trim())
break

case 'sorteio':
if(!isGroupAdmins) return reply('S√≥ ADM pode utilizar este comando.')
try{
if(!isGroup) return reply(msg.grupo)
if(!q) return reply(`Coloque algo, ap√≥s o comando sorteio, por exemplo, ${prefix}sorteio de 100 R$`)
d = []
teks = `
‚ùØ  ‚ùí„Äé${botName}„Äè‚ùí  ‚ùÆ


‚ïë‚ùØ         „Äò SORTEIO ALEAT√ìRIO „Äô


‚î†‚ùØ ‚ùí  Voc√™ Foi o Premiado 
‚î†‚ùØ ‚ùí  Pr√™mio: ${q}
‚î†‚ùØ ‚ùí  Doador: ${pushname}\n`
for(i = 0; i < 1; i++) {
r = Math.floor(Math.random() * groupMetadata.participants.length + 0)
teks += `‚î†‚ùØ ‚ùí  @${groupMembers[r].id.split('@')[0]}\n\n\n‚ïë‚ùØ         „Äò MOTIVACIONAL „Äô\n\n\n${enviarmen}`
d.push(groupMembers[r].id)
}
mentions(teks, d, true)
} catch (e) {
console.log(e)
reply('Deu erro, tente novamente :/')
}
break





case 'antilink':
if (!isBotAdmins) return reply(msg.botadm)
if (!isGroupAdmins) return reply(msg.adm)
if (!info.key.fromMe && !isCreator) return reply(msg.botadm)
					if (args.length < 1) return reply('digite 1 para ativar ou 0 para desativar ')
					if (Number(args[0]) === 1) {
						if (isAntiLink) return reply('o anti-link est√° ativo')
						antilink.push(from)
						fs.writeFileSync('./loli/seguranca/antilink.json', JSON.stringify(antilink))
						reply('O anti-link foi ativo no grupo ‚úîÔ∏è')
					} else if (Number(args[0]) === 0) {			
						antilink.splice(from, 1)
						fs.writeFileSync('./loli/seguranca/antilink.json', JSON.stringify(antilink))
						reply('O anti-link foi desativado com sucesso neste grupo‚úîÔ∏è')
					} else {
						reply('1 para ativar, 0 para desativar ')
					}
					break
					
case 'admshide': case 'listaadm': case 'adms':
if (!isGroup) return reply(msg.grupo)
ytb = `Lista dos admins do grupo *${groupMetadata.subject}*\nTotal : ${groupAdmins.length}\n\n`
no = 0
for (let admon of groupAdmins) {
no += 1
ytb += `[${no.toString()}] @${admon.split('@')[0]}\n`
}
mentions(ytb, groupAdmins, true)
break




case 'alma-gemeas':
if(!isModobn) return reply(`Este tipo de comando s√≥ pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se voc√™ for, apenas digite ${prefix}modobrincadeira 1`)  
if(!isGroup) return reply('S√≥ pode ser utilizado este comando, em grupo.')
membr = []
const suamae121 = groupMembers
const suamae251 = groupMembers
const teupai117 = suamae121[Math.floor(Math.random() * suamae121.length)]
const teupai251 = suamae251[Math.floor(Math.random() * suamae251.length)]
var shipted11 = ["1%", `2%`, `3%`, `4%`, `5%`, `6%`, `7`, `%`, `9%`, `10`, `11%`, `12%`,`13%`, `14%`, `15%`, `16%`, `17%`, `1%`, `19%`, `20%`, `21%`, `22`, `23%`, `24%`, `25%`, `26%`, `27%`, `2%`, `27%`, `2%`, `29%`, `30%`, `31%`, `32%`, `33%`, `34%`, `35%`, `36%`, `37%`, `3%`, `39%`, `40%`, `41%`, `42%`, `43%`, `44%`, `45%`, `46%`, `47%`, `4%`, `49%`, `50%`, `51%`, `52%`, `53%`, `54%`, `55%`, `56%`, `57%`, `5%`, `59%`, `60%`, `61%`, `62%`, `63%`, `64%`, `65%`, `66%`, `67%`, `6%`, `69%`, `70%`, `71%`, `72%`, `73%`, `74%`, `75%`, `76%`, `77%`, `7%`, `79%`, `0%`, `1%`, `2%`, `5%`, `4%`, `5%`, `6%`, `7%`, `%`, `9%`, `90%`, `91%`, `92%`, `93%`, `94%`, `95%`, `96%`, `97%`, `9%`, `99%`, `100%`]
const shipteddd = shipted11[Math.floor(Math.random() * shipted11.length)]
jet = `*Hmmm....  alma-gemeas eles 2 üíòüíò*\n\n1= @${teupai117.id.split('@')[0]}\ne esse\n2= @${teupai251.id.split('@')[0]}\ncom uma porcentagem de: ${shipteddd}`
membr.push(teupai117.id)
membr.push(teupai251.id)
mentions(jet, membr, true)
break

case 'dado': 
if(!isModobn) return reply(`Este tipo de comando s√≥ pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se voc√™ for, apenas digite ${prefix}modobrincadeira 1`)  
					kapankah = body.slice(1)
					const elu =['Caiu‚öÄ','Caiu‚öÅ','Caiu‚öÇ','Caiu‚öÉ','Caiu‚öÑ','Caiu‚öÖ']
					const ule = elu[Math.floor(Math.random() * elu.length)]
					loli.sendMessage(from, ule, text, { quoted: info })
					break

case 'autoreact':
if (!isGroup) return reply(msg.grupo)
if (!isGroupAdmins) return reply(msg.adm)
if (!isBotGroupAdmins) return reply(msg.botadm)
if (Number(args[0]) === 1) {
if (isAutoReact) return reply('J√° est√° ativado')
autoreact.push(from)
fs.writeFileSync('./arquivos/funcoes/autoreact.json', JSON.stringify(autoreact))
reply('[ü©∏] Ativou com sucesso o recurso de auto rea√ß√£o neste grupo üìù')
} else if (Number(args[0]) === 0) {
if (!isAutoReact) return reply('J√° est√° desativado')
pesquisar = from
processo = autoreact.indexOf(pesquisar)
while(processo >= 0){
autoreact.splice(processo, 1)
processo = autoreact.indexOf(pesquisar)
}
fs.writeFileSync('./arquivos/funcoes/autoreact.json', JSON.stringify(autoreact))
reply('‚ÄºÔ∏è Desativou com sucesso o recurso de auto rea√ß√£o neste grupo‚úîÔ∏è')
}
break

case 'antiloc':
if (!isGroup) return reply(`SOMENTE EM GRUPOS`)
if (!isGroupAdmins) return reply(`PRECISA SER ADMIN`)
if (!isBotGroupAdmins) return reply(` O BOT PRECISA SER ADMIN`)
try {		 
if (args.length < 1) return reply('1 pra ativar, 0 pra desligar')
if (Number(args[0]) === 1) {
if(Antiloc) return reply('J√° est√° Ativo.')
antiloc.push(from)
fs.writeFileSync('./arquivos/antis/antiloc.json', JSON.stringify(antiloc))
reply('Ativou com sucesso o recurso de anti loc neste grupo‚úîÔ∏è')
} else if (Number(args[0]) === 0) {
if(!Antiloc) return reply('J√° est√° Desativado.')
antiloc.splice(from, 1)
fs.writeFileSync('./arquivos/antis/antiloc.json', JSON.stringify(antiloc))
reply('Desativou com sucesso o recurso de anti loc neste grupo‚úîÔ∏è')
} else {
reply('1 para ativar, 0 para desativar')
}
} catch {
reply('Deu erro, tente novamente :/')
}
break

case 'anticatalg': case 'anticatalago':
if (!isGroup) return reply(msg.grupo)
if (!isGroupAdmins) return reply(msg.adm)
if (!isBotGroupAdmins) return reply(msg.botadm)
if (Number(args[0]) === 1) {
if (isAnticatalogo) return reply('Ja esta ativo')
anticatalogo.push(from)
fs.writeFileSync('./arquivos/antis/anticatalogo.json', JSON.stringify(anticatalogo))
reply('[ü©∏] Ativou com sucesso o recurso de anticatalogo neste grupo üìù')
} else if (Number(args[0]) === 0) {
if (!isAnticatalogo) return reply('Ja esta Desativado')
pesquisar = from
processo = anticatalogo.indexOf(pesquisar)
while(processo >= 0){
anticatalogo.splice(processo, 1)
processo = anticatalogo.indexOf(pesquisar)
}
fs.writeFileSync('./arquivos/antis/anticatalogo.json', JSON.stringify(anticatalogo))
reply('‚ÄºÔ∏è Desativou com sucesso o recurso de anticatalogo neste grupo‚úîÔ∏è')
}
break

case 'antinotas':
if (!isGroup) return reply(enviar.msg.grupo)
if (!isGroupAdmins) return reply(enviar.msg.adm)
if (!isBotGroupAdmins) return reply(enviar.msg.Badmin)
if (args.length < 1) return reply('Hmmmm')
if (Number(args[0]) === 1) {
if (isAntiNotas) return reply('J√° Esta ativo')
antinotas.push(from)
fs.writeFileSync('./arquivos/antis/antinotas.json', JSON.stringify(antinotas))
reply('Ativou com sucesso o recurso de anti notas neste grupo‚úîÔ∏è')
} else if (Number(args[0]) === 0) {
if (!isAntiNotas) return reply('Ja esta Desativado.')
antinotas.splice(from, 1)
fs.writeFileSync('./arquivos/antis/antinotas.json', JSON.stringify(antinotas))
reply('Desativou com sucesso o recurso de anti notas neste grupo‚úîÔ∏è')
} else {
reply('1 para ativar, 0 para desativar')
}
break

case 'quando':
if(!isModobn) return reply(`Este tipo de comando s√≥ pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se voc√™ for, apenas digite ${prefix}modobrincadeira 1`)  
if (args.length < 1) return reply('Digite a pergunta')
randomm = meupirul[Math.floor(Math.random() * meupirul.length)]
random2 = `${Math.floor(Math.random() * 11) + 1}`
if (randomm == 'Hoje' || randomm == 'Amanh√£' || randomm == 'Nunca') {
texto = `Pergunta: ${body.slice(1)}\n\nResposta: ${randomm}`
} else if (random2 == 1) {
texto = `Pergunta: ${body.slice(1)}\n\nResposta: 1 ${randomm}`
} else {
random3 = meupirul2[Math.floor(Math.random() * meupirul2.length)]
texto = `Pergunta: ${body.slice(1)}\n\nResposta: ${random2} ${random3}`
}
reply(texto)
break

case 'rankgostoso':
if(!isModobn) return reply(`Este tipo de comando s√≥ pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se voc√™ for, apenas digite ${prefix}modobrincadeira 1`)  
if(!isGroup) return reply('S√≥ pode ser utilizado este comando, em grupo.')
member = []
const p01 = groupMembers
const p02 = groupMembers
const p03 = groupMembers
const p04 = groupMembers
const p05 = groupMembers
const o01 = p01[Math.floor(Math.random() * p01.length)]
const o02 = p02[Math.floor(Math.random() * p02.length)]
const o03 = p03[Math.floor(Math.random() * p03.length)]
const o04 = p04[Math.floor(Math.random() * p04.length)]
const o05 = p05[Math.floor(Math.random() * p05.length)]
luy = `
‚ùØ „Äé${botName}„Äè ‚ùÆ


‚ïë‚ùØ         „Äò TOP MAIS GOSTOSOS „Äô

‚î†‚ùØ ‚ùí GRUPO: ${groupName}
‚î†
‚î†‚ùØ ‚ùí GOSTOSO: @${o01.id.split('@')[0]}  
‚î†‚ùØ ‚ùí GOSTOSO: @${o02.id.split('@')[0]}  
‚î†‚ùØ ‚ùí GOSTOSO: @${o03.id.split('@')[0]}  
‚î†‚ùØ ‚ùí GOSTOSO: @${o04.id.split('@')[0]}  
‚î†‚ùØ ‚ùí GOSTOSO: @${o05.id.split('@')[0]}  

‚ùØ         „Äò MOTIVACIONAL „Äô

${enviarmen}`
member.push(o01.id)
member.push(o02.id)
member.push(o03.id)
member.push(o04.id)
member.push(o05.id)
mentions(luy, member, true)
break

case 'rankgostosa':
if(!isModobn) return reply(`Este tipo de comando s√≥ pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se voc√™ for, apenas digite ${prefix}modobrincadeira 1`)  
if(!isGroup) return reply('S√≥ pode ser utilizado este comando, em grupo.')
member = []
const p1 = groupMembers
const p2 = groupMembers
const p3 = groupMembers
const p4 = groupMembers
const p5 = groupMembers
const o1 = p1[Math.floor(Math.random() * p1.length)]
const o2 = p2[Math.floor(Math.random() * p2.length)]
const o3 = p3[Math.floor(Math.random() * p3.length)]
const o4 = p4[Math.floor(Math.random() * p4.length)]
const o5 = p5[Math.floor(Math.random() * p5.length)]
luy = `
Paradas!ü§öü§ö\n\n1=ü§öü§≠@${o1.id.split('@')[0]}ü§öü§≠\n\n\n2=ü§öü§≠@${o2.id.split('@')[0]}ü§öü§≠\n\n\n3=ü§öü§≠@${o3.id.split('@')[0]}ü§öü§≠\n\n\n4=ü§öü§≠@${o4.id.split('@')[0]}ü§öü§≠\n\n\n5=ü§öü§≠@${o5.id.split('@')[0]}??ü§≠\n\n\nMultas por serem gostosas dmsüò≥ pague pena enviando nud no PV do donoüòä by Bot`
member.push(o1.id)
member.push(o2.id)
member.push(o3.id)
member.push(o4.id)
member.push(o5.id)
mentions(luy, member, true)
break

case 'rankcornos':
if(!isModobn) return reply(`Este tipo de comando s√≥ pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se voc√™ for, apenas digite ${prefix}modobrincadeira 1`)  
if(!isGroup) return reply('S√≥ pode ser utilizado este comando, em grupo.')
membr = []
const corno1 = groupMembers
const corno2 = groupMembers
const corno3 = groupMembers
const corno4 = groupMembers
const corno5 = groupMembers
const cornos1 = corno1[Math.floor(Math.random() * corno1.length)]
const cornos2 = corno2[Math.floor(Math.random() * corno2.length)]
const cornos3 = corno3[Math.floor(Math.random() * corno3.length)]
const cornos4 = corno4[Math.floor(Math.random() * corno4.length)]
const cornos5 = corno5[Math.floor(Math.random() * corno5.length)]
var porcentagemcorno = ["1%", `2%`, `3%`, `4%`, `5%`, `6%`, `7`, `%`, `9%`, `10`, `11%`, `12%`,`13%`, `14%`, `15%`, `16%`, `17%`, `1%`, `19%`, `20%`, `21%`, `22%`, `23%`, `24%`, `25%`, `26%`, `27%`, `2%`, `27%`, `2%`, `29%`, `30%`, `31%`, `32%`, `33%`, `34%`, `35%`, `36%`, `37%`, `3%`, `39%`, `40%`, `41%`, `42%`, `43%`, `44%`, `45%`, `46%`, `47%`, `4%`, `49%`, `50%`, `51%`, `52%`, `53%`, `54%`, `55%`, `56%`, `57%`, `5%`, `59%`, `60%`, `61%`, `62%`, `63%`, `64%`, `65%`, `66%`, `67%`, `6%`, `69%`, `70%`, `71%`, `72%`, `73%`, `74%`, `75%`, `76%`, `77%`, `7%`, `79%`, `0%`, `1%`, `2%`, `5%`, `4%`, `5%`, `6%`, `7%`, `%`, `9%`, `90%`, `91%`, `92%`, `93%`, `94%`, `95%`, `96%`, `97%`, `9%`, `99%`, `O chifre desse ai bate na lua ksksksk`]
const porcentagemc = porcentagemcorno[Math.floor(Math.random() * porcentagemcorno.length)]
const porcentag = porcentagemcorno[Math.floor(Math.random() * porcentagemcorno.length)]
const porcent = porcentagemcorno[Math.floor(Math.random() * porcentagemcorno.length)]
const porcl = porcentagemcorno[Math.floor(Math.random() * porcentagemcorno.length)]
const porg = porcentagemcorno[Math.floor(Math.random() * porcentagemcorno.length)]
const prg = porcentagemcorno[Math.floor(Math.random() * porcentagemcorno.length)]
ytb = `
‚ùØ  ‚ùí„Äé ${botName} „Äè‚ùí  ‚ùÆ


‚ïë‚ùØ         „Äò TOP MAIS CORNOS „Äô

‚î†‚ùØ ‚ùí GRUPO: ${groupName}
‚î†
‚î†‚ùØ ‚ùí CORNO: @${cornos1.id.split('@')[0]}  ‚ùØ ${porcent} ‚ùÆ
‚î†‚ùØ ‚ùí CORNO: @${cornos2.id.split('@')[0]}  ‚ùØ ${porcentag} ‚ùÆ
‚î†‚ùØ ‚ùí CORNO: @${cornos3.id.split('@')[0]}  ‚ùØ ${porcl} ‚ùÆ
‚î†‚ùØ ‚ùí CORNO: @${cornos4.id.split('@')[0]}  ‚ùØ ${porg} ‚ùÆ
‚î†‚ùØ ‚ùí CORNO: @${cornos5.id.split('@')[0]}  ‚ùØ ${prg} ‚ùÆ

‚ùØ         „Äò MOTIVACIONAL „Äô

${enviarmen}`
membr.push(cornos1.id)
membr.push(cornos2.id)
membr.push(cornos3.id)
membr.push(cornos4.id)
membr.push(cornos5.id)
mentions(ytb, membr, true)
break

case 'rankgay':
if(!isModobn) return reply(`Este tipo de comando s√≥ pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se voc√™ for, apenas digite ${prefix}modobrincadeira 1`)  
if(!isGroup) return reply('S√≥ pode ser utilizado este comando, em grupo.')

try{
d = []
ret = `‚ùØ  ‚ùí„Äé${botName}„Äè‚ùí  ‚ùÆ\n\n‚ïë‚ùØ         „Äò TOP 5 MAIS GAYS „Äô\n\n`
for(i = 0; i < 5; i++) {
r = Math.floor(Math.random() * groupMetadata.participants.length + 0)
ret += `‚î†‚ùØ ‚ùí üè≥Ô∏è‚Äçüåà @${groupMembers[r].id.split('@')[0]}\n`
d.push(groupMembers[r].id)
}
mentions(ret, d, true)
} catch (e) {
console.log(e)
reply('Deu erro, tente novamente :/')
}
break

case 'rankgados':
if(!isModobn) return reply(`Este tipo de comando s√≥ pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se voc√™ for, apenas digite ${prefix}modobrincadeira 1`)  
if(!isGroup) return reply('S√≥ pode ser utilizado este comando, em grupo.')

try{
d = []
ret = `‚ùØ  ‚ùí„Äé${botName}„Äè‚ùí  ‚ùÆ\n\n‚ïë‚ùØ         „Äò TOP 5 MAIS GADOS „Äô\n\n`
for(i = 0; i < 5; i++) {
r = Math.floor(Math.random() * groupMetadata.participants.length + 0)
ret += `‚î†‚ùØ ‚ùí üêÆ @${groupMembers[r].id.split('@')[0]}\n`
d.push(groupMembers[r].id)
}
mentions(ret, d, true)
} catch (e) {
console.log(e)
reply('Deu erro, tente novamente :/')
}
break

case 'feminista':
    await loli.sendMessage(from, {
        text: `Pesquisando a ficha de feminista @${sender_ou_n.split("@")[0]}, aguarde...`,
        mentions: [sender_ou_n]
    }, { quoted: info });

    setTimeout(async () => {
        const random = Math.floor(Math.random() * 101);
        await loli.sendMessage(from, {
            image: { url: `https://i.imgur.com/W9eiq08.jpeg` },
            caption: `O quanto *@${sender_ou_n.split("@")[0]}* pode ser feminista?\n‚Ä¢ A porcentagem de chance √© *${random}%*`,
            mentions: [sender_ou_n]
        }, { quoted: info });
    }, 7000);
    break;

case 'machista':
    await loli.sendMessage(from, {
        text: `Pesquisando a ficha de machista @${sender_ou_n.split("@")[0]}, aguarde...`,
        mentions: [sender_ou_n]
    }, { quoted: info });

    setTimeout(async () => {
        const random = Math.floor(Math.random() * 101);
        await loli.sendMessage(from, {
            image: { url: `https://i.imgur.com/w1Gmeo4.jpeg` },
            caption: `O quanto *@${sender_ou_n.split("@")[0]}* pode ser machista?\n‚Ä¢ A porcentagem de chance √© *${random}%*`,
            mentions: [sender_ou_n]
        }, { quoted: info });
    }, 7000);
    break;

case 'fiel':
    await loli.sendMessage(from, {
        text: `Pesquisando a ficha de fiel @${sender_ou_n.split("@")[0]}, aguarde...`,
        mentions: [sender_ou_n]
    }, { quoted: info });

    setTimeout(async () => {
        const random = Math.floor(Math.random() * 101);
        await loli.sendMessage(from, {
            image: { url: `https://i.imgur.com/x7Xw6Cm.jpeg` },
            caption: `O quanto *@${sender_ou_n.split("@")[0]}* pode ser Fiel?\n‚Ä¢ A porcentagem de chance √© *${random}%*`,
            mentions: [sender_ou_n]
        }, { quoted: info });
    }, 7000);
    break;
case 'lindo':
await loli.sendMessage(from, {
    text: `Pesquisando a ficha de lindo @${sender_ou_n.split("@")[0]}, aguarde...`,
    mentions: [sender_ou_n]
}, { quoted: info });

setTimeout(async () => {
    // Gera um n√∫mero aleat√≥rio de 0 a 100
    const random = Math.floor(Math.random() * 101); // Mudou de 110 para 101 para garantir 0-100
    await loli.sendMessage(from, {
        image: { url: `https://i.imgur.com/ZunNgJQ.jpeg` },
        caption: `O quanto *@${sender_ou_n.split("@")[0]}* pode ser lindo?\n‚Ä¢ A porcentagem de chance √© *${random}%*`,
        mentions: [sender_ou_n]
    }, { quoted: info });
}, 7000);
break;


case 'linda':
    // Remover as verifica√ß√µes de grupo e modo brincadeiras
    // if (!isGroup) return reply('Este comando s√≥ pode ser usado em grupos.')
    // if (!isModobn) return reply(`Ative o modo de brincadeiras para usar este comando. \nUtilize: \n${prefix}modobrincadeira 1`)

    await loli.sendMessage(from, {
        text: `Pesquisando a ficha de linda @${sender_ou_n.split("@")[0]}, aguarde...`,
        mentions: [sender_ou_n]
    }, { quoted: info });

    setTimeout(async () => {
        // Gera um n√∫mero aleat√≥rio de 0 a 100
        const random = Math.floor(Math.random() * 101);
        await loli.sendMessage(from, {
            image: { url: `https://i.imgur.com/0A18pcT.jpeg` },
            caption: `O quanto *@${sender_ou_n.split("@")[0]}* pode ser linda?\n‚Ä¢ A porcentagem de chance √© *${random}%*`,
            mentions: [sender_ou_n]
        }, { quoted: info });
    }, 7000);
    break;

//…¥·¥ã·¥¢…™…¥ </> üß∏

case 'batalha': {
    if (!isGroup) return reply('Este comando s√≥ pode ser usado em grupos.');
    if (!isModobn) return reply(`Ative o modo de brincadeiras para usar este comando. \nUtilize: \n${prefix}modobrincadeira 1`);

    // Mensagem de "aguarde" antes de mostrar o resultado
    await reply(' *Batalha ja vai come√ßar.....* ');

    const personagens = [
        { nome: 'Pikachu', gifUrl: 'https://telegra.ph/file/6bd40adb0a376e675f939.mp4' },
        { nome: 'Naruto', gifUrl: 'https://telegra.ph/file/d2f30730977deb091879e.mp4' },
        { nome: 'Goku', gifUrl: 'https://telegra.ph/file/bd5047e87a0f7ebae3ffc.mp4' },
        { nome: 'Saitama', gifUrl: 'https://telegra.ph/file/e8aff573fef04246fcd18.mp4' },
        { nome: 'Deadpool', gifUrl: 'https://telegra.ph/file/2964a8622a45c99bf9956.mp4' },
        { nome: 'Meliodas', gifUrl: 'https://telegra.ph/file/b59d9ee2a283607d50281.mp4' },
        { nome: 'Zenitsu', gifUrl: 'https://telegra.ph/file/dc2e573f4686f4966b5d4.mp4' },
        { nome: 'Thor', gifUrl: 'https://telegra.ph/file/b67bb89796934670abaf2.mp4' },
        { nome: 'Tanjiro', gifUrl: 'https://telegra.ph/file/07d10c28239f73dec90c3.mp4' },
        { nome: 'Dogao', gifUrl: 'https://telegra.ph/file/51a84339a650a74afc929.mp4' },
        { nome: 'Luffy', gifUrl: 'https://telegra.ph/file/99e2a7164fcea37396485.mp4' },
        { nome: 'Zoro', gifUrl: 'https://telegra.ph/file/3d22a58c4315c83043b1d.mp4' },
        { nome: 'Thanos', gifUrl: 'https://telegra.ph/file/fad082178f3bfbfe126fc.mp4' },
        { nome: 'Homem de ferro', gifUrl: 'https://telegra.ph/file/541d39e6ab1a0807e303f.mp4' },
        { nome: 'Mulher maravilha', gifUrl: 'https://telegra.ph/file/760ae4e17c30f73cf3f98.mp4' }
    ];
    const personagemEscolhido = personagens[Math.floor(Math.random() * personagens.length)];
    
    // Define a dificuldade aumentando o valor m√°ximo da chance de vit√≥ria
    const minChance = 1;
    const maxChance = 40;  // Reduz a chance m√°xima de vit√≥ria
    const chanceDeVitoria = Math.floor(Math.random() * (maxChance - minChance + 1)) + minChance;
    
    const resultado = Math.random() * 100 < chanceDeVitoria ? 'ganhou' : 'perdeu';
    
    const tempoBatalhaSegundos = Math.floor(Math.random() * 3600); 
    const minutos = Math.floor(tempoBatalhaSegundos / 60);
    const segundos = tempoBatalhaSegundos % 60;
    const tempoBatalhaFormatado = `${String(minutos).padStart(2, '0')}:${String(segundos).padStart(2, '0')}`;

    const batalhaMsg = `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚îÉ üé¨ **BATALHA √âPICA** üé¨
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚îÉ *Nome : ${pushname}*
‚îÉ ü§ñ *Desafiante:* ${personagemEscolhido.nome}
‚îÉ üî• **Chance de Vit√≥ria:** ${chanceDeVitoria}%
‚îÉ ‚è± *Dura√ß√£o da Batalha:* ${tempoBatalhaFormatado}
‚îÉ üéâ *Resultado:* ${resultado.toUpperCase()}!
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù`;

    await loli.sendMessage(from, {
        video: { url: personagemEscolhido.gifUrl },
        gifPlayback: true,
        caption: batalhaMsg
    }, { quoted: info });
}
break 

case 'frase':	//Dark goxtoso //Zalts apaixonado
                    rate = body.slice(6)
					var foda =['amor imaturo diz: Eu te amo porque preciso de voc√™','A vida come√ßa a cada cinco minutos','Onde as palavras falham, a m√∫sica fala','Um bom viajante n√£o tem planos','Uma vez que aceitamos nossos limites, vamos al√©m deles','O que n√£o nos mata nos fortalece','Se voc√™ caminha sozinho, voc√™ vai mais r√°pido Se voc√™s caminharem juntos, voc√™s ir√£o mais longe','Uma vida cheia de erros n√£o √© apenas mais honrosa, mas √© mais s√°bia do que uma vida gasta sem fazer nada','Nunca perca o senso de humor e aprenda a rir de suas pr√≥prias falhas','A preocupa√ß√£o √© como uma cadeira de balan√ßo, ela mant√©m voc√™ ocupado, mas n√£o leva a lugar nenhum','O homem que viveu mais tempo n√£o √© aquele que completou mais anos, mas aquele que mais experimentou a vida','Se voc√™ pode sonhar, voc√™ pode fazer','O imposs√≠vel √© o fantasma dos t√≠midos e o ref√∫gio dos covardes','O caminho que temos que percorrer 998 √© cheio de surpresas. Voc√™ nunca estar√° preparado para aqueles que o tocam, sejam eles felizes ou sombrios, porque isso faz parte de ganhar experi√™ncia. E descobrir qu√£o agrad√°veis ou infelizes s√£o aqueles que esperam por voc√™, √© algo que voc√™ nunca poder√° evitar','A felicidade n√£o √© algo que voc√™ adia para o futuro, √© algo que voc√™ projeta para o presente','Os amigos devem ser como dinheiro, que antes de precisar, voc√™ sabe o seu valor','O homem que viveu mais tempo n√£o √© aquele que completou mais anos, mas aquele que mais experimentou a vida']
					var zaltin = foda[Math.floor(Math.random() * foda.length)]
					reply(` ${zaltin} `)
					break
					
case 'recadoprowhatsapp':	//Dark goxtoso //Zalts apaixonadoüíô
                    rate = body.slice(6)
					var foda =['Felicidade √© s√≥ quest√£o de ser.','Acredite: sempre tem algo bom guardado para voc√™','Concentre-se no que est√° buscando, n√£o no que est√° deixando para tr√°s.','A vida √© muito curta pra n√£o viver sorrindo por a√≠!','Onde h√° vontade, h√° chance de dar certo!','Dance no seu ritmo! üíÉ','S√≥ voc√™ sabe o que te deixar√° feliz.','N√£o se estresse com o que est√° fora do seu controle.','Aprenda a apreciar as voltas que o mundo d√°.','Comece a se amar. O resto vir√° depois.','Maior que a tristeza de n√£o haver vencido √© a vergonha de n√£o ter lutado!','Reciprocidade, para as coisa boas. Imunidade, para as coisas ruins.','Coragem, a vida gosta de pessoas destemidas.', 'Compartilhe seus sentimentos. Nem todas as pessoas sabem adivinhar','Continue caminhando, n√£o tem problema se for devagar.','Melhor amar do que ser amargo!','N√£o corrigir nossas falhas √© o mesmo que cometer novos erros','Quando o caminho se torna duro, s√≥ os duros continuam caminhando','Florescer exige passar por todas as esta√ß√µes!','Quando as coisas simples parecem especiais, voc√™ percebe como a vida pode ser boa.','Os aprendizados deixam a vida especial.','Feliz daquele que encontra o verdadeiro amor sem as cicatrizes da decep√ß√£o']
					var zaltin = foda[Math.floor(Math.random() * foda.length)]
					reply(` ${zaltin} `)
					break
					///-------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ --------------
					case 'frasecriativas':	//Dark goxtoso //Zalts apaixonadoüíô
                    rate = body.slice(6)
					var foda =['N√£o conte os dias, viva-os! ‚òÄÔ∏èüòé','Tudo que vem, vem com algum prop√≥sito. Assim como tudo que vai, vai por uma raz√£o. üå∏üåÄ','Eu n√£o gosto de cobrar atitude de ningu√©m porque eu tenho de sobra. üòâ','Gostar, eu gosto de muita gente, mas a minha prioridade sempre ser√° eu mesma. ‚ú®','As pessoas que criticam, s√£o as mesmas que copiam. üëÄ','Aprendi que meu √∫nico limite √© a minha mente. ??','Fazendo dos meus sonhos, um objetivo. üí≠']
					var zaltin = foda[Math.floor(Math.random() * foda.length)]
					reply(` ${zaltin} `)
					break
					///-------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ ---------------------------- ¬ª ¬´¬ª ¬´ --------------
					case 'frasebonita':	//Dark goxtoso //Zalts apaixonado
                    rate = body.slice(6)
					var foda =['Viver em paz √© um luxo. √â saber que, apesar dos pesares, ficar bem √© prioridade. ‚ú®','Somos ferramentas para a vida seguir em frente. üåé','Ao inv√©s de pensar nas marcas que a vida deixa em voc√™, reflita: Quais as marcas voc√™ est√° deixando na vida? üí≠','Segue seu cora√ß√£o, tudo vai dar certo. ‚ô•Ô∏è','Permita-se sentir tudo que est√° dentro de voc√™! ‚ú®','Cada etapa da vida, lhe demandar√° uma vers√£o mais forte de voc√™. üçÉ','A vida √© como uma rosa, cada p√©tala um sonho, cada espinho uma realidadeüå∑üôâ','A arma dos fracos √© criticar os fortes. A arma dos fortes √© ignorar os fracos!üëå','Pare de olhar para tr√°s. Voc√™ j√° sabe onde esteve, agora precisa saber pra onde vaiüåôüçÉ','S√≥ faz sentido o que te faz sentir.']
					var zaltin = foda[Math.floor(Math.random() * foda.length)]
					reply(` ${zaltin} `)
					break


case 'antiaudio':
if (!isGroup) return reply(msg.grupo)
if (!isGroupAdmins) return reply(msg.adm)
if (!isBotGroupAdmins) return reply(msg.botadm)
if (args.length < 1) return reply('Hmmmm')
if (Number(args[0]) === 1) {
if (isAntiAudio) return reply('Ja esta ativo')
antiaudio.push(from)
fs.writeFileSync('./arquivos/antis/antiaudio.json', JSON.stringify(antiaudio))
reply('Ativou com sucesso o recurso de anti audio neste grupo‚úîÔ∏è')
} else if (Number(args[0]) === 0) {
if (!isAntiAudio) return reply('Ja esta Desativado')  
antiaudio.splice(from, 1)
fs.writeFileSync('./arquivos/antis/antiaudio.json', JSON.stringify(antiaudio))
reply('Desativou com sucesso o recurso de anti audio neste grupo‚úîÔ∏è')
} else {
reply('1 para ativar, 0 para desativar')
}
break
case 'perfil2': //its morais
try {
ppimg = await eren.profilePictureUrl(`${sender.split('@')[0]}@c.us`, 'image')
} catch {
ppimg = 'https://telegra.ph/file/b5427ea4b8701bc47e751.jpg'
}
try {
var conselho = palavrasc[Math.floor(Math.random() * palavrasc.length)]
const nivelgado = ['1','2','3','4','5','6','7','8','9']
const nivelgado2 = ['1','2','3','4','5','6','7','8','9'] 
const nivelgador = nivelgado[Math.floor(Math.random() * (nivelgado.length))]
const nivelgado2r = nivelgado2[Math.floor(Math.random() * (nivelgado2.length))] 
const puta = ['1','2','3','4','5','6','7','8','9']
const puta2 = ['1','2','3','4','5','6','7','8','9'] 
const putar = puta[Math.floor(Math.random() * (puta.length))]
const putar2 = puta2[Math.floor(Math.random() * (puta2.length))] 
const gostosura = ['1','2','3','4','5','6','7','8','9']
const gostosura2 = ['1','2','3','4','5','6','7','8','9'] 
const gostosurar = gostosura[Math.floor(Math.random() * (gostosura.length))]
const gostosurar2 = gostosura2[Math.floor(Math.random() * (gostosura2.length))] 
gadop = `${Math.floor(Math.random() * 100)}`
const programa = Math.ceil(Math.random() * 10000)
loli.sendMessage(from, {image: {url: ppimg}, caption: mess.profileInformation(pushname, sender, info, putar, putar2, gostosurar, gostosurar2, nivelgador, nivelgado2r, programa, conselho), mentions: [sender]}, {quoted: sasah})
} catch (e) {
console.log(e)
}
break				
case 'perfil':
try {
ppimg = await loli.profilePictureUrl(`${sender.split('@')[0]}@c.us`, 'image')
} catch {
ppimg = 'https://i0.wp.com/www.gambarunik.id/wp-content/uploads/2019/06/Top-Gambar-Foto-Profil-Kosong-Lucu-Tergokil-.jpg'
}

var conselho = palavras[Math.floor(Math.random() * palavras.length)]
const nivelgado = ['1','2','3','4','5','6','7','8','9']
const nivelgado2 = ['1','2','3','4','5','6','7','8','9'] 
const nivelgador = nivelgado[Math.floor(Math.random() * (nivelgado.length))]
const nivelgado2r = nivelgado2[Math.floor(Math.random() * (nivelgado2.length))] 
const puta = ['1','2','3','4','5','6','7','8','9']
const puta2 = ['1','2','3','4','5','6','7','8','9'] 
const putar = puta[Math.floor(Math.random() * (puta.length))]
const putar2 = puta2[Math.floor(Math.random() * (puta2.length))] 
const gostosura = ['1','2','3','4','5','6','7','8','9']
const gostosura2 = ['1','2','3','4','5','6','7','8','9'] 
const gostosurar = gostosura[Math.floor(Math.random() * (gostosura.length))]
const gostosurar2 = gostosura2[Math.floor(Math.random() * (gostosura2.length))] 
var biio = await loli.fetchStatus
var biooo = bio.status
gadop = `${Math.floor(Math.random() * 100)}`
const programa = Math.ceil(Math.random() * 10000)
const dptr = `
‚ùØ  ‚ùí„Äé${botName}„Äè‚ùí  ‚ùÆ


‚ïë‚ùØ         „Äò SEU PERFIL „Äô

‚î†‚ùØ ‚ùí NOME: ${pushname}
‚î†‚ùØ ‚ùí ${!isGroup ? `PRIVADO: ${pushname}` :  `GRUPO: ${groupName}`}
‚î†‚ùØ ‚ùí GADISSE: ${nivelgador}${nivelgado2r}%
‚î†‚ùØ ‚ùí PUTARIA: ${putar}${putar2}%
‚î†‚ùØ ‚ùí GOSTOSURA: ${gostosurar}${gostosurar2}% 
‚î†‚ùØ ‚ùí TELEFONE: ${m.key.id.length > 21 ? 'Android üëæ' : m.key.id.substring(0, 2) == '3A' ? 'IOS üçéüçè' : 'Zap zap web üñ•Ô∏èüíª'}
‚î†‚ùØ ‚ùí PROGRAMA: R$${programa}

‚ùØ         „Äò MOTIVACIONAL „Äô

${enviarmen}`
daftarimg = await getBuffer(ppimg)
loli.sendMessage(from, {image: daftarimg, caption: dptr}, {quoted: info})
break

          case 'tempo':
          if(!isPremium) return reply(msg.premium)
            loli.sendMessage(from, { react: { text: `üì°`, key: info.key } })
            if (!q) return reply(`Qual o nome da sua cidade? Exemplo: /tempo Sao Paulo caso ter algum ponto retire pra nao da erro.`)
            cidade = body.slice(7)
            clima = await axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${q}&appid=f5c0840c2457fbb64188a6d4be05618f&units=metric&lang=pt_br`)
            if (clima.error) return reply(resposta.erro)
            jr = `üåû Temperatura agora: ${clima.data.main.temp}¬∫C
  üèôÔ∏è Cidade: ${clima.data.name}
  üî• Temperatura M√°xima: ${clima.data.main.temp_max}¬∞C
  ‚ùÑ Temperatura M√≠nima: ${clima.data.main.temp_min}¬∞C
  üå¶ Clima: ${clima.data.weather[0].description}
  üíß Umidade de ar: ${clima.data.main.humidity}% 
  üå´ Ventos: ${clima.data.wind.speed}  
  
  Solicitado por: ${pushname}`
            await loli.sendMessage(from, { text: jr }, { quoted: info, contextInfo: { "mentionedJid": jr } })
            break
            
          case 'emojimix': {
            if (!q) return reply(`Exemplo : ${prefix + command} üòÖ+ü§î`)
            reply('SER N√ÉO FOR TENTA COM OUTRO... ?')
            let [emoji1, emoji2] = q.split`+`
            var em = await fetchJson(`https://tenor.googleapis.com/v2/featured?key=AIzaSyAyimkuYQYF_FXVALexPuGQctUWRURdCYQ&contentfilter=high&media_filter=png_transparent&component=proactive&collection=emoji_kitchen_v5&q=${encodeURIComponent(emoji1)}_${encodeURIComponent(emoji2)}`)
            for (let res of em.results) {
              templateMassage = {
                image: {
                  url: `${res.url}`,
                  quoted: live
                }
              }
              loli.sendMessage(from, templateMassage, { quoted: live })
            }
          }
            break
            
         case 'punheteiro':
    if (!isModobn) return reply(`Este tipo de comando s√≥ pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se voc√™ for, apenas digite ${prefix}modobrincadeira 1`);  
    if (!isGroup) return reply(`S√≥ pode ser utilizado este comando em grupo.`);

    // Se houver men√ß√£o, define blamention_id; caso contr√°rio, usa o sender
    if (budy.includes("@")) {
        blamention_id = args.join(" ").replace("@", "") + "@s.whatsapp.net"; // Atribui o valor √† vari√°vel j√° definida
    } else {
        blamention_id = sender; // Se n√£o houver men√ß√£o, usa o sender
    }

    const aletli = `${Math.floor(Math.random() * 105)}`;
    reply(`@${blamention_id.split("@")[0]} Aguarde, confiscando sua porcentagem...`);
    
    await delay(7000); // Aguardar 7 segundos

    reply(`„Äå @${blamention_id.split("@")[0]} „ÄçSua porcentagem de punheteiro √© de: ${aletli}%`);
    break;
            
          case "arma": {
            bancoDeDados = {
              "M1887": {
                "nome": "M1887",
                "descri√ß√£o": "Uma espingarda de cano duplo que inflige danos massivos em curta dist√¢ncia.",
                "dano": "Alto",
                "alcance": "Curto",
                "taxa_de_disparo": "Baixa",
                "capacidade_do_pente": 2
              },
              "AK47": {
                "nome": "AK47",
                "descri√ß√£o": "Rifle de assalto de alta pot√™ncia com alta taxa de disparo e precis√£o moderada.",
                "dano": "Moderado",
                "alcance": "M√©dio",
                "taxa_de_disparo": "Alta",
                "capacidade_do_pente": 30
              },
              "AWM": {
                "nome": "AWM",
                "descri√ß√£o": "Rifle de precis√£o capaz de derrubar inimigos com um √∫nico tiro.",
                "dano": "Extremo",
                "alcance": "Longo",
                "taxa_de_disparo": "Baixa",
                "capacidade_do_pente": 5
              },
              "Groza": {
                "nome": "Groza",
                "descri√ß√£o": "Rifle de assalto altamente poderoso com uma taxa de disparo e precis√£o excepcionais.",
                "dano": "Alto",
                "alcance": "M√©dio",
                "taxa_de_disparo": "Muito alta",
                "capacidade_do_pente": 30
              },
              "UMP45": {
                "nome": "UMP45",
                "descri√ß√£o": "Submetralhadora de alta cad√™ncia de tiro, equilibrada em termos de dano e controle de recuo.",
                "dano": "Moderado",
                "alcance": "Curto",
                "taxa_de_disparo": "Alta",
                "capacidade_do_pente": 25
              },
              "M1014": {
                "nome": "M1014",
                "descri√ß√£o": "Uma espingarda de combate pr√≥xima com uma taxa de disparo e dano impressionantes.",
                "dano": "Muito alto",
                "alcance": "Curto",
                "taxa_de_disparo": "Baixa",
                "capacidade_do_pente": 6
              },
              "M60": {
                "nome": "M60",
                "descri√ß√£o": "Metralhadora com alto poder de fogo, ideal para suprimir inimigos e combates a m√©dia dist√¢ncia.",
                "dano": "Alto",
                "alcance": "M√©dio",
                "taxa_de_disparo": "Baixa",
                "capacidade_do_pente": 60
              },
              "XM8": {
                "nome": "XM8",
                "descri√ß√£o": "Rifle de assalto de alta efici√™ncia, com √≥timo equil√≠brio entre dano, alcance e taxa de disparo.",
                "dano": "Moderado",
                "alcance": "M√©dio",
                "taxa_de_disparo": "Alta",
                "capacidade_do_pente": 30
              },
              "SCAR": {
                "nome": "SCAR",
                "descri√ß√£o": "Rifle de assalto confi√°vel, com boa precis√£o e controle de recuo.",
                "dano": "Moderado",
                "alcance": "M√©dio",
                "taxa_de_disparo": "M√©dia",
                "capacidade_do_pente": 30
              },
              "M4A1": {
                "nome": "M4A1",
                "descri√ß√£o": "Rifle de assalto vers√°til e equilibrado, adequado para v√°rias situa√ß√µes de combate.",
                "dano": "Moderado",
                "alcance": "M√©dio",
                "taxa_de_disparo": "M√©dia",
                "capacidade_do_pente": 30
              },
              "SVD": {
                "nome": "SVD",
                "descri√ß√£o": "Rifle de precis√£o semi-autom√°tico, com √≥timo alcance e dano significativo.",
                "dano": "Alto",
                "alcance": "Longo",
                "taxa_de_disparo": "Baixa",
                "capacidade_do_pente": 10
              },
              "MP5": {
                "nome": "MP5",
                "descri√ß√£o": "Submetralhadora compacta e precisa, adequada para combates em espa√ßos confinados.",
                "dano": "Moderado",
                "alcance": "Curto",
                "taxa_de_disparo": "Alta",
                "capacidade_do_pente": 30
              },
              "SPAS12": {
                "nome": "SPAS12",
                "descri√ß√£o": "Uma espingarda de a√ß√£o por bombeamento, eficaz a curta dist√¢ncia com alto dano.",
                "dano": "Alto",
                "alcance": "Curto",
                "taxa_de_disparo": "Baixa",
                "capacidade_do_pente": 6
              },
              "KAR98K": {
                "nome": "KAR98K",
                "descri√ß√£o": "Rifle de precis√£o de a√ß√£o por ferrolho, com excelente precis√£o e dano letal.",
                "dano": "Extremo",
                "alcance": "Longo",
                "taxa_de_disparo": "Baixa",
                "capacidade_do_pente": 5
              },
              "M249": {
                "nome": "M249",
                "descri√ß√£o": "Metralhadora leve com grande capacidade de muni√ß√£o, ideal para controle de √°rea.",
                "dano": "Alto",
                "alcance": "M√©dio",
                "taxa_de_disparo": "Baixa",
                "capacidade_do_pente": 100
              },
              "Thompson": {
                "nome": "Thompson",
                "descri√ß√£o": "Submetralhadora cl√°ssica de alta cad√™ncia de tiro e bom controle de recuo.",
                "dano": "Moderado",
                "alcance": "Curto",
                "taxa_de_disparo": "Alta",
                "capacidade_do_pente": 30
              },
              "VSS": {
                "nome": "VSS",
                "descri√ß√£o": "Rifle de assalto silencioso com escopo integrado e baixo recuo.",
                "dano": "Moderado",
                "alcance": "M√©dio",
                "taxa_de_disparo": "M√©dia",
                "capacidade_do_pente": 15
              },
              "MP40": {
                "nome": "MP40",
                "descri√ß√£o": "Submetralhadora de alta cad√™ncia de tiro e bom controle de recuo.",
                "dano": "Moderado",
                "alcance": "Curto",
                "taxa_de_disparo": "Muito alta",
                "capacidade_do_pente": 30
              },
              "AUG": {
                "nome": "AUG",
                "descri√ß√£o": "Rifle de assalto com excelente precis√£o, alcance e taxa de disparo.",
                "dano": "Moderado",
                "alcance": "M√©dio",
                "taxa_de_disparo": "Alta",
                "capacidade_do_pente": 30
              },
              "G18": {
                "nome": "G18",
                "descri√ß√£o": "Pistola autom√°tica com alta taxa de disparo, ideal para combate pr√≥ximo.",
                "dano": "Moderado",
                "alcance": "Curto",
                "taxa_de_disparo": "Muito alta",
                "capacidade_do_pente": 20
              },
              "P90": {
                "nome": "P90",
                "descri√ß√£o": "Submetralhadora de alta cad√™ncia de tiro e capacidade de muni√ß√£o elevada.",
                "dano": "Moderado",
                "alcance": "Curto",
                "taxa_de_disparo": "Muito alta",
                "capacidade_do_pente": 50
              },
              "Desert Eagle": {
                "nome": "Desert Eagle",
                "descri√ß√£o": "Pistola de alta pot√™ncia e precis√£o, com uma grande parada de energia.",
                "dano": "Alto",
                "alcance": "Curto",
                "taxa_de_disparo": "M√©dia",
                "capacidade_do_pente": 7
              },
              "Vector": {
                "nome": "Vector",
                "descri√ß√£o": "Submetralhadora compacta com alta cad√™ncia de tiro e boa precis√£o.",
                "dano": "Moderado",
                "alcance": "Curto",
                "taxa_de_disparo": "Muito alta",
                "capacidade_do_pente": 30
              },
              "M14": {
                "nome": "M14",
                "descri√ß√£o": "Rifle semiautom√°tico de alta precis√£o, ideal para combates de longa dist√¢ncia.",
                "dano": "Alto",
                "alcance": "Longo",
                "taxa_de_disparo": "Baixa",
                "capacidade_do_pente": 10
              },
              "CG15": {
                "nome": "CG15",
                "descri√ß√£o": "Rifle de sinaliza√ß√£o que causa dano explosivo aos inimigos.",
                "dano": "Moderado",
                "alcance": "M√©dio",
                "taxa_de_disparo": "Baixa",
                "capacidade_do_pente": 1
              },
              "USP": {
                "nome": "USP",
                "descri√ß√£o": "Pistola de m√©dio alcance com boa precis√£o e taxa de disparo.",
                "dano": "Moderado",
                "alcance": "M√©dio",
                "taxa_de_disparo": "M√©dia",
                "capacidade_do_pente": 12
              },
              "M1873": {
                "nome": "M1873",
                "descri√ß√£o": "Rev√≥lver de a√ß√£o simples com alto dano, mas taxa de disparo baixa.",
                "dano": "Alto",
                "alcance": "Curto",
                "taxa_de_disparo": "Baixa",
                "capacidade_do_pente": 2
              },
              "AN94": {
                "nome": "AN94",
                "descri√ß√£o": "Rifle de assalto com um modo de disparo especial que aumenta a taxa de disparo.",
                "dano": "Moderado",
                "alcance": "M√©dio",
                "taxa_de_disparo": "Alta",
                "capacidade_do_pente": 30
              },
              "M79": {
                "nome": "M79",
                "descri√ß√£o": "Lan√ßador de granadas que causa danos em √°rea com alto poder de explos√£o.",
                "dano": "Extremo",
                "alcance": "Longo",
                "taxa_de_disparo": "Baixa",
                "capacidade_do_pente": 1
              },
              "M14": {
                "nome": "M14",
                "descri√ß√£o": "Rifle semiautom√°tico de alta precis√£o, ideal para combates de longa dist√¢ncia.",
                "dano": "Alto",
                "alcance": "Longo",
                "taxa_de_disparo": "Baixa",
                "capacidade_do_pente": 10
              },
              "CG15": {
                "nome": "CG15",
                "descri√ß√£o": "Rifle de sinaliza√ß√£o que causa dano explosivo aos inimigos.",
                "dano": "Moderado",
                "alcance": "M√©dio",
                "taxa_de_disparo": "Baixa",
                "capacidade_do_pente": 1
              },
              "USP": {
                "nome": "USP",
                "descri√ß√£o": "Pistola de m√©dio alcance com boa precis√£o e taxa de disparo.",
                "dano": "Moderado",
                "alcance": "M√©dio",
                "taxa_de_disparo": "M√©dia",
                "capacidade_do_pente": 12
              },
              "M1873": {
                "nome": "M1873",
                "descri√ß√£o": "Rev√≥lver de a√ß√£o simples com alto dano, mas taxa de disparo baixa.",
                "dano": "Alto",
                "alcance": "Curto",
                "taxa_de_disparo": "Baixa",
                "capacidade_do_pente": 2
              },
              "AN94": {
                "nome": "AN94",
                "descri√ß√£o": "Rifle de assalto com um modo de disparo especial que aumenta a taxa de disparo.",
                "dano": "Moderado",
                "alcance": "M√©dio",
                "taxa_de_disparo": "Alta",
                "capacidade_do_pente": 30
              },
              "M79": {
                "nome": "M79",
                "descri√ß√£o": "Lan√ßador de granadas que causa danos em √°rea com alto poder de explos√£o.",
                "dano": "Extremo",
                "alcance": "Longo",
                "taxa_de_disparo": "Baixa",
                "capacidade_do_pente": 1
              },
              "M82B": {
                "nome": "M82B",
                "descri√ß√£o": "Rifle de precis√£o de a√ß√£o por ferrolho com alto dano e capacidade de penetra√ß√£o.",
                "dano": "Extremo",
                "alcance": "Longo",
                "taxa_de_disparo": "Baixa",
                "capacidade_do_pente": 5
              },
              "P90": {
                "nome": "P90",
                "descri√ß√£o": "Submetralhadora de alta cad√™ncia de tiro e capacidade de muni√ß√£o elevada.",
                "dano": "Moderado",
                "alcance": "Curto",
                "taxa_de_disparo": "Muito alta",
                "capacidade_do_pente": 50
              },
              "Desert Eagle": {
                "nome": "Desert Eagle",
                "descri√ß√£o": "Pistola de alta pot√™ncia e precis√£o, com uma grande parada de energia.",
                "dano": "Alto",
                "alcance": "Curto",
                "taxa_de_disparo": "M√©dia",
                "capacidade_do_pente": 7
              },
              "M1887": {
                "nome": "M1887",
                "descri√ß√£o": "Espingarda de a√ß√£o por ferrolho com alto dano em combates de curta dist√¢ncia.",
                "dano": "Extremo",
                "alcance": "Curto",
                "taxa_de_disparo": "Baixa",
                "capacidade_do_pente": 2
              },
              "XM8": {
                "nome": "XM8",
                "descri√ß√£o": "Rifle de assalto com boa precis√£o e cad√™ncia de tiro.",
                "dano": "Moderado",
                "alcance": "M√©dio",
                "taxa_de_disparo": "M√©dia",
                "capacidade_do_pente": 30
              },
              "KAR98K": {
                "nome": "KAR98K",
                "descri√ß√£o": "Rifle de precis√£o de a√ß√£o por ferrolho com alto dano e precis√£o.",
                "dano": "Extremo",
                "alcance": "Longo",
                "taxa_de_disparo": "Baixa",
                "capacidade_do_pente": 5
              },
              "M79": {
                "nome": "M79",
                "descri√ß√£o": "Lan√ßador de granadas que causa danos em √°rea com alto poder de explos√£o.",
                "dano": "Extremo",
                "alcance": "Longo",
                "taxa_de_disparo": "Baixa",
                "capacidade_do_pente": 1
              },
              "MP40": {
                "nome": "MP40",
                "descri√ß√£o": "Submetralhadora de alta cad√™ncia de tiro e bom controle de recuo.",
                "dano": "Moderado",
                "alcance": "Curto",
                "taxa_de_disparo": "Muito alta",
                "capacidade_do_pente": 30
              },
              "M14": {
                "nome": "M14",
                "descri√ß√£o": "Rifle semiautom√°tico de alta precis√£o, ideal para combates de longa dist√¢ncia.",
                "dano": "Alto",
                "alcance": "Longo",
                "taxa_de_disparo": "Baixa",
                "capacidade_do_pente": 10
              }
            }


            const armaPesquisada = args.join(" "); // Substitua pelo valor desejado
            let resultado = null;

            for (const arma in bancoDeDados) {
              if (arma.toLowerCase() === armaPesquisada.toLowerCase()) {
                resultado = bancoDeDados[arma];
                break;
              }
            }

            if (resultado) {
              reply(`*${resultado.nome}*\n*${resultado.descri√ß√£o}*\n\n*Dano: ${resultado.dano}*\n\n*Alcance: ${resultado.alcance}*\n\n*Taxa de Disparo: ${resultado.taxa_de_disparo}*\n\n*Capacidade do Pente: ${resultado.capacidade_do_pente}*`);
            } else {
              reply('Erro: Arma n√£o encontrada no banco de dados.');
            }
          } break
          
         case 'bc': case 'bcgroup': case 'transmitir': case 'transmiss√£o':
         reply(`esse comando causa ban infelizmente n√£o pode ser usado`)
            break


                    case 'walpaperanime':
            {
              json = JSON.parse(fs.readFileSync('./arquivos/wall.json').toString())
              random = json[Math.floor(Math.random() * json.length)]
              /*
              let proximo = [
                {buttonId: `${prefix + command}`, buttonText: {displayText: 'üçâPROXIMOüçâ'}, type: 1},
                ]
                */
              templateMassage = {
                image: {
                  url: random,
                  quoted: info
                },
                caption: `${command}`,
                footer: `${botName}`,
              }
              loli.sendMessage(from, templateMassage)
            }
            break
            
                    case 'animememe':
            {
              json = JSON.parse(fs.readFileSync('./arquivos/animememe.json').toString())
              random = json[Math.floor(Math.random() * json.length)]
              /*
              let proximo = [
                {buttonId: `${prefix + command}`, buttonText: {displayText: 'üçâPROXIMOüçâ'}, type: 1},
                ]
                */
              templateMassage = {
                image: {
                  url: random,
                  quoted: info
                },
                caption: `${command}`,
                footer: `${botName}`,
              }
              loli.sendMessage(from, templateMassage)
            }
            break
            
          case "adivinha√ß√£o": case 'advh':
            if (!isGroup) return reply(`Comando s√≥ para grupos.`)
            if (args.length < 1) return reply(`Exemplo: ${prefix} adivinhacao 50`)
            const num = Math.floor(Math.random() * 100) + 1
            const guess = parseInt(args[0])
            if (isNaN(guess)) return reply('Digite um n√∫mero v√°lido.')
            if (guess < 1 || guess > 100) return reply('O n√∫mero deve estar entre 1 e 100.')
            if (guess === num) {
              const premio = Math.floor(Math.random() * 50) + 1
              reply(`Parab√©ns, voc√™ acertou! O n√∫mero era ${num}.\nVoc√™ ganhou ${premio} em dinheiro.`)
            } else {
              reply(`Que pena, voc√™ errou. n√∫mero era ${num}. Tente novamente.`)
            }
            break
            
            case 'apps':
loli.sendMessage(from, {image: fs.readFileSync('./loli/image/menu.jpg'), caption: `



1¬∞ ENCONTREI TV
https://encontrei.tv/assistir/filmes-online-2/


‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚ÜóÔ∏è‚ÜòÔ∏è



2¬∞ REDE CANAIS
https://redecanais.zip/eu-sou-franky-dublado-lista-de-episodios_3ef81a600.html

(ESSE E MELHOR NO COMPUTADOR)


‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚ÜóÔ∏è‚ÜòÔ∏è


2¬∞ TOP-FLIX
 https://m.topflix.fm/


‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚ÜóÔ∏è‚ÜòÔ∏è



3¬∞ FILMELIER
https://www.filmelier.com/br/

‚ú∞‚ú∞‚ú∞‚ú∞‚ú∞




`},{quoted: info})

break

case 'gpofc':
loli.sendMessage(from, { react: { text: `‚≠ê`, key: m.key }})
reply(`https://chat.whatsapp.com/IiBxOEZcwHkG5G9FsYdJ2u`)
break

          case 'ddd':
            if (!isPremium) return reply(msg.vip)
            if (args.length < 1) return reply(`Use ${prefix + command} 21`)
            ddd = body.slice(5)
            ddds = await axios.get(`https://brasilapi.com.br/api/ddd/v1/${ddd}`)
            dddlist = `LISTA DE CIDADES ${ddds.data.state} COM ESTE DDD ${q}~\n\n`
            for (let i = 0; i < ddds.data.cities.length; i++) { dddlist += `${i + 1} ‚™ß *${ddds.data.cities[i]}*\n` }
            loli.sendMessage(from, { text: dddlist }, { quoted: info })
            break        
 
          case "imgpralink2":
            try {
              if (isQuotedImage) {
                boij = isQuotedImage || isQuotedVideo ? JSON.parse(JSON.stringify(info).replace("quotedM", "m")).message.extendedTextMessage.contextInfo.message.imageMessage : info
                const fetch = require('node-fetch');
                const FormData = require('form-data');
                const fs = require('fs');
                async function uploadImageToTelegraph(imageBuffer) {
                  const form = new FormData();
                  form.append('file', imageBuffer, { filename: 'image.jpg' });

                  const response = await fetch('https://telegra.ph/upload', {
                    method: 'POST',
                    body: form,
                  });
                  const data = await response.json();
                  if (data && data[0] && data[0].src) {
                    return 'https://telegra.ph' + data[0].src;
                  } else {
                    throw new Error('Failed to retrieve the image URL from the response.');
                  }
                }
                const owgi = await getFileBuffer(boij, "image");
                const imageUrl = await uploadImageToTelegraph(owgi);
                reply(imageUrl);
              } else {
                reply('marque a ft')
              }
            } catch (e) {
              console.log(e)
              reply('error...')
            }
            break
       
          case 'fotobot':
            if (!isCreator) return reply(msg.dono)
            if (!isQuotedImage) return reply(`Envie fotos com legendas ${prefix}fotobot ou tags de imagem que j√° foram enviadas`)
            buff = await getFileBuffer(info.message.extendedTextMessage.contextInfo.quotedMessage.imageMessage, 'image')
            await loli.updateProfilePicture(numeroBot, buff)
            reply('Obrigado pelo novo perfil vlw')
            break        

case 'ct1':
if (!isGroup) return reply(msg.grupo)
if (!isCreator && !isGroupAdmins) return reply(msg.adm)
if (!isBotGroupAdmins) return reply(msg.botadm)
if (isAntiCtt) return reply('Ja esta ativo')
antictt.push(from)
fs.writeFileSync('./arquivos/antis/antictt.json', JSON.stringify(antictt))
reply('üåÄ Ativou com sucesso o recurso de anticontato neste grupo üìù')
break 

          case 'antilinkgp':
          case 'antilink':
            if (!isGroup) return reply(msg.grupo)
            if (!isGroupAdmins) return reply(msg.adm)
            if (!isBotGroupAdmins) return reply(msg.botadm)
            if (Number(args[0]) === 1) {
              if (isAntilinkgp) return reply('Ja esta ativo')
              antilinkgp.push(from)
              fs.writeFileSync('./arquivos/antis/antilinkgp.json', JSON.stringify(antilinkgp))
              reply('Ativou com sucesso o recurso de antilinkgp')
            } else if (Number(args[0]) === 0) {
              if (!isAntilinkgp) return reply('Ja esta Desativado')
              pesquisar = from
              processo = antilinkgp.indexOf(pesquisar)
              while (processo >= 0) {
                antilinkgp.splice(processo, 1)
                processo = antilinkgp.indexOf(pesquisar)
              }
              fs.writeFileSync('./arquivos/antis/antilinkgp.json', JSON.stringify(antilinkgp))
              reply('Desativou com sucesso o recurso de antilink de grupo')
            } else {
            }
            break
case 'ct0':
if (!isGroup) return reply(msg.grupo)
if (!isCreator && !isGroupAdmins) return reply(msg.adm)
if (!isBotGroupAdmins) return reply(msg.botadm)
if (!isAntiCtt) return reply('Ja esta Desativado')
pesquisar = from
processo = antictt.indexOf(pesquisar)
while(processo >= 0){
antictt.splice(processo, 1)
processo = antictt.indexOf(pesquisar)
}
fs.writeFileSync('./arquivos/antis/antictt.json', JSON.stringify(antictt))
reply('‚ÄºÔ∏è Desativou com sucesso o recurso de anticontato neste grupo‚úîÔ∏è')
break
case 'Deezer':
case 'deezer':
//Requerir Um Nome De Uma M√∫sica 
if (!q) return reply(`‡ß°‡ß¢Õ°Õúùî¨‚ÉùExemplo: ${prefix}Deezer –ì—Ä—É—Å—Ç–Ω–∞—è –°—É–∫–∞`);
try {
//Pesquisar Na Api Do Deezer
searchMusicDeezerFind = (await axios.get(`https://api.deezer.com/search?q=${encodeURIComponent(q)}`)).data;
//Caso N√£o Retorne Nada, O Bot Vai Avisar
if (searchMusicDeezerFind.length == 0) return reply(`N√£o consegui encontrar q m√∫sica informada!`);
//Nome Do Artista
const artistName = searchMusicDeezerFind.data[0].artist.name;
//Nome Da M√∫sica
const songTitle = searchMusicDeezerFind.data[0].title;
//Buscar A M√∫sica No M√≥dulo Do YouTube
ABC = await yts(`${artistName} ${songTitle}`);
//Pegar O Primeiro Resultado
informationVideoYT = ABC.videos[0];
//Criar O Modelo De Mensagem 
const deezerMessage = `„Äò ùêÉùêÑùêÑùêôùêÑùêë ùêåùêéùêÉùêîùêãùêÑ „Äô

M√∫sica: ${songTitle}
Artista: ${artistName}
√Ålbum: ${searchMusicDeezerFind.data[0].album.title}
Dura√ß√£o: ${searchMusicDeezerFind.data[0].duration} Segundos
M√∫sica Expl√≠cita: ${searchMusicDeezerFind.data[0].explicit_lyrics ? 'Sim' : 'N√£o'}
Link Do Perfil: ${searchMusicDeezerFind.data[0].artist.link}
link Do √Ålbum: ${searchMusicDeezerFind.data[0].album.tracklist.replace('api.', '')}
Link: ${searchMusicDeezerFind.data[0].link}`;
//Enviar A Foto Retornada Junto Com O Texto
await loli.sendMessage(from, { image: { url: informationVideoYT.thumbnail }, caption: deezerMessage });
//Enviar Uma Pr√©via Da M√∫sica 
await loli.sendMessage(from, { audio: { url: searchMusicDeezerFind.data[0].preview }, mimetype: 'audio/mpeg'}, {quoted: info}).catch(e => { console.log(e) });
} catch (e) {
//Caso Ocorra Erros Retornar
if (String(e).includes("invalid json response body at")) {
console.log("Hmmm, Creio Que A Api Do Deezer Caiu. Tente Novamente Mais Tarde");
} else {
//Jogar Os Erros No Console 
console.log(e);
//Enviar A Mensagem De Erro
reply(enviar.msg.error);
}
}
break;
case 'happymod':
case 'happy': //By Luan and Tzn
    if (!q) return reply('Nome do app?');
    const url0 = `https://happymod.com/search.html?q=${q}`;    
    axios(url0)
      .then(response => {
        const html = response.data;
        const $ = cheerio.load(html);
        const noticias = [];    
        $('.pdt-app-h3').each((index, element) => {
            const titulo = $(element).text().trim();
            const url = 'https://happymod.com/' + $(element).find('a').attr('href');
            const imagem = $(element).find('img').attr('src');
            const titu = $(element).next().find('.pdt-list-num').text().trim(); 
            noticias.push({ titulo, url, imagem, titu });
        });
        if (noticias.length === 0) return reply('Nenhum resultado encontrado.');//By Luan and Tzn
        let rapaz = `Ol√°, ${pushname}. Aqui est√° os aplicativos encontrados:\n\n`;
        noticias.forEach(noticia => {
          rapaz += `üéÆ *${noticia.titulo}*\n` + 
                   `üîó [Link](${noticia.url})\n` + 
                   `‚≠ê ${noticia.titu}\n\n`;  
        });//By Luan and Tzn
        loli.sendMessage(from, { text: rapaz }, { quoted: info });
        console.log(noticias);
      })
      .catch(error => {
        console.error(`Erro: ${error}`);
        reply('broxou,pae');
      });//By Luan and Tzn
    break;
case 'Aptoide':
case 'aptoide':
if (!q) return reply(`‚Ä¢ Insira O Nome Do Aplicativo Juntamente Ao Comando!`)
try {
//Pesquisar O App No Aptoide
const aptoide = await axios.get(`https://ws75.aptoide.com/api/7/apps/search?query=${encodeURIComponent(q)}&trusted=true`);
//Caso N√£o Ache Nenhum App, Retornar 
if (aptoide.data.datalist.total == 0) return reply('‚Ä¢ N√£o Encontrei O Aplicativo Que Voc√™ Est√° Pesquisando!');
//Criando A Mensagem
description = (getApk, sizeApk) => `Í™∂Õ¢ÕúùêãùêÄùêÉùêò ùêÅùêéùêì - ùêÉùêéùêñùêçùêãùêéùêÄùêÉ‚ÄçÍ´Ç

‚ùØ Nome: ${getApk.name}
‚ùØ Package: ${getApk.package}
‚ùØ Tamanho Do App: ${sizeApk}MB
‚ùØ Vers√£o Do App: ${getApk.file.vername}
‚ùØ Link: ${getApk.file.path}`;
//Pegar O Buffer Da Imagem
photoAptoideBuffer = await(await fetch(aptoide.data.datalist.list[0].graphic)).buffer(),
//Enviar A Imagem Com As Informa√ß√µes
loli.sendMessage(from, {image: photoAptoideBuffer, caption: description(aptoide.data.datalist.list[0], (aptoide.data.datalist.list[0].size / 1048576).toFixed(1))})
//Enviar O Documento Do Aplicativo
loli.sendMessage(from, {document: {url: aptoide.data.datalist.list[0].file.path}, mimetype: "application/vnd.android.package-archive", fileName: `${aptoide.data.datalist.list[0].name}.apk`, caption: "Aqui Est√° O Aplicativo: "+q}, {quoted: info}) // Envia o app
} catch(e) {
reply('Erro Ao Baixar O Apk!')
console.log(e)
}
break;
case 'vasconews': 
    try {
        var nunudatav = await axios.get('https://vasco.com.br/noticias-home/')
        var nunu$v = cheerio.load(nunudatav.data)
        var nununoticiasv = []
        nunu$v('.box-noticias').each((index, nunulementv) => {
            var nunuezbtv = nunu$v(nunulementv).find('h3').text().trim()
            var nunugdv = nunu$v(nunulementv).find('.btn').text().trim()
            var nunulinkv = nunu$v(nunulementv).find('a').attr('href')
            var nunuimagev = nunu$v(nunulementv).find('img').attr('src')

            if (nunuezbtv && nunulinkv) {
                nununoticiasv.push({
                    nunuezbtv,
                    nunugdv: nunugdv.replace('Leia mais', ''),
                    nunulinkv: `${nunulinkv}`,
                    nunuimagev
                })
            }
        })

        nununoticiasv = nununoticiasv.slice(0, 5)

        var nunumensagemv = '‚öΩ *√öltimas Not√≠cias do Vasco:*\n\n'
        nununoticiasv.forEach((nununoticia, index) => {
            nunumensagemv += `*${index + 1}. ${nununoticia.nunuezbtv}*\n` +
                            `üìù ${nununoticia.nunugdv}\n` +
                            `üõï ${nununoticia.nunulinkv}\n`
            nunumensagemv += '\n'
        })
        if (nununoticiasv.length > 0 && nununoticiasv[0].nunuimagev) {
            await loli.sendMessage(from, { 
                image: { url: nununoticiasv[0].nunuimagev }, 
                caption: nunumensagemv 
            }, { quoted: info })
        } else {
            await loli.sendMessage(from, { text: nunumensagemv }, { quoted: info })
        }
    } catch (nunuerrov) {
        console.error('Erro ao buscar not√≠cias do Vasco', nunuerrov)
        reply('‚ö†Ô∏è N√£o foi poss√≠vel buscar as not√≠cias do Vasco no momento')
    }
    break
case 'cnnbrasil':
    try {
        const { data } = await axios.get('https://world-ecletix.onrender.com/api/cnnbrasil');
        
        if (data.status === 200 && data.resultado && data.resultado.length > 0) {
            let cnnbrasilMensagem = 'üì∞ *√öltimas not√≠cias da CNN Brasil:*\n\n';

            data.resultado.slice(0, 5).forEach((noticia, index) => {
                cnnbrasilMensagem += `*${index + 1}. ${noticia.noticia}*\n` +
                                     `üîó ${noticia.link || 'Link indispon√≠vel'}\n\n`;
            });

            if (data.resultado[0].imagem) {
                await loli.sendMessage(from, { 
                    image: { url: data.resultado[0].imagem }, 
                    caption: cnnbrasilMensagem 
                }, { quoted: info });
            } else {
                await loli.sendMessage(from, { text: cnnbrasilMensagem }, { quoted: info });
            }
        } else {
            reply('Nenhuma not√≠cia dispon√≠vel no momento.');
        }
    } catch (error) {
        console.error('Erro ao buscar not√≠cias da CNN Brasil:', error);
        reply('Ops, ocorreu um erro ao buscar as not√≠cias.');
    }
    break;

	case 'exame':
    try {
        const { data } = await axios.get('https://world-ecletix.onrender.com/api/exame');
        
        if (data.status === 200 && data.resultado && data.resultado.length > 0) {
            let exameMensagem = 'üì∞ *√öltimas not√≠cias da Exame:*\n\n';

            data.resultado.slice(0, 5).forEach((noticia, index) => {
                exameMensagem += `*${index + 1}. ${noticia.noticia}*\n` +
                                 `üîó ${noticia.link || 'Link indispon√≠vel'}\n\n`;
            });

            // Enviar com imagem, se dispon√≠vel
            if (data.resultado[0].imagem && !data.resultado[0].imagem.startsWith('data:image/gif')) {
                await loli.sendMessage(from, { 
                    image: { url: data.resultado[0].imagem }, 
                    caption: exameMensagem 
                }, { quoted: info });
            } else {
                await loli.sendMessage(from, { text: exameMensagem }, { quoted: info });
            }
        } else {
            reply('Nenhuma not√≠cia dispon√≠vel no momento.');
        }
    } catch (error) {
        console.error('Erro ao buscar not√≠cias da Exame:', error);
        reply('Ops, ocorreu um erro ao buscar as not√≠cias.');
    }
    break;
case 'metropoles':
    try {
        const { data } = await axios.get('https://world-ecletix.onrender.com/api/metropoles');

        if (data && data.length > 0) {
            let metropolesMensagem = 'üì∞ *√öltimas not√≠cias do Metr√≥poles:*\n\n';

            data.slice(0, 5).forEach((noticia, index) => {
                metropolesMensagem += `*${index + 1}. ${noticia.title || 'T√≠tulo indispon√≠vel'}*\n` +
                                      `üìÇ Categoria: ${noticia.category || 'Indispon√≠vel'}\n` +
                                      `üîó ${noticia.link || 'Link indispon√≠vel'}\n\n`;
            });

            // Enviar com imagem, se dispon√≠vel e v√°lida
            if (data[0].imageUrl && !data[0].imageUrl.startsWith('data:image/gif')) {
                await loli.sendMessage(from, { 
                    image: { url: data[0].imageUrl }, 
                    caption: metropolesMensagem 
                }, { quoted: info });
            } else {
                await loli.sendMessage(from, { text: metropolesMensagem }, { quoted: info });
            }
        } else {
            reply('Nenhuma not√≠cia dispon√≠vel no momento.');
        }
    } catch (error) {
        console.error('Erro ao buscar not√≠cias do Metr√≥poles:', error);
        reply('Ops, ocorreu um erro ao buscar as not√≠cias.');
    }
    break;
case 'oglobo':
    try {
        const { data } = await axios.get('https://world-ecletix.onrender.com/api/oglobo');

        if (data && data.length > 0) {
            let ogloboMensagem = 'üì∞ *√öltimas not√≠cias de O Globo:*\n\n';

            data.slice(0, 5).forEach((noticia, index) => {
                ogloboMensagem += `*${index + 1}. ${noticia.title || 'T√≠tulo indispon√≠vel'}*\n` +
                                  `‚úçÔ∏è Autor: ${noticia.author || 'Indispon√≠vel'}\n` +
                                  `üîó ${noticia.link || 'Link indispon√≠vel'}\n\n`;
            });

            await loli.sendMessage(from, { text: ogloboMensagem }, { quoted: info });
        } else {
            reply('Nenhuma not√≠cia dispon√≠vel no momento.');
        }
    } catch (error) {
        console.error('Erro ao buscar not√≠cias de O Globo:', error);
        reply('Ops, ocorreu um erro ao buscar as not√≠cias.');
    }
    break;
		
case 'folha':
    try {
        const { data } = await axios.get('https://world-ecletix.onrender.com/api/folha');

        if (data && data.length > 0) {
            let folhaMensagem = 'üì∞ *√öltimas not√≠cias da Folha de S.Paulo:*\n\n';

            data.slice(0, 5).forEach((noticia, index) => {
                folhaMensagem += `*${index + 1}. ${noticia.title || 'T√≠tulo indispon√≠vel'}*\n` +
                                 `üîó ${noticia.link || 'Link indispon√≠vel'}\n\n`;
            });

            await loli.sendMessage(from, { text: folhaMensagem }, { quoted: info });
        } else {
            reply('Nenhuma not√≠cia dispon√≠vel no momento.');
        }
    } catch (error) {
        console.error('Erro ao buscar not√≠cias da Folha:', error);
        reply('Ops, ocorreu um erro ao buscar as not√≠cias.');
    }
    break;		
		
case 'noticias_ciberneticas':
case 'newscibernetico':
case 'cisoadvisor': 
    try {
        const { data: nunucucisohtml } = await axios.get('https://www.cisoadvisor.com.br/arquivo-categorias/')
        const nunucucisoparser = cheerio.load(nunucucisohtml)
        let nunucucisonoticias = []
        
        nunucucisoparser('.elementor-post').each((index, nunucucisopost) => {
            const nunucucisotitle = nunucucisoparser(nunucucisopost).find('.elementor-post__title a').text().trim()
            const nunucucisosummary = nunucucisoparser(nunucucisopost).find('.elementor-post__excerpt p').text().trim()
            const nunucucisolink = nunucucisoparser(nunucucisopost).find('.elementor-post__title a').attr('href')
            const nunucucisoimage = nunucucisoparser(nunucucisopost).find('.elementor-post__thumbnail img').attr('src')
            
            if (nunucucisotitle && nunucucisolink) {
                nunucucisonoticias.push({
                    nunucucisotitle,
                    nunucucisosummary,
                    nunucucisolink,
                    nunucucisoimage
                })
            }
        })

        nunucucisonoticias = nunucucisonoticias.slice(0, 5)
        
        let nunucucisomensagem = 'üõ°Ô∏è *√öltimas Not√≠cias de Seguran√ßa Cibern√©tica:*\n\n'
        nunucucisonoticias.forEach((nunucucisoitem, index) => {
            nunucucisomensagem += `*${index + 1}. ${nunucucisoitem.nunucucisotitle}*\n` +
                                  `üìã ${nunucucisoitem.nunucucisosummary}\n` +
                                  `üîó ${nunucucisoitem.nunucucisolink}\n\n`
        })

        if (nunucucisonoticias.length > 0 && nunucucisonoticias[0].nunucucisoimage) {
            await loli.sendMessage(from, { 
                image: { url: nunucucisonoticias[0].nunucucisoimage }, 
                caption: nunucucisomensagem 
            }, { quoted: info })
        } else {
            await loli.sendMessage(from, { text: nunucucisomensagem }, { quoted: info })
        }
    } catch (nunucucisoerro) {
        console.error('Erro ao buscar not√≠cias do CISO Advisor:', nunucucisoerro)
        reply('‚ö†Ô∏è N√£o foi poss√≠vel buscar as not√≠cias do CISO Advisor no momento.')
    }
    break//nunu dia das crian√ßa
case 'news':
    const apiUrl = 'https://world-ecletix.onrender.com/api/ultimasnoticias';

    try {
        // Requisi√ß√£o para a API de √∫ltimas not√≠cias
        const response = await axios.get(apiUrl);
        const noticias = response.data;

        // Verificar se a resposta cont√©m not√≠cias
        if (noticias && noticias.length > 0) {
            // Limitar o n√∫mero de not√≠cias exibidas
            const limit = 5; // N√∫mero de not√≠cias para exibir
            let message = 'üì∞ √öltimas Not√≠cias:\n\n';

            noticias.slice(0, limit).forEach((noticia, index) => {
                const { titulo, link } = noticia;

                // Adicionar a not√≠cia √† mensagem
                message += `${index + 1}. *${titulo}*\nLeia mais: ${link}\n\n`;
            });

            // Enviar a mensagem com as not√≠cias
            await loli.sendMessage(from, { text: message }, { quoted: info });
        } else {
            loli.sendMessage(from, { text: 'üö® N√£o foi poss√≠vel encontrar as √∫ltimas not√≠cias.' }, { quoted: info });
        }
    } catch (error) {
        console.error('Erro ao fazer a requisi√ß√£o √† API de not√≠cias:', error);
        loli.sendMessage(from, { text: 'üö® Erro ao buscar as √∫ltimas not√≠cias.' }, { quoted: info });
    }
    break;
case 'noticia': 
try {
if (!q) return reply(`informe um tema para realizar a pesquisa de suas not√≠cias!`)
theNews = await axios.get(`https://newsapi.org/v2/everything?q=${encodeURIComponent(q)}&sortBy=publishedAt&language=pt&apiKey=9dc1dde158804756ae9b33dd8d71f7a1`);
newsSends = theNews.data.articles.map(d => `${d.publishedAt.split('T').join(' - ').split('Z')[0]}\n\n${d.title} - ${d.author} [${d.source.name}]\n\n${d.description}\n\n${d.url}\n\n${d.content}\n\n--------------------------- * ---------------------------\n\n`).join('');
msgSemQuoted(newsSends).catch(() => {
return console.log(e)
})
} catch (e) {
return console.log(e)
}
break
case 'esporte': 
  try {
    const response = await fetch('https://tohka.tech/api/outros/globoesportes?apikey=gxhu6');
    const data = await response.json();
    
    if (data && data.length > 0) {
      let esporteMessage = 'üèÜ Not√≠cias de Esportes:\n\n';

      data.forEach((news, index) => {
        esporteMessage += `üîπ ${index + 1}. ${news.titulo}\n${news.noticia}\n${news.link}\n\n`;
        if (news.img) {
          esporteMessage += `![Imagem](${news.img})\n\n`;
        }
      });

      await loli.sendMessage(sender, { text: esporteMessage });
    } else {
      reply('Desculpe, n√£o h√° not√≠cias esportivas dispon√≠veis no momento.');
    }
  } catch (error) {
    console.error('Ocorreu um erro ao recuperar as not√≠cias esportivas:', error);
    reply('Ocorreu um erro ao processar a solicita√ß√£o. Tente novamente mais tarde.');
  }
  break;


case 'conselhobiblico':
case 'conselhosbiblico':  
case 'conselhosb':   
case 'conselhob':  
var conselhosb = conselhob[Math.floor(Math.random() * conselhob.length)]   
jr = `
‚ï≠‚îÅ‚îÄ‚îÅ‚îÄ‚îÄ‚îÄ‡º∫[üóØ]‡ºª‚îÄ‚îÄ‚îÄ‚îÄ‚îÅ‚îÄ‚îÅ‚ïÆ
‚ïø‚ïë‚Ä¢ ${hora} ${pushname} 
‚ïø‚ïë
‚ïø‚ïë‚Ä¢ Conselhos B√≠blico para voc√™: 
‚ïø‚ïë
‚ïø‚ïë‚Ä¢ ${conselhosb} 
‚ïø‚ïë
‚ïø‚ïë‚Ä¢ Bot: ${botName}
‚ïø‚ïë‚Ä¢ ${!isGroup ? `ùó®ùòÄùòÇùóÆ??ùó∂ùóº: ${pushname}` :  `ùóöùóøùòÇùóΩùóº: ${groupName}`}
‚ï∞‚îÅ‚îÄ‚îÅ‚îÄ‚îÄ‚îÄ‡º∫[üí´]‡ºª‚îÄ‚îÄ‚îÄ‚îÄ‚îÅ‚îÄ‚îÅ‚ïØ`
await loli.sendMessage(from, {text: jr}, {quoted: info, contextInfo: {"mentionedJid": jr}})
break

            case 'avalie':
                if (!q) return reply(`Ex: ${prefix} avalia√ß√£o bot muito top..`)
                reply(`Avaliac√£o enviada com sucesso.`)
                let templateMeesssage = {
                    image: {
                        url: imagemdomenu,
                        quoted: info
                    },
                    caption: `*üëªAvalia√ß√£oüëª*\nDo N√∫mero: @${sender.split('@')[0]},\nAvaliac√£o:\n${q}`,
                    footer: 'Noelle_md'
                }
                loli.sendMessage(`${donoNumber}@s.whatsapp.net`, templateMeesssage)
                break

case 'fisiculturista': 
    try {
        const { data: nunufisudata } = await axios.get('https://www.cnnbrasil.com.br/tudo-sobre/fisiculturismo/')
        const nunufisu$ = cheerio.load(nunufisudata)
        let nunufisunoticias = []
        nunufisu$('.home__list__item').each((index, nunufisuelement) => {
            const nunufisuezbt = nunufisu$(nunufisuelement).find('.news-item-header__title').text().trim()
            const nunufisulink = nunufisu$(nunufisuelement).find('a').attr('href')
            const nunufisuimg = nunufisu$(nunufisuelement).find('img').attr('src')
            const nunufisudate = nunufisu$(nunufisuelement).find('.home__title__date').text().trim()

            if (nunufisuezbt && nunufisulink) {
                nunufisunoticias.push({
                    nunufisuezbt,
                    nunufisulink,
                    nunufisuimg,
                    nunufisudate
                })
            }
        })

        nunufisunoticias = nunufisunoticias.slice(0, 5)
        
        let nunufisumensagem = 'üèÜ *√öltimas:*\n\n'
        nunufisunoticias.forEach((nunufisunoticia, index) => {
            nunufisumensagem += `*${index + 1}. ${nunufisunoticia.nunufisuezbt}*\n` +
                                `üóìÔ∏è ${nunufisunoticia.nunufisudate}\n` +
                                `üîó ${nunufisunoticia.nunufisulink}\n\n`
        })
        
        if (nunufisunoticias.length > 0 && nunufisunoticias[0].nunufisuimg) {
            await loli.sendMessage(from, { 
                image: { url: nunufisunoticias[0].nunufisuimg }, 
                caption: nunufisumensagem 
            }, { quoted: info })
        } else {
            await loli.sendMessage(from, { text: nunufisumensagem }, { quoted: info })
        }
    } catch (nunufisuerro) {
        console.error('Erro ao buscar not√≠cias de fisiculturismo:', nunufisuerro)
        reply('ops foi de f.')
    }
    break;
    
    case 'time': {
    if (!text) {
        return loli.sendMessage(
            from,
            { text: `Por favor, forne√ßa o nome do time. Exemplo: ${prefix}time fortaleza` },
            { quoted: info }
        );
    }

    const clube = text.trim(); // O nome do time √© obtido a partir da entrada do usu√°rio

    try {
        const { data: timeData } = await axios.get(`https://world-ecletix.onrender.com/api/times?clube=${encodeURIComponent(clube)}`)
        let noticiastime = []

        // Filtra as not√≠cias que t√™m t√≠tulo e link
        timeData.forEach((noticia) => {
            if (noticia.title && noticia.link) {
                noticiastime.push({
                    title: noticia.title,
                    link: noticia.link,
                    imgSrc: noticia.imgSrc,
                    date: noticia.date
                })
            }
        })

        let timeMensagem = ' '
        noticiastime.forEach((timeNoticia, index) => {
            timeMensagem += `*${index + 1}. ${timeNoticia.title}*\n` +
                            `üîó ${timeNoticia.link}\n` +
                            `üóìÔ∏è ${timeNoticia.date}\n\n`
        })

        // Envia a mensagem, se houver not√≠cias
        if (noticiastime.length > 0) {
            const primeiraImagem = noticiastime[0].imgSrc ? { image: { url: noticiastime[0].imgSrc } } : {};
            await loli.sendMessage(from, {
                ...primeiraImagem,
                caption: timeMensagem
            }, { quoted: info });
        } else {
            await loli.sendMessage(from, { text: 'Nenhuma not√≠cia encontrada.' }, { quoted: info });
        }
    } catch (timeErro) {
        console.error('erro:', timeErro)
        reply('Ops, houve um erro ao buscar as not√≠cias do time.');
    }
    break;
}
case 'genoticias': {
    if (!text) {
        return loli.sendMessage(
            from,
            { text: `Por favor, forne√ßa um termo para busca. Exemplo: ${prefix}genoticias fifa` },
            { quoted: info }
        );
    }

    const termoBusca = text.trim();

    try {
        const { data } = await axios.get(`https://world-ecletix.onrender.com/api/genoticias?termo=${encodeURIComponent(termoBusca)}`);
        
        if (!data.sucesso || !data.dados || data.dados.length === 0) {
            return loli.sendMessage(from, { text: 'Nenhuma not√≠cia encontrada.' }, { quoted: info });
        }

        let mensagemNoticias = '';
        data.dados.forEach((noticia, index) => {
            mensagemNoticias += `*${index + 1}. ${noticia.titulo}*\n` +
                               `üì∞ ${noticia.trechoManchete}\n` +
                               `üïí ${noticia.horarioPostagem}\n` +
                               `üîó [Leia mais](${noticia.linkNoticia})\n` +
                               `${noticia.linkImagem ? `![Imagem](${noticia.linkImagem})\n` : ''}\n`; // Incluindo a imagem aqui
        });

        await loli.sendMessage(from, { text: mensagemNoticias }, { quoted: info });
    } catch (error) {
        console.error('Erro ao buscar not√≠cias:', error);
        await loli.sendMessage(from, { text: 'Ocorreu um erro ao buscar as not√≠cias.' }, { quoted: info });
    }
    break;
}
case 'g1': {
    try {
        const { data } = await axios.get('https://world-ecletix.onrender.com/api/g1');

        if (!data.resultado || data.resultado.length === 0) {
            return loli.sendMessage(from, { text: 'Nenhuma not√≠cia encontrada.' }, { quoted: info });
        }

        let mensagemNoticias = '';
        data.resultado.forEach((noticia, index) => {
            mensagemNoticias += `*${index + 1}. ${noticia.noticia}*\n` +
                               `üìù ${noticia.desc ? noticia.desc : 'Sem descri√ß√£o'}\n` +
                               `üïí ${noticia.postado}\n` +
                               `üîó [Leia mais](${noticia.link})\n` +
                               `${noticia.imagem ? `![Imagem](${noticia.imagem})\n` : ''}\n`; // Incluindo a imagem aqui
        });

        await loli.sendMessage(from, { text: mensagemNoticias }, { quoted: info });
    } catch (error) {
        console.error('Erro ao buscar not√≠cias do G1:', error);
        await loli.sendMessage(from, { text: 'Ocorreu um erro ao buscar as not√≠cias do G1.' }, { quoted: info });
    }
    break;
}

case 'poder360': {
    try {
        const { data } = await axios.get('https://world-ecletix.onrender.com/api/poder360');

        if (!data.resultado || data.resultado.length === 0) {
            return loli.sendMessage(from, { text: 'Nenhuma not√≠cia encontrada.' }, { quoted: info });
        }

        let mensagemNoticias = '';
        data.resultado.forEach((noticia, index) => {
            if (noticia.noticia) {
                mensagemNoticias += `*${index + 1}. ${noticia.noticia}*\n` +
                                   `üîó [Leia mais](${noticia.link})\n` +
                                   `${noticia.imagem ? `![Imagem](${noticia.imagem})\n` : ''}\n`; // Incluindo a imagem aqui
            }
        });

        if (!mensagemNoticias) {
            mensagemNoticias = 'Nenhuma not√≠cia dispon√≠vel no momento.';
        }

        await loli.sendMessage(from, { text: mensagemNoticias }, { quoted: info });
    } catch (error) {
        console.error('Erro ao buscar not√≠cias do Poder360:', error);
        await loli.sendMessage(from, { text: 'Ocorreu um erro ao buscar as not√≠cias do Poder360.' }, { quoted: info });
    }
    break;
}

case 'jovempan': {
    try {
        const { data } = await axios.get('https://world-ecletix.onrender.com/api/jovempan');

        if (!data.resultado || data.resultado.length === 0) {
            return loli.sendMessage(from, { text: 'Nenhuma not√≠cia encontrada.' }, { quoted: info });
        }

        let mensagemNoticias = '';
        data.resultado.forEach((noticia, index) => {
            if (noticia.noticia) {
                mensagemNoticias += `*${index + 1}. ${noticia.noticia}*\n` +
                                   `üîó [Leia mais](${noticia.link})\n` +
                                   `${noticia.imagem ? `![Imagem](${noticia.imagem})\n` : ''}\n`; // Incluindo a imagem aqui
            }
        });

        if (!mensagemNoticias) {
            mensagemNoticias = 'Nenhuma not√≠cia dispon√≠vel no momento.';
        }

        await loli.sendMessage(from, { text: mensagemNoticias }, { quoted: info });
    } catch (error) {
        console.error('Erro ao buscar not√≠cias do Jovem Pan:', error);
        await loli.sendMessage(from, { text: 'Ocorreu um erro ao buscar as not√≠cias do Jovem Pan.' }, { quoted: info });
    }
    break;
}

case 'uol': {
    try {
        const { data } = await axios.get('https://world-ecletix.onrender.com/api/uol');

        if (!data.resultado || data.resultado.length === 0) {
            return loli.sendMessage(from, { text: 'Nenhuma not√≠cia encontrada.' }, { quoted: info });
        }

        let mensagemNoticias = '';
        data.resultado.forEach((noticia, index) => {
            if (noticia.noticia) {
                mensagemNoticias += `*${index + 1}. ${noticia.noticia}*\n` +
                                   `üîó [Leia mais](${noticia.link})\n` +
                                   `${noticia.imagem ? `![Imagem](${noticia.imagem})\n` : ''}\n`; // Incluindo a imagem aqui
            }
        });

        if (!mensagemNoticias) {
            mensagemNoticias = 'Nenhuma not√≠cia dispon√≠vel no momento.';
        }

        await loli.sendMessage(from, { text: mensagemNoticias }, { quoted: info });
    } catch (error) {
        console.error('Erro ao buscar not√≠cias da UOL:', error);
        await loli.sendMessage(from, { text: 'Ocorreu um erro ao buscar as not√≠cias da UOL.' }, { quoted: info });
    }
    break;
}

case 'estadao': {
    try {
        const { data } = await axios.get('https://world-ecletix.onrender.com/api/estadao');

        if (!data.resultado || data.resultado.length === 0) {
            return loli.sendMessage(from, { text: 'Nenhuma not√≠cia encontrada.' }, { quoted: info });
        }

        let mensagemNoticias = '';
        data.resultado.forEach((noticia, index) => {
            if (noticia.noticia) {
                mensagemNoticias += `*${index + 1}. ${noticia.noticia}*\n` +
                                   `üîó [Leia mais](${noticia.link})\n` +
                                   `${noticia.imagem ? `![Imagem](${noticia.imagem})\n` : ''}\n`; // Incluindo a imagem aqui
            }
        });

        if (!mensagemNoticias) {
            mensagemNoticias = 'Nenhuma not√≠cia dispon√≠vel no momento.';
        }

        await loli.sendMessage(from, { text: mensagemNoticias }, { quoted: info });
    } catch (error) {
        console.error('Erro ao buscar not√≠cias do Estad√£o:', error);
        await loli.sendMessage(from, { text: 'Ocorreu um erro ao buscar as not√≠cias do Estad√£o.' }, { quoted: info });
    }
    break;
}

case 'terra': {
    try {
        const { data } = await axios.get('https://world-ecletix.onrender.com/api/terra');

        if (!data.resultado || data.resultado.length === 0) {
            return loli.sendMessage(from, { text: 'Nenhuma not√≠cia encontrada.' }, { quoted: info });
        }

        let mensagemNoticias = '';
        data.resultado.forEach((noticia, index) => {
            if (noticia.noticia) {
                mensagemNoticias += `*${index + 1}. ${noticia.noticia}*\n` +
                                   `üîó [Leia mais](${noticia.link})\n` +
                                   `${noticia.imagem ? `![Imagem](${noticia.imagem})\n` : ''}\n`;
            }
        });

        if (!mensagemNoticias) {
            mensagemNoticias = 'Nenhuma not√≠cia dispon√≠vel no momento.';
        }

        await loli.sendMessage(from, { text: mensagemNoticias }, { quoted: info });
    } catch (error) {
        console.error('Erro ao buscar not√≠cias do Terra:', error);
        await loli.sendMessage(from, { text: 'Ocorreu um erro ao buscar as not√≠cias do Terra.' }, { quoted: info });
    }
    break;
}
case 'aominuto': {
    try {
        const { data } = await axios.get('https://world-ecletix.onrender.com/api/aominuto');

        if (!data.resultado || data.resultado.length === 0) {
            return loli.sendMessage(from, { text: 'Nenhuma not√≠cia encontrada.' }, { quoted: info });
        }

        let mensagemNoticias = '';
        data.resultado.forEach((noticia, index) => {
            if (noticia.noticia) {
                mensagemNoticias += `*${index + 1}. ${noticia.noticia}*\n` +
                                   `üìÖ Postado: ${noticia.postado}\n` +
                                   `üóÇ Categoria: ${noticia.categoria}\n` +
                                   `üîó [Leia mais](${noticia.link})\n\n`;
            }
        });

        if (!mensagemNoticias) {
            mensagemNoticias = 'Nenhuma not√≠cia dispon√≠vel no momento.';
        }

        await loli.sendMessage(from, { text: mensagemNoticias }, { quoted: info });
    } catch (error) {
        console.error('Erro ao buscar not√≠cias do A O Minuto:', error);
        await loli.sendMessage(from, { text: 'Ocorreu um erro ao buscar as not√≠cias do A O Minuto.' }, { quoted: info });
    }
    break;
}
case 'vejaabril': {
    try {
        const { data } = await axios.get('https://world-ecletix.onrender.com/api/vejaabril');

        if (!data.resultado || data.resultado.length === 0) {
            return loli.sendMessage(from, { text: 'Nenhuma not√≠cia encontrada.' }, { quoted: info });
        }

        let mensagemNoticias = '';
        data.resultado.forEach((noticia, index) => {
            if (noticia.noticia) {
                mensagemNoticias += `*${index + 1}. ${noticia.noticia}*\n` +
                                   `üñºÔ∏è [Imagem](${noticia.imagem})\n` +
                                   `üóÇ Categoria: ${noticia.categoria}\n` +
                                   `üîó [Leia mais](${noticia.link})\n\n`;
            }
        });

        if (!mensagemNoticias) {
            mensagemNoticias = 'Nenhuma not√≠cia dispon√≠vel no momento.';
        }

        await loli.sendMessage(from, { text: mensagemNoticias }, { quoted: info });
    } catch (error) {
        console.error('Erro ao buscar not√≠cias da Veja:', error);
        await loli.sendMessage(from, { text: 'Ocorreu um erro ao buscar as not√≠cias da Veja.' }, { quoted: info });
    }
    break;
}
case 'agazeta': {
    try {
        const { data } = await axios.get('https://world-ecletix.onrender.com/api/agazeta');

        if (!data.resultado || data.resultado.length === 0) {
            return loli.sendMessage(from, { text: 'Nenhuma not√≠cia encontrada.' }, { quoted: info });
        }

        let mensagemNoticias = '';
        data.resultado.forEach((noticia, index) => {
            if (noticia.link) { // Verifica se h√° um link dispon√≠vel
                mensagemNoticias += `*Not√≠cia ${index + 1}*\n` +
                                   `üñºÔ∏è [Imagem](${noticia.imagem})\n` +
                                   `üóÇ Categoria: ${noticia.categoria}\n` +
                                   `üîó [Leia mais](${noticia.link})\n\n`;
            }
        });

        if (!mensagemNoticias) {
            mensagemNoticias = 'Nenhuma not√≠cia dispon√≠vel no momento.';
        }

        await loli.sendMessage(from, { text: mensagemNoticias }, { quoted: info });
    } catch (error) {
        console.error('Erro ao buscar not√≠cias da A Gazeta:', error);
        await loli.sendMessage(from, { text: 'Ocorreu um erro ao buscar as not√≠cias da A Gazeta.' }, { quoted: info });
    }
    break;
}
case 'fut': {
    try {
        const { data: futebolnunuakake } = await axios.get('https://ge.globo.com/')
        const fut$ = cheerio.load(futebolnunuakake)
        let noticiadofut = []

        fut$('.feed-post-body').each((index, futelement) => {
            if (index < 7) {
                const titulodofutebol = fut$(futelement).find('.feed-post-link').text().trim()
                const linkfutebol = fut$(futelement).find('.feed-post-link').attr('href')
                const futimagem = fut$(futelement).find('.bstn-fd-picture-image').attr('src')

                if (titulodofutebol && linkfutebol) {
                    noticiadofut.push({
                        titulodofutebol,
                        linkfutebol,
                        futimagem
                    })
                }
            }
        })

        let futmensagem = ' '
        noticiadofut.forEach((futnoticia, index) => {
            futmensagem += `*${index + 1}. ${futnoticia.titulodofutebol}*\n` +
                           `üîó ${futnoticia.linkfutebol}\n\n`
        })

        if (noticiadofut.length > 0 && noticiadofut[0].futimagem) {
            await loli.sendMessage(from, {
                image: { url: noticiadofut[0].futimagem },
                caption: futmensagem
            }, { quoted: info })
        } else {
            await loli.sendMessage(from, { text: futmensagem }, { quoted: info })
        }
    } catch (futerro) {
        console.error('erro:', futerro)
        reply('ops foi de f.')
    }
    break
			}
		
case 'status':
if (!isGroup) return reply(enviar.msg.grupo)
if (!isGroupAdmins && !isCreator  && !m.key.fromMe) return reply(msg.adm)

reply(`‚ï≠‚ïº‚ïº‚ïæ‚ù≤ S T A T U S ‚ù≥‚ïº‚ïº‚ïæ‚ïÆ
‚îÇ‚û± Anti √°udios: ${isAntiAudio? '‚úÖ' : '‚õî'}
‚îÇ‚û± Anti documentos: ${Antidoc ? '‚úÖ' : '‚õî'}
‚îÇ‚û± Anti fake: ${isAntifake ? '‚úÖ' : '‚õî'}
‚îÇ‚û± Anti img: ${isAntiImg? '‚úÖ' : '‚õî'}
‚îÇ‚û± Anti sticker: ${isAntiSticker ? '‚úÖ' : '‚õî'}
‚îÇ‚û± Anti liga√ß√£o: ${isAnticall ? '‚úÖ' : '‚õî'}
‚îÇ‚û± Anti Notas: ${isAntiNotas ? '‚úÖ' : '‚õî'}
‚îÇ‚û± Anti catalogo: ${isAnticatalogo ? '‚úÖ' : '‚õî'}
‚îÇ‚û± Anti video: ${isAntiVid ? '‚úÖ' : '‚õî'}
‚îÇ‚û± Anti localiza√ß√£o: ${Antiloc ? '‚úÖ' : '‚õî'}
‚îÇ‚û± Anti link grupo: ${isAntiLink ? '‚úÖ' : '‚õî'}
‚îÇ‚û± AutoReact: ${isAutoReact ? '‚úÖ' : '‚õî'}
‚ï∞‚ïº‚ïæ‚ù≤ ${botName} ‚ù≥‚ïº‚ïæ‚ïØ`)
break
                  
            case "!massacote":
            case '!mascote':
                var mascoteFotoURL = "https://i.imgur.com/mVwa7q4.png"
                await loli.sendFileFromUrl(chatId, mascoteFotoURL, 'mascote.jpeg', 'Whatsapp Jr.', id)
                break 

case 'amongus': 
if(!isModobn) return reply(`Este tipo de comando s√≥ pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se voc√™ for, apenas digite ${prefix}modobrincadeira 1`)  
if (info.message.extendedTextMessage === undefined || info.message.extendedTextMessage === null) return reply('Voc√™ precisa mencionar algu√©m')
mentioned = info.message.extendedTextMessage.contextInfo.mentionedJid
pro = '.\n'
for (let _ of mentioned) {
pro += `@${_.split('@')[0]}\n`
}
sus = 
`.      „ÄÄ„ÄÇ„ÄÄ„ÄÄ„ÄÄ„ÄÄ‚Ä¢„ÄÄ    „ÄÄÔæü„ÄÄ„ÄÄ„ÄÇ
„ÄÄ„ÄÄ.„ÄÄ„ÄÄ„ÄÄ.„ÄÄ„ÄÄ„ÄÄ  „ÄÄ„ÄÄ.„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÇ„ÄÄ„ÄÄ   „ÄÇ„ÄÄ.
„ÄÄ.„ÄÄ„ÄÄ      „ÄÇ„ÄÄ        ‡∂û   „ÄÇ„ÄÄ    .    ‚Ä¢
‚Ä¢            @${mentioned[0].split('@')[0]} was E j e c t e d
                  1 impostor remain   „ÄÇ„ÄÄ.
„ÄÄ „ÄÄ„ÄÄ„ÄÇ„ÄÄ„ÄÄ „ÄÄ„ÄÄ„ÄÄ„ÄÄÔæü„ÄÄ„ÄÄ„ÄÄ.„ÄÄ      „ÄÄ„ÄÄ„ÄÄ.
,„ÄÄ„ÄÄ„ÄÄ„ÄÄ.                  .`
mentions(`${sus}`, mentioned, true)

break           

   
case 'togif':
if(!isQuotedSticker) return reply('Marque a figurinha animada!')
try {
if((isMedia && !info.message.videoMessage || isQuotedSticker) && !q.length <= 1) {
buff = await getFileBuffer(info.message.extendedTextMessage.contextInfo.quotedMessage.stickerMessage, 'sticker')
reply('Aguarde, estou convertendo a figurinha para o formato gif.')
a = await webp_mp4(buff)
loli.sendMessage(from, {video: {url: a}, gifPlayback: true, fileName: `stick.gif`}, {quoted: live}).catch(e => {
reply("Erro ao realizar o envio do sticker!") 
})
DLT_FL(buff)
}
} catch {
reply(mess.erro())
}
break
case "celular": 
{
    try {
        const res = await fetchJson(`https://world-ecletix.onrender.com/api/celular`);
        // by Luan

        if (!res || res.length === 0) {
            return reply("üîç N√£o foi poss√≠vel encontrar informa√ß√µes sobre celulares no momento.");
        }

        let message = "**üì± Informa√ß√µes de Celulares:**\n\n";

        res.forEach((celular, index) => {
            const { name, url, specs } = celular;

            message += `**${index + 1}. ${name || "Nome n√£o especificado"}**\n`;
            if (url) message += `üîó **URL:** [Clique aqui para mais detalhes](${url})\n`;

            if (specs) {
                // Fun√ß√£o para corrigir texto
                const formatText = (text) => text ? text.replace(/ÔøΩ/g, "").trim() : "N√£o especificado";

                message += `**üõ†Ô∏è Especifica√ß√µes:**\n`;
                message += `‚Ä¢ **Sistema Operacional:** ${formatText(specs["Sistema Operacional"])}\n`;
                message += `‚Ä¢ **Disponibilidade:** ${formatText(specs["Disponibilidade"])}\n`;
                message += `‚Ä¢ **Dimens√µes:** ${formatText(specs["Dimens√µes"])}\n`;
                message += `‚Ä¢ **Peso:** ${formatText(specs["Peso"])}\n`;
                message += `‚Ä¢ **Tela:** ${formatText(specs["Tela"])} - **FPS:** ${formatText(specs["FPS"])}\n`;
                message += `‚Ä¢ **Resolu√ß√£o:** ${formatText(specs["Resolu√ß√£o"])}\n`;
                message += `‚Ä¢ **C√¢mera Principal:** ${formatText(specs["Megapixel"])}\n`;
                message += `‚Ä¢ **C√¢mera Frontal:** ${formatText(specs["C√¢mera Frontal"])}\n`;
                message += `‚Ä¢ **Mem√≥ria RAM:** ${formatText(specs["RAM"])}\n`;
                message += `‚Ä¢ **Armazenamento Interno:** ${formatText(specs["Mem√≥ria Max"])}\n`;
                message += `‚Ä¢ **Mem√≥ria Expans√≠vel:** ${formatText(specs["Mem√≥ria Expans√≠vel"])}\n`;
                message += `‚Ä¢ **Processador:** ${formatText(specs["Processador"])}\n`;
                message += `‚Ä¢ **Chipset:** ${formatText(specs["Chipset"])}\n`;
                message += `‚Ä¢ **GPU:** ${formatText(specs["GPU"])}\n`;
                message += `‚Ä¢ **Bateria:** ${formatText(specs["Ampere"])}\n\n`;

                message += `**üì∂ Conectividade:**\n`;
                message += `‚Ä¢ **Wi-Fi:** ${formatText(specs["Wi-Fi"])}\n`;
                message += `‚Ä¢ **Bluetooth:** ${formatText(specs["Bluetooth"])}\n`;
                message += `‚Ä¢ **USB:** ${formatText(specs["USB"])}\n`;
                message += `‚Ä¢ **GPS:** ${formatText(specs["GPS"])}\n`;

                message += `**üîí Seguran√ßa:**\n`;
                message += `‚Ä¢ **Leitor de Impress√£o Digital:** ${formatText(specs["Leitor de Impress√£o Digital"])}\n`;
                message += `‚Ä¢ **Reconhecimento Facial:** ${formatText(specs["Reconhecimento Facial"])}\n`;
            }

            message += "\n"; // Adiciona espa√ßamento entre os celulares
        });

        reply(message);
    } catch (error) {
        console.error("Erro ao consultar a API de celular:", error.message, error.stack);
        return reply("‚ö†Ô∏è Ocorreu um erro ao processar a solicita√ß√£o. Tente novamente mais tarde.");
    }
}
break;
case "guia-filmes":
{
    try {
        const res = await fetchJson(`https://world-ecletix.onrender.com/api/guia-filmes`);
        // by Luan

        if (!res || res.length === 0) {
            return reply("üîç N√£o foi poss√≠vel encontrar informa√ß√µes sobre o guia de filmes no momento.");
        }

        let message = "**üé¨ Guia de Filmes - Programa√ß√£o Atual:**\n\n";

        res.forEach((canal) => {
            const { canal: nomeCanal, programas } = canal;

            if (!nomeCanal || !programas || programas.length === 0) {
                return; // Ignora canais sem nome ou programa√ß√£o
            }

            message += `üì∫ **Canal:** ${nomeCanal}\n`;

            programas.forEach((programa) => {
                const { hora, titulo } = programa;
                if (hora && titulo) {
                    message += `   üïí **${hora}** - ${titulo}\n`;
                }
            });

            message += "\n"; // Espa√ßamento entre os canais
        });

        reply(message.trim());
    } catch (error) {
        console.error("Erro ao consultar a API de guia-filmes:", error);
        return reply("‚ö†Ô∏è Ocorreu um erro ao processar a solicita√ß√£o. Tente novamente mais tarde.");
    }
}
break;
case "guia-series":
{
    try {
        const res = await fetchJson(`https://world-ecletix.onrender.com/api/guia-series`);
        // by Luan

        if (!res || res.length === 0) {
            return reply("üîç N√£o foi poss√≠vel encontrar informa√ß√µes sobre o guia de s√©ries no momento.");
        }

        let message = "**üì∫ Guia de S√©ries - Programa√ß√£o Atual:**\n\n";

        res.forEach((canal) => {
            const { canal: nomeCanal, programas } = canal;

            if (!nomeCanal || !programas || programas.length === 0) {
                return; // Ignora canais sem nome ou programa√ß√£o
            }

            message += `üé• **Canal:** ${nomeCanal}\n`;

            programas.forEach((programa) => {
                const { hora, titulo } = programa;
                if (hora && titulo) {
                    message += `   üïí **${hora}** - ${titulo}\n`;
                }
            });

            message += "\n"; // Espa√ßamento entre os canais
        });

        reply(message.trim());
    } catch (error) {
        console.error("Erro ao consultar a API de guia-series:", error);
        return reply("‚ö†Ô∏è Ocorreu um erro ao processar a solicita√ß√£o. Tente novamente mais tarde.");
    }
}
break;
case "guia-esportes":
{
    try {
        const res = await fetchJson(`https://world-ecletix.onrender.com/api/guia-esportes`);
        // by Luan

        if (!res || res.length === 0) {
            return reply("üîç N√£o foi poss√≠vel encontrar informa√ß√µes sobre o guia de esportes no momento.");
        }

        let message = "**üèÖ Guia de Esportes - Programa√ß√£o Atual:**\n\n";

        res.forEach((canal) => {
            const { canal: nomeCanal, programas } = canal;

            if (!nomeCanal || !programas || programas.length === 0) {
                return; // Ignora canais sem nome ou programa√ß√£o
            }

            message += `üì∫ **Canal:** ${nomeCanal}\n`;

            programas.forEach((programa) => {
                const { hora, titulo } = programa;
                if (hora && titulo) {
                    message += `   üïí **${hora}** - ${titulo}\n`;
                }
            });

            message += "\n"; // Espa√ßamento entre os canais
        });

        reply(message.trim());
    } catch (error) {
        console.error("Erro ao consultar a API de guia-esportes:", error);
        return reply("‚ö†Ô∏è Ocorreu um erro ao processar a solicita√ß√£o. Tente novamente mais tarde.");
    }
}
break;
case "guia-infantil":
{
    try {
        const res = await fetchJson(`https://world-ecletix.onrender.com/api/guia-infantil`);
        // by Luan

        if (!res || res.length === 0) {
            return reply("üîç N√£o foi poss√≠vel encontrar informa√ß√µes sobre o guia infantil no momento.");
        }

        let message = "**üé® Guia Infantil - Programa√ß√£o Atual:**\n\n";

        res.forEach((canal) => {
            const { canal: nomeCanal, programas } = canal;

            if (!nomeCanal || !programas || programas.length === 0) {
                return; // Ignora canais sem nome ou programa√ß√£o
            }

            message += `üì∫ **Canal:** ${nomeCanal}\n`;

            programas.forEach((programa) => {
                const { hora, titulo } = programa;
                if (hora && titulo) {
                    message += `   üïí **${hora}** - ${titulo}\n`;
                }
            });

            message += "\n"; // Espa√ßamento entre os canais
        });

        reply(message.trim());
    } catch (error) {
        console.error("Erro ao consultar a API de guia-infantil:", error);
        return reply("‚ö†Ô∏è Ocorreu um erro ao processar a solicita√ß√£o. Tente novamente mais tarde.");
    }
}
break;
case "guia-variedades":
{
    try {
        const res = await fetchJson(`https://world-ecletix.onrender.com/api/guia-variedades`);
        // by Luan

        if (!res || res.length === 0) {
            return reply("üîç N√£o foi poss√≠vel encontrar informa√ß√µes sobre o guia de variedades no momento.");
        }

        let message = "**üé≠ Guia Variedades - Programa√ß√£o Atual:**\n\n";

        res.forEach((canal) => {
            const { canal: nomeCanal, programas } = canal;

            if (!nomeCanal || !programas || programas.length === 0) {
                return; // Ignora canais sem nome ou programa√ß√£o
            }

            message += `üì∫ **Canal:** ${nomeCanal}\n`;

            programas.forEach((programa) => {
                const { hora, titulo } = programa;
                if (hora && titulo) {
                    message += `   üïí **${hora}** - ${titulo}\n`;
                }
            });

            message += "\n"; // Espa√ßamento entre os canais
        });

        reply(message.trim());
    } catch (error) {
        console.error("Erro ao consultar a API de guia-variedades:", error);
        return reply("‚ö†Ô∏è Ocorreu um erro ao processar a solicita√ß√£o. Tente novamente mais tarde.");
    }
}
break;
case "guia-documentarios":
{
    try {
        const res = await fetchJson(`https://world-ecletix.onrender.com/api/guia-documentarios`);
        // by Luan

        if (!res || res.length === 0) {
            return reply("üîç N√£o foi poss√≠vel encontrar informa√ß√µes sobre o guia de document√°rios no momento.");
        }

        let message = "**üìö Guia de Document√°rios - Programa√ß√£o Atual:**\n\n";

        res.forEach((canal) => {
            const { canal: nomeCanal, programas } = canal;

            if (!nomeCanal || !programas || programas.length === 0) {
                return; // Ignora canais sem nome ou programa√ß√£o
            }

            message += `üì∫ **Canal:** ${nomeCanal}\n`;

            programas.forEach((programa) => {
                const { hora, titulo } = programa;
                if (hora && titulo) {
                    message += `   üïí **${hora}** - ${titulo}\n`;
                }
            });

            message += "\n"; // Espa√ßamento entre os canais
        });

        reply(message.trim());
    } catch (error) {
        console.error("Erro ao consultar a API de guia-documentarios:", error);
        return reply("‚ö†Ô∏è Ocorreu um erro ao processar a solicita√ß√£o. Tente novamente mais tarde.");
    }
}
break;
case "guia-noticias":
{
    try {
        const res = await fetchJson(`https://world-ecletix.onrender.com/api/guia-noticias`);
        // by Luan

        if (!res || res.length === 0) {
            return reply("üîç N√£o foi poss√≠vel encontrar informa√ß√µes sobre o guia de not√≠cias no momento.");
        }

        let message = "**üì∞ Guia de Not√≠cias - Programa√ß√£o Atual:**\n\n";

        res.forEach((canal) => {
            const { canal: nomeCanal, programas } = canal;

            if (!nomeCanal || !programas || programas.length === 0) {
                return; // Ignora canais sem nome ou programa√ß√£o
            }

            message += `üì∫ **Canal:** ${nomeCanal}\n`;

            programas.forEach((programa) => {
                const { hora, titulo } = programa;
                if (hora && titulo) {
                    message += `   üïí **${hora}** - ${titulo}\n`;
                }
            });

            message += "\n"; // Espa√ßamento entre os canais
        });

        reply(message.trim());
    } catch (error) {
        console.error("Erro ao consultar a API de guia-noticias:", error);
        return reply("‚ö†Ô∏è Ocorreu um erro ao processar a solicita√ß√£o. Tente novamente mais tarde.");
    }
}
break;
case "guia-aberta":
{
    try {
        const res = await fetchJson(`https://world-ecletix.onrender.com/api/guia-aberta`);
        // by Luan

        if (!res || res.length === 0) {
            return reply("üîç N√£o foi poss√≠vel encontrar informa√ß√µes sobre o guia de programa√ß√£o aberta no momento.");
        }

        let message = "**üì∫ Guia de Programa√ß√£o Aberta:**\n\n";

        res.forEach((canal) => {
            const { canal: nomeCanal, programas } = canal;

            if (!nomeCanal || !programas || programas.length === 0) {
                return; // Ignora canais sem nome ou programa√ß√£o
            }

            message += `üì∫ **Canal:** ${nomeCanal}\n`;

            programas.forEach((programa) => {
                const { hora, titulo } = programa;
                if (hora && titulo) {
                    message += `   üïí **${hora}** - ${titulo}\n`;
                }
            });

            message += "\n"; // Espa√ßamento entre os canais
        });

        reply(message.trim());
    } catch (error) {
        console.error("Erro ao consultar a API de guia-aberta:", error);
        return reply("‚ö†Ô∏è Ocorreu um erro ao processar a solicita√ß√£o. Tente novamente mais tarde.");
    }
}
break;
case "tabela_ucl":
{

    try {
        const res = await fetchJson(`https://world-ecletix.onrender.com/api/tabela-ucl`);
        
        if (!res || !res.logo || !res.tabela) {
            return reply("Nenhuma tabela encontrada ou resposta inv√°lida da API.");
        }

        const logoURL = res.logo;
        let cap = "Aqui est√° a tabela atualizada da UCL:\n\n";

        // Formatando a tabela para enviar
        res.tabela.forEach(team => {
            cap += `${team.time} - Posi√ß√£o: ${team.posicao}, Jogos: ${team.jogos}, Vit√≥rias: ${team.vitorias}, Empates: ${team.empates}, Derrotas: ${team.derrotas}, Saldo: ${team.saldo}, Pontos: ${team.pontos}\n`;
        });

        loli.sendMessage(from, { image: { url: logoURL }, caption: cap }, { quoted: m });
    } catch (error) {
        console.error(error);
        return reply("Ocorreu um erro ao processar a solicita√ß√£o.");
    }
}
break;
case "tabela_brasileirao":
{

    try {
        const res = await fetchJson(`https://world-ecletix.onrender.com/api/tabela-brasileirao`);
        
        if (!res || !res.logo || !res.tabela) {
            return reply("Nenhuma tabela encontrada ou resposta inv√°lida da API.");
        }

        const logoURL = res.logo;
        let cap = "Aqui est√° a tabela atualizada do Brasileir√£o:\n\n";

        // Formatando a tabela para enviar
        res.tabela.forEach(team => {
            cap += `${team.time} - Posi√ß√£o: ${team.posicao}, Jogos: ${team.jogos}, Vit√≥rias: ${team.vitorias}, Empates: ${team.empates}, Derrotas: ${team.derrotas}, Saldo: ${team.saldo}, Pontos: ${team.pontos}\n`;
        });

        loli.sendMessage(from, { image: { url: logoURL }, caption: cap }, { quoted: m });
    } catch (error) {
        console.error(error);
        return reply("Ocorreu um erro ao processar a solicita√ß√£o.");
    }
}
break;
case "tabela_premierleague":
{

    try {
        const res = await fetchJson(`https://world-ecletix.onrender.com/api/tabela-premierleague`);
        
        if (!res || !res.logo || !res.tabela) {
            return reply("Nenhuma tabela encontrada ou resposta inv√°lida da API.");
        }

        const logoURL = res.logo;
        let cap = "Aqui est√° a tabela atualizada da Premier League:\n\n";

        // Formatando a tabela para enviar
        res.tabela.forEach(team => {
            cap += `${team.time} - Posi√ß√£o: ${team.posicao}, Jogos: ${team.jogos}, Vit√≥rias: ${team.vitorias}, Empates: ${team.empates}, Derrotas: ${team.derrotas}, Saldo: ${team.saldo}, Pontos: ${team.pontos}\n`;
        });

        loli.sendMessage(from, { image: { url: logoURL }, caption: cap }, { quoted: m });
    } catch (error) {
        console.error(error);
        return reply("Ocorreu um erro ao processar a solicita√ß√£o.");
    }
}
break;
case "tabela_laliga":
{

    try {
        const res = await fetchJson(`https://world-ecletix.onrender.com/api/tabela-laliga`);
        
        if (!res || !res.logo || !res.tabela) {
            return reply("Nenhuma tabela encontrada ou resposta inv√°lida da API.");
        }

        const logoURL = res.logo;
        let cap = "Aqui est√° a tabela atualizada da La Liga:\n\n";

        // Formatando a tabela para enviar
        res.tabela.forEach(team => {
            cap += `${team.time} - Posi√ß√£o: ${team.posicao}, Jogos: ${team.jogos}, Vit√≥rias: ${team.vitorias}, Empates: ${team.empates}, Derrotas: ${team.derrotas}, Saldo: ${team.saldo}, Pontos: ${team.pontos}\n`;
        });

        loli.sendMessage(from, { image: { url: logoURL }, caption: cap }, { quoted: m });
    } catch (error) {
        console.error(error);
        return reply("Ocorreu um erro ao processar a solicita√ß√£o.");
    }
}
break;
case "tabela_bundesliga":
{
    try {
        const res = await fetchJson(`https://world-ecletix.onrender.com/api/tabela-bundesliga`);
        
        if (!res || !res.logo || !res.tabela) {
            return reply("Nenhuma tabela encontrada ou resposta inv√°lida da API.");
        }

        const logoURL = res.logo;
        let cap = "Aqui est√° a tabela atualizada da Bundesliga:\n\n";

        // Formatando a tabela para enviar
        res.tabela.forEach(team => {
            cap += `${team.time} - Posi√ß√£o: ${team.posicao}, Jogos: ${team.jogos}, Vit√≥rias: ${team.vitorias}, Empates: ${team.empates}, Derrotas: ${team.derrotas}, Saldo: ${team.saldo}, Pontos: ${team.pontos}\n`;
        });

        loli.sendMessage(from, { image: { url: logoURL }, caption: cap }, { quoted: m });
    } catch (error) {
        console.error(error);
        return reply("Ocorreu um erro ao processar a solicita√ß√£o.");
    }
}
break;
case "tabela_seriea":
{
    try {
        const res = await fetchJson(`https://world-ecletix.onrender.com/api/tabela-seriea`);
        
        if (!res || !res.logo || !res.tabela) {
            return reply("Nenhuma tabela encontrada ou resposta inv√°lida da API.");
        }

        const logoURL = res.logo;
        let cap = "Aqui est√° a tabela atualizada da S√©rie A:\n\n";

        // Formatando a tabela para enviar
        res.tabela.forEach(team => {
            cap += `${team.time} - Posi√ß√£o: ${team.posicao}, Jogos: ${team.jogos}, Vit√≥rias: ${team.vitorias}, Empates: ${team.empates}, Derrotas: ${team.derrotas}, Saldo: ${team.saldo}, Pontos: ${team.pontos}\n`;
        });

        loli.sendMessage(from, { image: { url: logoURL }, caption: cap }, { quoted: m });
    } catch (error) {
        console.error(error);
        return reply("Ocorreu um erro ao processar a solicita√ß√£o.");
    }
}
break;
case "tabela_ligue1":
{
    try {
        const res = await fetchJson(`https://world-ecletix.onrender.com/api/tabela-ligue1`);
        
        if (!res || !res.logo || !res.tabela) {
            return reply("Nenhuma tabela encontrada ou resposta inv√°lida da API.");
        }

        const logoURL = res.logo;
        let cap = "Aqui est√° a tabela atualizada da Ligue 1:\n\n";

        // Formatando a tabela para enviar
        res.tabela.forEach(team => {
            cap += `${team.time} - Posi√ß√£o: ${team.posicao}, Jogos: ${team.jogos}, Vit√≥rias: ${team.vitorias}, Empates: ${team.empates}, Derrotas: ${team.derrotas}, Saldo: ${team.saldo}, Pontos: ${team.pontos}\n`;
        });

        loli.sendMessage(from, { image: { url: logoURL }, caption: cap }, { quoted: m });
    } catch (error) {
        console.error(error);
        return reply("Ocorreu um erro ao processar a solicita√ß√£o.");
    }
}
break;
case "tabela_portugal":
{

    try {
        const res = await fetchJson(`https://world-ecletix.onrender.com/api/tabela-portugal`);
        
        if (!res || !res.logo || !res.tabela) {
            return reply("Nenhuma tabela encontrada ou resposta inv√°lida da API.");
        }

        const logoURL = res.logo;
        let cap = "Aqui est√° a tabela atualizada da Primeira Liga de Portugal:\n\n";

        // Formatando a tabela para enviar
        res.tabela.forEach(team => {
            cap += `${team.time} - Posi√ß√£o: ${team.posicao}, Jogos: ${team.jogos}, Vit√≥rias: ${team.vitorias}, Empates: ${team.empates}, Derrotas: ${team.derrotas}, Saldo: ${team.saldo}, Pontos: ${team.pontos}\n`;
        });

        loli.sendMessage(from, { image: { url: logoURL }, caption: cap }, { quoted: m });
    } catch (error) {
        console.error(error);
        return reply("Ocorreu um erro ao processar a solicita√ß√£o.");
    }
}
break;
case "tv":
{
    try {
        const res = await fetchJson(`https://world-ecletix.onrender.com/api/tv`);
        //by luan

        if (!res || res.length === 0) { // Corrigido de "res" para "res"
            return reply("Nenhuma programa√ß√£o de TV encontrada no momento.");
        }

        let message = "**üì∫ Programa√ß√£o da TV:**\n\n";
        
        res.forEach((programa, index) => { // Corrigido de "res" para "res"
            const { title, link, image } = programa;

            message += `**${index + 1}. ${title}**\n`;
            if (link) message += `üîó **Link:** [Clique aqui](${link})\n`;
            if (image) message += `üñºÔ∏è **Imagem:** ${image}\n`;
            message += "\n"; // Adiciona espa√ßamento entre programas
        });

        reply(message);
    } catch (error) {
        console.error("Erro ao consultar a API de TV:", error);
        return reply("Ocorreu um erro ao processar a solicita√ß√£o.");
    }
}
break;
case "tvfutebol":
    try {
        const res = await fetchJson(`https://world-ecletix.onrender.com/api/futebol`);
        //by luan

        if (!res || res.length === 0) {
            return reply("N√£o h√° informa√ß√µes dispon√≠veis no momento.");
        }

        let message = `**üé• Futebol e Esportes Ao Vivo**\n\n`;
        res.forEach((evento, index) => {
            message += `**${index + 1}. ${evento.title}**\n`;
            message += `üîó **Link:** [Clique aqui](${evento.link})\n`;
            message += `üñºÔ∏è **Imagem:** ${evento.image}\n\n`;
        });

        reply(message);
    } catch (error) {
        console.error("Erro ao consultar a API de futebol:", error);
        return reply("Ocorreu um erro ao processar a solicita√ß√£o.");
    }
break;
case "jogosdodia": 
    try {
        const res = await fetchJson(`https://world-ecletix.onrender.com/api/jogosdodia`);
        //by luan

        if (!res || res.length === 0) {
            return reply("N√£o h√° informa√ß√µes de jogos dispon√≠veis no momento.");
        }

        let message = `**üéÆ Jogos do Dia - Ao Vivo**\n\n`;
        res.forEach((jogo, index) => {
            message += `**${index + 1}. ${jogo.title}**\n`;
            message += `üîó **Link:** [Clique aqui](${jogo.link})\n`;
            message += `üñºÔ∏è **Imagem:** ${jogo.image}\n\n`;
        });

        reply(message);
    } catch (error) {
        console.error("Erro ao consultar a API de jogos do dia:", error);
        return reply("Ocorreu um erro ao processar a solicita√ß√£o.");
    }
break;		
case "ucl": 
    try {
        const res = await fetchJson(`https://world-ecletix.onrender.com/api/ucl`);
        //by luan

        if (!res || res.length === 0) {
            return reply("N√£o h√° informa√ß√µes da UCL dispon√≠veis no momento.");
        }

        let message = `**üèÜ Liga dos Campe√µes da UEFA (UCL)**\n\n`;
        res.forEach((jogo, index) => {
            message += `**${index + 1}. ${jogo.match}**\n`;
            message += `üïí **Hor√°rio:** ${jogo.time}\n`;
            message += `üìç **Local:** ${jogo.venue}\n`;
            message += `üîó **Link:** [Clique aqui](${jogo.link})\n\n`;
        });

        reply(message);
    } catch (error) {
        console.error("Erro ao consultar a API da UCL:", error);
        return reply("Ocorreu um erro ao processar a solicita√ß√£o.");
    }
break;		
case "tvbrasileirao": 
    try {
        const res = await fetchJson(`https://world-ecletix.onrender.com/api/brasileirao`);
        //by luan

        if (!res || res.length === 0) {
            return reply("N√£o h√° informa√ß√µes sobre a transmiss√£o do Brasileir√£o dispon√≠veis no momento.");
        }

        let message = `**üì∫ Jogos do Brasileir√£o - Transmiss√£o**\n\n`;
        res.forEach((jogo, index) => {
            message += `**${index + 1}. ${jogo.match}**\n`;
            message += `üïí **Hor√°rio:** ${jogo.time}\n`;
            message += `üì∫ **Canal:** ${jogo.channel}\n`;
            message += `üìç **Local:** ${jogo.venue}\n\n`;
        });

        reply(message);
    } catch (error) {
        console.error("Erro ao consultar a API do Brasileir√£o:", error);
        return reply("Ocorreu um erro ao processar a solicita√ß√£o.");
    }
break;		
case "nfl": 
    try {
        const res = await fetchJson(`https://world-ecletix.onrender.com/api/nfl`);
        //by luan

        if (!res || res.length === 0) {
            return reply("N√£o h√° informa√ß√µes sobre jogos da NFL dispon√≠veis no momento.");
        }

        let message = `**üèà Jogos da NFL**\n\n`;
        res.forEach((jogo, index) => {
            message += `**${index + 1}. ${jogo.match}**\n`;
            message += `üïí **Hor√°rio:** ${jogo.time}\n`;
            message += `üì∫ **Canal:** ${jogo.channel}\n`;
            message += `üìç **Local:** ${jogo.venue}\n\n`;
        });

        reply(message);
    } catch (error) {
        console.error("Erro ao consultar a API da NFL:", error);
        return reply("Ocorreu um erro ao processar a solicita√ß√£o.");
    }
break;	
		case "ufc":
    try {
        const res = await fetchJson(`https://world-ecletix.onrender.com/api/ufc`);
        //by luan

        if (!res || res.length === 0) {
            return reply("N√£o h√° informa√ß√µes do UFC dispon√≠veis no momento.");
        }

        let message = `**ü•ä Ultimate Fighting Championship (UFC)**\n\n`;
        res.forEach((evento, index) => {
            message += `**${index + 1}. ${evento.title}**\n`;
            message += `üîó **Link:** [Clique aqui](${evento.link})\n`;
            message += `üñºÔ∏è **Imagem:** [Ver imagem](${evento.image})\n\n`;
        });

        reply(message);
    } catch (error) {
        console.error("Erro ao consultar a API do UFC:", error);
        return reply("Ocorreu um erro ao processar a solicita√ß√£o.");
    }
break;
		case "jogosdehoje":
    try {
        const res = await fetchJson(`https://world-ecletix.onrender.com/api/jogosdehoje`);
        //by luan

        if (!res || res.length === 0) {
            return reply("N√£o h√° jogos dispon√≠veis no momento.");
        }

        let message = `**‚öΩ Jogos de Hoje**\n\n`;
        res.forEach((jogo, index) => {
            message += `**${index + 1}. ${jogo.time1} x ${jogo.time2}**\n`;
            if (jogo.horario) message += `üïí **Hor√°rio:** ${jogo.horario}\n`;
            message += `üìä **Placar:** ${jogo.placar}\n`;
            if (jogo.status) message += `üìù **Status:** ${jogo.status}\n`;
            message += `\n`;
        });

        reply(message);
    } catch (error) {
        console.error("Erro ao consultar a API de Jogos de Hoje:", error);
        return reply("Ocorreu um erro ao processar a solicita√ß√£o.");
    }
break;
case "basquete": 
    try {
        const res = await fetchJson(`https://world-ecletix.onrender.com/api/basquete`);
        //by luan

        if (!res || res.length === 0) {
            return reply("N√£o h√° informa√ß√µes sobre jogos de Basquete dispon√≠veis no momento.");
        }

        let message = `**üèÄ Jogos de Basquete**\n\n`;
        res.forEach((jogo, index) => {
            message += `**${index + 1}. ${jogo.match}**\n`;
            message += `üïí **Hor√°rio:** ${jogo.time}\n`;
            message += `üì∫ **Canal:** ${jogo.channel}\n`;
            message += `üìç **Local:** ${jogo.venue}\n\n`;
        });

        reply(message);
    } catch (error) {
        console.error("Erro ao consultar a API de Basquete:", error);
        return reply("Ocorreu um erro ao processar a solicita√ß√£o.");
    }
break;		
case "esportedodia": 
    try {
        const res = await fetchJson(`https://world-ecletix.onrender.com/api/esportedodia`);
        const esporte = await res.json();

        if (!esporte || !esporte.title || !esporte.description || !esporte.url) {
            return reply("üèüÔ∏è N√£o foi poss√≠vel encontrar o esporte do dia no momento.");
        }

        // Mensagem formatada
        let message = `**üèÖ Esporte do Dia**\n\n`;
        message += `**üîπ T√≠tulo:** ${esporte.title}\n`;
        message += `**üìù Descri√ß√£o:** ${esporte.description}\n`;
        message += `**üîó Saiba mais:** [Clique aqui](${esporte.url})\n`;

        reply(message);
    } catch (error) {
        console.error("Erro ao consultar a API de esporte do dia:", error);
        return reply("‚ö†Ô∏è Ocorreu um erro ao buscar o esporte do dia. Tente novamente mais tarde.");
    }
break;
case 'contar':
if (args.length == 0) return reply( 'Tem Nada, Voc√™ N√£o Colocou Nada')
const count = body.slice(8).length
if (count === 1) {
reply(`O texto possui ${count} caractere.`)
} else if (count > 1) {
reply(`O texto possui ${count} caracteres.`)
}
break

case 'gerarcpf':
if(!isPremium) return reply(msg.premium)
cp1 = `${Math.floor(Math.random() * 300) + 600}`
cp2 = `${Math.floor(Math.random() * 300) + 600}`
cp3 = `${Math.floor(Math.random() * 300) + 600}`
cp4 = `${Math.floor(Math.random() * 30) + 60}`
cpf = `${cp1}.${cp2}.${cp3}-${cp4}`
loli.sendMessage(from, {text: `CPF gerado com sucesso : ${cpf}`}, {quoted: info})
break

case 'esquilo':
if (!isQuotedAudio) return reply('Marque um √°udio')
reply('espere')
muk = isQuotedAudio ? info.message.extendedTextMessage.contextInfo.quotedMessage.audioMessage : info.message.audioMessage
rane = getRandom('.'+await getExtension(muk.mimetype))
buffimg = await getFileBuffer(muk, 'audio')
fs.writeFileSync(rane, buffimg)
gem = rane
ran = getRandom('.mp3')
exec(`ffmpeg -i ${gem} -filter:a "atempo=0.7,asetrate=65100" ${ran}`, (err, stderr, stdout) => {
fs.unlinkSync(gem)
if (err) return reply('Error!')
hah = fs.readFileSync(ran)
loli.sendMessage(from, {audio: hah, mimetype: 'audio/mp4', ptt:true}, {quoted: info})
fs.unlinkSync(ran)
})
break

case 'nick':
case 'gerarnick':
case 'fazernick22':
try {
nick = args.join(' ')
if(!q) return reply('Escreva o Nick ou nome que voc√™ quer personalizar.')
axios.get(`http://yurimodz-apis.xyz:3006/api/fazernick?nome=Rooh&apikey=YuriModz2025`)
.then(dados => {
var emojis = `‚î†‚ùØ ‚ùí  `
nicks = dados.data
txt = `${botName}`
for (let i = 0; i < nicks.length; i++) {
txt += `${emojis} ${nicks[i]}\n`
}
txt += `\nCopyright
@Licht.Offc
@AquaBot.Wpp`
reply(`${txt.trim()}`)
}).catch(e => {
reply('N√£o pode incluir letras modificadas nem emojis, ou pode ser que a api caiu, mas volta logo logo...')  
})
} catch (e) {
if(String(e).includes("invalid json response body at")) {
console.log("A api caiu ou n√£o foi possivel executar esta a√ß√£o., espere retornar")   
} else {
reply('ERROR!!')
}
}
break
case 'illuminated-metallic':
case 'carved-wood':
case 'night-sky':
case 'butterfly':
case 'coffee-cup':
case 'picture-of-love':
case 'flower-typography':
case 'harry-potter':
case 'under-grass':
case 'pubg':
case 'naruto':
case 'metallic':
case 'shadow-sky':
case 'flaming':
case 'metalgold':
case 'cemiterio':
case 'efeitoneon':
case 'shadow':
case 'txtborboleta':
case 'cup':
case 'harryp':
case 'lobometal':
case 'neon2':
case 'madeira':
case 'florwooden':
case 'coffecup2':
case 'coffecup':
case 'lovemsg3':
case 'lovemsg2':
case 'lovemsg':
case 'narutologo':
case 'romantico':
case 'darkdragon':
case 'papel':
case 'fire':
case 'sweet-candy':  
  const inputTextForApi = args.join(' '); // Nome alterado para evitar conflitos

  // Usar o texto como est√°, j√° que a API aceita apenas um texto
  const singleText = inputTextForApi || 'Indefinido'; 

  reply(`AGUARDE...`);
  console.log('Aguardando resposta da API...');
  
  try {
    // Construir a URL da API
    const apiUrl = `https://world-ecletix.onrender.com/api/${command}?texto=${singleText}`;
    console.log('URL da API:', apiUrl);

    const res = await fetchJson(apiUrl);
    
    // Log da resposta completa da API
    console.log('Resposta da API:', res);

    // Verificar se a resposta cont√©m a URL da imagem
    if (res.imageUrl) {
      const generatedImageUrl = res.imageUrl;

      // Log da URL da imagem recebida
      console.log('URL da imagem recebida:', generatedImageUrl);

      // Enviar a imagem com a URL da resposta
      await loli.sendMessage(from, { image: { url: generatedImageUrl }, caption: `${command} gerado com sucesso!` }, { quoted: info });

      console.log(`${command} gerado com sucesso!`);
      
    } else {
      console.log('Erro: A URL da imagem est√° ausente na resposta.');
      reply("Erro ao gerar a imagem! Tente novamente mais tarde.");
    }
    
  } catch (e) {
    console.error('Erro ao gerar imagem:', e.message, e.stack);
    reply("Erro ao gerar a imagem! Tente novamente mais tarde.");
  }
  break;
case 'vingadores':
case 'ffbanner':
case 'marvel': 
case 'steel':
case 'america':   
case 'deadpool':   
case 'space':
case 'pornhub':
case 'typography':   
case 'pohub':  
case 'graffiti':  
case 'thor':  
  const userInputText = args.join(' '); // Nome mais espec√≠fico para a entrada do usu√°rio

  // Separar os textos por "/"
  const primaryText = userInputText.split('/')[0] || 'Indefinido';
  const secondaryText = userInputText.split('/')[1] || 'Indefinido';
  
  // Verificar se o separador '/' foi inclu√≠do
  if (!userInputText.includes("/")) {
    return reply(`Cad√™ a "/"?\nExemplo: ${prefix + command} texto1/texto2`);
  }
  
  reply(`AGUARDE...`);
  console.log('Aguardando resposta da API...');
  
  try {
    // Fazer solicita√ß√£o √† API passando os dois textos
    const apiUrl = `https://world-ecletix.onrender.com/api/${command}?texto=${primaryText}&texto2=${secondaryText}`;
    console.log('URL da API:', apiUrl);

    const res = await fetchJson(apiUrl);
    
    // Log da resposta completa da API
    console.log('Resposta da API:', res);

    // Verificar se a resposta cont√©m sucesso
    if (res.status && res.resultado && res.resultado.success) {
      const generatedImageUrl = res.resultado.imageUrl;

      // Log da URL da imagem recebida
      console.log('URL da imagem recebida:', generatedImageUrl);

      // Enviar a imagem com a URL da resposta
      await loli.sendMessage(from, { image: { url: generatedImageUrl }, caption: `${command} gerado com sucesso!` }, { quoted: info });

      console.log(`${command} gerado com sucesso!`);
      
    } else {
      console.log('Erro: A API n√£o retornou sucesso ou a URL da imagem est√° ausente.');
      reply("Erro ao gerar a imagem! Tente novamente mais tarde.");
    }
    
  } catch (e) {
    console.error('Erro ao gerar imagem:', e.message, e.stack);
    reply("Erro ao gerar a imagem! Tente novamente mais tarde.");
  }
  break;
  case 'gameplay':  
  console.log('Comando recebido:', args.join(' '));

  // Separar os dois textos por "/"
  const [gameplayText1 = 'Indefinido', gameplayText2 = 'Indefinido'] = args.join(' ').split('/');

  console.log('Gameplay Text 1:', gameplayText1);
  console.log('Gameplay Text 2:', gameplayText2);

  if (!args.join(' ').includes("/") || args.join(' ').split('/').length < 2) {
    console.log('Erro: Formato incorreto. Textos n√£o est√£o separados corretamente.');
    return reply(`Cad√™ os dois textos separados por "/"?\nExemplo: ${prefix + command} texto1/texto2`);
  }

  reply(`AGUARDE...`);
  console.log('Aguardando resposta da API...');

  try {
    // Construir a URL corretamente conforme especificado
    const apiUrl = `https://world-ecletix.onrender.com/api/gameplay?texto=${gameplayText1}&texto=${gameplayText2}`;
    console.log('URL da API:', apiUrl);

    // Fazer solicita√ß√£o √† API passando os 2 textos
    const response = await fetchJson(apiUrl);
    console.log('Resposta da API:', response);

    // Verificar se a URL da imagem foi retornada corretamente
    if (response.imageUrl) {
      let imageUrl = response.imageUrl;

      console.log('URL da imagem recebida:', imageUrl);

      // Corrigir a URL se tiver barra dupla "//"
      if (imageUrl.includes('//')) {
        imageUrl = imageUrl.replace('https://', '').replace('//', '/');
        imageUrl = 'https://' + imageUrl;
      }

      console.log('URL da imagem corrigida:', imageUrl);

      // Enviar a imagem com a URL da resposta
      await loli.sendMessage(from, { image: { url: imageUrl }, caption: `${command} gerado com sucesso!` }, { quoted: info });
      console.log('Imagem enviada com sucesso!');
      
    } else {
      console.log('Erro: A URL da imagem est√° ausente na resposta.');
      reply("Erro ao gerar a imagem! Tente novamente mais tarde.");
    }

  } catch (e) {
    console.error('Erro ao gerar imagem:', e.message, e.stack);
    reply("Erro ao gerar a imagem! Tente novamente mais tarde.");
  }
  break;
case 'googlesg':  
  console.log('Comando recebido:', args.join(' '));

  const textooo = args.join(' ');

  // Separar os tr√™s textos por "/"
  const texto1 = textooo.split('/')[0] || 'Indefinido';
  const texto2 = textooo.split('/')[1] || 'Indefinido';
  const texto3 = textooo.split('/')[2] || 'Indefinido';

  console.log('Texto 1:', texto1);
  console.log('Texto 2:', texto2);
  console.log('Texto 3:', texto3);

  if (!textooo.includes("/") || textooo.split('/').length < 3) {
    console.log('Erro: Formato incorreto. Textos n√£o est√£o separados corretamente.');
    return reply(`Cad√™ os tr√™s textos separados por "/"?\nExemplo: ${prefix + command} texto1/texto2/texto3`);
  }

  reply(`AGUARDE...`);
  console.log('Aguardando resposta da API...');

  try {
    // Construir a URL corretamente conforme especificado
    const apiUrl = `https://world-ecletix.onrender.com/api/googlesg?texto=${texto1}&texto2=${texto2}&texto3=${texto3}`;
    console.log('URL da API:', apiUrl);

    // Fazer solicita√ß√£o √† API passando os 3 textos
    const response = await fetchJson(apiUrl);
    console.log('Resposta da API:', response);

    // Verificar se a URL da imagem foi retornada corretamente
    if (response.imageUrl) {
      let imageUrl = response.imageUrl;

      console.log('URL da imagem recebida:', imageUrl);

      // Corrigir a URL se tiver barra dupla "//"
      if (imageUrl.includes('//')) {
        imageUrl = imageUrl.replace('https://', '').replace('//', '/');
        imageUrl = 'https://' + imageUrl;
      }

      console.log('URL da imagem corrigida:', imageUrl);

      // Enviar a imagem com a URL da resposta
      await loli.sendMessage(from, { image: { url: imageUrl }, caption: `${command} gerado com sucesso!` }, { quoted: info });
      console.log('Imagem enviada com sucesso!');
      
    } else {
      console.log('Erro: A URL da imagem est√° ausente na resposta.');
      reply("Erro ao gerar a imagem! Tente novamente mais tarde.");
    }

  } catch (e) {
    console.error('Erro ao gerar imagem:', e.message, e.stack);
    reply("Erro ao gerar a imagem! Tente novamente mais tarde.");
  }
  break;
case 'steel':
case 'dragon-ball':
case 'praia':
case 'graffiti':
case 'star-wars':
case 'glitch':
case 'royal':
case 'cloud':
case 'birthday':
case 'natal':
case 'matirix':
case 'galaxy':
case 'snow':  
case 'devil':
case 'anonymous':
case 'boom':
case 'mascotegame':
case 'mascoteavatar':
case 'wingeffect':
case 'angelglx':
case 'gizquadro':
case 'blackpink': 
case 'girlmascote':
case 'logogame':
case 'logogame':
case 'smoke':
case 'papel':
case 'angelwing':
case 'hackneon':
case 'fpsmascote':
case 'equipemascote':
case 'txtquadrinhos':
case '3dsilver':
case 'goldtext':
case 'starballons':
case 'frozen':
case 'halloween':
case 'ffavatar':
  textin = args.join(" ")
  if (!q) return reply(`Qual o nome?`)
  reply('enviando...')
  
  try {
    // Fazer solicita√ß√£o √† API usando o comando din√¢mico na URL
    const response = await fetchJson(`https://world-ecletix.onrender.com/api/${command}?texto=${textin}`);
    
    // Verificar se o resultado foi bem-sucedido
    if (response.status && response.resultado && response.resultado.success) {
      const imageUrl = response.resultado.imageUrl;
      
      // Baixar a imagem e enviar a resposta
      const blabla = await getBuffer(imageUrl);
      await loli.sendMessage(from, { image: blabla }, { quoted: info });
      
    } else {
      reply("Erro ao criar sua logo! Tente novamente mais tarde.");
    }
    
  } catch (e) {
    console.error('Erro ao gerar logo:', e)
    reply("Erro ao criar sua logo! Tente novamente mais tarde.")
  }
  break
  //by luanzin
case "artilheirosdobr":
{
    try {
        // Faz a requisi√ß√£o para a API de artilheiros
        const res = await fetchJson('https://world-ecletix.onrender.com/api/artilheiro');
        const data = await res.text();  // Obt√©m a resposta como texto

        if (!data) {
            return reply("Nenhum dado de artilheiros encontrado.");
        }

        // O texto est√° formatado, ent√£o voc√™ pode exibir diretamente ou processar
        const message = `**Artilheiros do Brasileir√£o:**\n\n${data}`;
        
        reply(message);
    } catch (error) {
        console.error(error);
        return reply("Ocorreu um erro ao processar a solicita√ß√£o.");
    }
}
break;
case "tabeladobr":
{
    try {
        // Faz a requisi√ß√£o para a API da tabela
        const res = await fetchJson('https://world-ecletix.onrender.com/api/tabela');
        const data = await res.text();  // Obt√©m a resposta como texto

        if (!data) {
            return reply("Nenhum dado da tabela foi encontrado.");
        }

        // O texto est√° formatado, ent√£o podemos exibir diretamente
        const message = `**Tabela do Brasileir√£o:**\n\n${data}`;
        
        reply(message);
    } catch (error) {
        console.error(error);
        return reply("Ocorreu um erro ao processar a solicita√ß√£o da tabela.");
    }
}
break;
// by luanzin
case 'pergunta':
try {
ABC = await fetchJson(`https://api.bronxyshost.com.br/api-bronxys/PERGUNTE_E_EU_RESPONDO?q=${q.trim()}&apikey=tiomaker8930`)
reply(`( ${ABC.msg} )`)
} catch { 
reply("Erro..")
}
break;

case 'gimage':
try {
if(!q.trim()) return reply(`Exemplo: ${prefix+command} naruto`)
ABC = await fetchJson(`https://api.bronxyshost.com.br/api-bronxys/google-img?nome=${q}&apikey=tiomaker8930`);
loli.sendMessage(from, {image: {url: ABC[Math.floor(Math.random() * ABC.length)].url}}).catch(() => {
return reply("Erro..");
})
} catch (e) {
return reply("Erro..");
}
break;

case 'esportenoticias': case 'esportenoticia': case 'espnoticia': case 'espnoticias':
case 'noticiasesporte': case 'noticiaesporte': case 'noticiaesp': case 'noticiasesp':
case 'esporte_noticias': case 'esporte_noticia': case 'esporte-noticias': case 'esporte-noticia':
reply("Aguarde, realizando a√ß√£o..")
try {
ABC = await fetchJson(`https://api.bronxyshost.com.br/api-bronxys/esporte_noticias?apikey=tiomaker8930`)
AB =""
for ( i = 1; i < ABC.length; i++) {
AB += `${ABC[i].titulo}\n\n`
}
loli.sendMessage(from, {image: {url: ABC[0].img}, caption: AB}, {quoted: info})
} catch {
return reply("Erro, tente novamente ou aguarde at√© voltar ao normal.")
}
break;

case "playstore":
if(q.length < 2) return reply("Cade o t√≠tulo do apk que deseja pesquisar?")
data = await fetchJson(`https://api.bronxyshost.com.br/api-bronxys/playstore?nome=${q}&apikey=tiomaker8930`)
ABC = "Play Store pesquisa:\n\n"
for(let a of data.resultados) {
ABC += `\n\n${a.title}\n\n----------------------------------------------\nID:
${a.appId}\n\n----------------------------------------------\n\nURL:
${a.url}\n\n----------------------------------------------`
}
reply(ABC)
break;

case 'celular2':
try {
if(!q.trim()) return reply(`Exemplo: ${prefix+command} galaxy a9 2018`);
reply("Realizando a√ß√£o..");
ABC = await fetchJson(`https://api.bronxyshost.com.br/api-bronxys/info_celular?celular=${q}&apikey=tiomaker8930`);
reply(`üì± Celular: ${ABC.celular || "N√£o encontrado"}\n\nInforma√ß√µes:\n${ABC.resumo || ABC.infoc || "N√£o encontrado, seja mais espec√≠fico, a marca e a vers√£o"}`);
} catch (e) {
return reply("Erro...");
}
break;

case 'amazon': case 'amazonsearch':
if(q.trim().length < 4) return reply(`Exemplo: ${prefix+command} fone redmi airdots 2`)
try {
reply("Aguarde..")
ABC = await fetchJson(`https://api.bronxyshost.com.br/api-bronxys/Amazon_Pesquisa?pesquisa=${q.trim()}&apikey=tiomaker8930`)
RST = "Pesquisa Amazon:\n\n"
for ( i  = 0; i < (ABC.length > 40 ? 40: ABC.length); i++) {
RST +=  `( ${i+1} ) - Titulo: ${ABC[i].titulo}\n- Pre√ßo: ${ABC[i].preco}\n- Url: ${ABC[i].url}\n${"_".repeat(27)}\n\n`
}
reply(RST);
} catch {
return reply(`Erro, n√£o foi possivel encontrar.`)
}
break;

case 'pesquisa_yt': case 'ytsearch':
try {
if(!q.trim()) return reply(`Digite o nome de algum v√≠deo ou m√∫sica que deseja encontrar..`);
AB = await fetchJson(`https://api.bronxyshost.com.br/api-bronxys/pesquisa_ytb?nome=${q}&apikey=tiomaker8930`)
ABC = `${"-\t".repeat(13)}\n\n`
for (var i of AB) {
ABC += `Titulo: ${i.titulo}\nUrl: ${i.url}\nTempo: ${i.tempo}\nPostado: ${i.postado}\n\nDescri√ß√£o: ${i.desc}\n\n`;
ABC += `${"-\t".repeat(13)}\n\n`
}
reply(ABC);
} catch (e) {
return reply(`Erro....`)
}
break;
// by luanzin
case 'print': case 'printdesite':
if(!q.trim()) return reply(`Faltando a url do site que quer tirar print, Exemplo: ${prefix+command} https://google.com\n\nN√£o esque√ßa do https se o site tiver, ou http se n√£o for um site com ssl`)
try {
loli.sendMessage(from, {image: {url: `https://api.bronxyshost.com.br/api-bronxys/print_de_site?url=${q.trim()}&apikey=tiomaker8930`}}, {quoted: info}) 
} catch {
return reply("Erro..");
}
break;
//by luanzin 
case "transcrever": {
if((isMedia && !info.message.imageMessage && info.message.videoMessage || isQuotedVideo || isQuotedAudio)) {
reply("Aguarde.. transcrevendo seu √°udio..")
muk = isQuotedVideo ? JSON.parse(JSON.stringify(info).replace('quotedM','m')).message.extendedTextMessage.contextInfo.message.videoMessage : isQuotedAudio ? JSON.parse(JSON.stringify(info).replace('quotedM','m')).message.extendedTextMessage.contextInfo.message.audioMessage : info.message.audioMessage

let base64String = await getFileBuffer(muk, isQuotedAudio ? 'audio': 'video');
let buffer = Buffer.from(base64String, 'base64');

let formData = new FormData();
formData.append('file', buffer, {filename: isQuotedAudio ? 'audiofile': 'videofile', contentType: muk.mimetype });

fetch(`https://api.bronxyshost.com.br/transcrever?apikey=tiomaker8930`, {
method: 'POST',
body: formData
}).then(response => response.json())
.then(data => {
reply(data.texto);
}).catch((Err) => {
console.log(Err);
reply("Sinto muito, alguns formatos de √°udio/v√≠deo, eu n√£o consigo transcrever, em caso de d√∫vidas, tente novamente...");
});
} else {
return reply("Marque um audio ou um v√≠deo.")
}
}
break;
// by luanzin dev
case 'attp': case 'attp2': case 'attp3': case 'attp4': case 'attp5': case 'attp6': case 'attp7': case 'attp8': case 'attp9': case 'attp10':
    try {
        if (!q.trim()) return reply(`Exemplo: ${prefix + command} bronxys`);
        reply("AGUARDE, REALIZANDO A√á√ÉO.");
        
        // URL da nova API
        const apiUrl = `https://world-ecletix.onrender.com/api/rgb?texto=${encodeURIComponent(q)}`;
        
        // Enviando a mensagem com o sticker gerado pela nova API
        loli.sendMessage(from, { sticker: { url: apiUrl } }, { quoted: info }).catch(() => {
            return reply("Erro ao gerar o sticker.");
        });
    } catch (e) {
        return reply("Erro ao processar sua solicita√ß√£o.");
    }
    break;
// Fun√ß√£o gen√©rica para enviar as figurinhas
async function enviarFigurinhas(url) {
    await loli.sendMessage(sender, { sticker: { url: url } });
}
// by luanzin dev 
case 'figuroblox': case 'figu_roblox':
    if (!q) return reply("Insira a quantidade de figurinhas que deseja que eu envie!");
    if (!Number(args[0]) || Number(q.trim()) > 50) return reply("Digite a quantidade de figurinhas que deseja que eu envie.. n√£o pode mais de 50..");
    for (let i = 0; i < q; i++) {
        await sleep(680);
        await enviarFigurinhas(`https://world-ecletix.onrender.com/api/figu_roblox`);
    }
    break;

case 'figu_coreana': case 'figucoreana':
    if (!q) return reply("Insira a quantidade de figurinhas que deseja que eu envie!");
    if (!Number(args[0]) || Number(q.trim()) > 50) return reply("Digite a quantidade de figurinhas que deseja que eu envie.. n√£o pode mais de 50..");
    for (let i = 0; i < q; i++) {
        await sleep(680);
        await enviarFigurinhas(`https://world-ecletix.onrender.com/api/figu_coreana`);
    }
    break;

case 'figudesenho': case 'figu_desenho':
    if (!q) return reply("Insira a quantidade de figurinhas que deseja que eu envie!");
    if (!Number(args[0]) || Number(q.trim()) > 50) return reply("Digite a quantidade de figurinhas que deseja que eu envie.. n√£o pode mais de 50..");
    for (let i = 0; i < q; i++) {
        await sleep(680);
        await enviarFigurinhas(`https://world-ecletix.onrender.com/api/figu_desenho`);
    }
    break;

case 'figurinhas1': case 'figurinhas1':
    if (!q) return reply("Insira a quantidade de figurinhas que deseja que eu envie!");
    if (!Number(args[0]) || Number(q.trim()) > 50) return reply("Digite a quantidade de figurinhas que deseja que eu envie.. n√£o pode mais de 50..");
    for (let i = 0; i < q; i++) {
        await sleep(680);
        await enviarFigurinhas(`https://world-ecletix.onrender.com/api/figurinhas`);
    }
    break;

case 'figurinhas2': case 'Figurinhas2':
    if (!q) return reply("Insira a quantidade de figurinhas que deseja que eu envie!");
    if (!Number(args[0]) || Number(q.trim()) > 50) return reply("Digite a quantidade de figurinhas que deseja que eu envie.. n√£o pode mais de 50..");
    for (let i = 0; i < q; i++) {
        await sleep(680);
        await enviarFigurinhas(`https://world-ecletix.onrender.com/api/figurinhas2`);
    }
    break;

case 'figuemoji': case 'figu_emoji':
    if (!q) return reply("Insira a quantidade de figurinhas que deseja que eu envie!");
    if (!Number(args[0]) || Number(q.trim()) > 50) return reply("Digite a quantidade de figurinhas que deseja que eu envie.. n√£o pode mais de 50..");
    for (let i = 0; i < q; i++) {
        await sleep(680);
        await enviarFigurinhas(`https://world-ecletix.onrender.com/api/figu_emoji`);
    }
    break;

case 'figualeatorio': case 'figu_alearorio':
    if (!q) return reply("Insira a quantidade de figurinhas que deseja que eu envie!");
    if (!Number(args[0]) || Number(q.trim()) > 50) return reply("Digite a quantidade de figurinhas que deseja que eu envie.. n√£o pode mais de 50..");
    for (let i = 0; i < q; i++) {
        await sleep(680);
        await enviarFigurinhas(`https://world-ecletix.onrender.com/api/figu_aleatorio`);
    }
    break;

case 'figu_anime': case 'figu_anime':
    if (!q) return reply("Insira a quantidade de figurinhas que deseja que eu envie!");
    if (!Number(args[0]) || Number(q.trim()) > 50) return reply("Digite a quantidade de figurinhas que deseja que eu envie.. n√£o pode mais de 50..");
    for (let i = 0; i < q; i++) {
        await sleep(680);
        await enviarFigurinhas(`https://world-ecletix.onrender.com/api/figu_anime`);
    }
    break;

case 'figuraiva': case 'figu_raiva':
    if (!q) return reply("Insira a quantidade de figurinhas que deseja que eu envie!");
    if (!Number(args[0]) || Number(q.trim()) > 50) return reply("Digite a quantidade de figurinhas que deseja que eu envie.. n√£o pode mais de 50..");
    for (let i = 0; i < q; i++) {
        await sleep(680);
        await enviarFigurinhas(`https://world-ecletix.onrender.com/api/figu_raiva`);
    }
    break;

case 'figuengracada': case 'figu_engracada':
    if (!q) return reply("Insira a quantidade de figurinhas que deseja que eu envie!");
    if (!Number(args[0]) || Number(q.trim()) > 50) return reply("Digite a quantidade de figurinhas que deseja que eu envie.. n√£o pode mais de 50..");
    for (let i = 0; i < q; i++) {
        await sleep(680);
        await enviarFigurinhas(`https://world-ecletix.onrender.com/api/figu_engracada`);
    }
    break;
case 'Linkdoc': case 'linkdoc': {
    try {
        if (!q.trim()) return reply(`- Exemplo: ${prefix}playlink nome da m√∫sica\na m√∫sica ser√° baixada, s√≥ basta escolher √°udio ou v√≠deo, se n√£o baixar, o YouTube privou de n√£o baixarem, ou algo do tipo..`);
        
        // Nova API para pesquisa
        const data = await fetchJson(`https://world-ecletix.onrender.com/api/pesquisayt?query=${q}`);
        
        // Verifica se h√° resultados
        if (!data || !data.formattedVideos || data.formattedVideos.length === 0) return reply("Desculpe, n√£o consegui encontrar a m√∫sica.");

        // Pegando a primeira informa√ß√£o do array formattedVideos
        const firstResult = data.formattedVideos[0];

        const N_E = " N√£o encontrado.";
        const bla = `
        ‡πñ€£‚Ä¢ Titulo: ${firstResult.title || N_E}
        ‡πñ€£‚Ä¢ Tempo: ${firstResult.duration || N_E}
        ‡πñ€£‚Ä¢ Canal: ${firstResult.channel || N_E}
        ‡πñ€£‚Ä¢ Visualiza√ß√µes: ${firstResult.views || N_E}

        ‚ñ†‚ñ†‚ñ†‚ñ†‚ñ† 100% 

        E·•â·•¥·•Ü·•£h·•≤ ·•ôÍßë·•≤ ·•ÜœÅ·•¥·•≤·•Ü...

        Se desejar baixar o v√≠deo, use ${prefix}videolink ${firstResult.link.trim()}
        `;

        // Envia a imagem com os detalhes da m√∫sica
        loli.sendMessage(from, { image: { url: firstResult.thumbnail || logoslink?.logo }, caption: bla }, { quoted: info });

        // Envia o √°udio como documento
        loli.sendMessage(from, { document: { url: `https://world-ecletix.onrender.com/api/linkmp3?url=${encodeURIComponent(firstResult.link)}` }, mimetype: "audio/mpeg", fileName: `${firstResult.title || 'play'}.mp3` }, { quoted: info })
            .catch(e => {
                return reply("Erro ao tentar baixar a m√∫sica.");
            });
    } catch (e) {
        return reply("Seja mais espec√≠fico, n√£o deu pra encontrar com apenas isto... / Erro");
    }
}
break;
case 'playdoc': case 'Playdoc':  {
    try {
        if (!q.trim()) return reply(`- Exemplo: ${prefix}playdoc nome da m√∫sica\na m√∫sica ser√° baixada, s√≥ basta escolher √°udio ou v√≠deo, se n√£o baixar, o YouTube privou de n√£o baixarem, ou algo do tipo..`);
        
        // Nova API para pesquisa
        console.log('Buscando m√∫sica com a query:', q);
        data = await fetchJson(`https://world-ecletix.onrender.com/api/pesquisayt?query=${q}`);
        
        // Verifica se h√° resultados
        if (!data || !data.formattedVideos || data.formattedVideos.length === 0) return reply("Desculpe, n√£o consegui encontrar a m√∫sica.");

        // Pegando a primeira informa√ß√£o do array formattedVideos
        const firstResult = data.formattedVideos[0];
        console.log('Resultado da pesquisa obtido:', firstResult);

        var N_E = " N√£o encontrado.";
        var bla = `
        ‡πñ€£‚Ä¢ Titulo: ${firstResult.title || N_E}
        ‡πñ€£‚Ä¢ Tempo: ${firstResult.duration || N_E}
        ‡πñ€£‚Ä¢ Canal: ${firstResult.channel || N_E}
        ‡πñ€£‚Ä¢ Visualiza√ß√µes: ${firstResult.views || N_E}

        ‚ñ†‚ñ†‚ñ†‚ñ†‚ñ† 100% 

        E·•â·•¥·•Ü·•£h·•≤ ·•ôÍßë·•≤ ·•ÜœÅ·•¥·•≤·•Ü...

        Se desejar baixar o v√≠deo, use ${prefix}play_video ${firstResult.link.trim()}
        `;

        // Envia a imagem com os detalhes da m√∫sica
        console.log('Enviando imagem com detalhes da m√∫sica...');
        loli.sendMessage(from, { image: { url: firstResult.thumbnail || logoslink?.logo }, caption: bla }, { quoted: info });

        // Nova API para download da m√∫sica como documento
        const audioUrl = `https://world-ecletix.onrender.com/api/musica?name=${encodeURIComponent(firstResult.title)}`;
        console.log('URL do √°udio gerada:', audioUrl);

        loli.sendMessage(from, { document: { url: audioUrl }, mimetype: "audio/mpeg", fileName: `${firstResult.title || 'play'}.mp3` }, { quoted: info })
            .then(() => {
                console.log('M√∫sica enviada como documento com sucesso.');
            })
            .catch(e => {
                console.log('Erro ao enviar o documento de m√∫sica:', e);
                return reply("Erro ao tentar baixar a m√∫sica.");
            });
    } catch (e) {
        console.log('Erro no bloco try-catch:', e);
        return reply("n√£o foi poss√≠vel baixar ou encontrar esse √°udio üêû");
    }
}
break;		
case 'PLAY6':
case 'Play6':
case 'play6': {
try {
if(!q.trim()) return reply(`- Exemplo: ${prefix}play nome da m√∫sica\na m√∫sica ser√° baixada, s√≥ basta escolher √°udio ou v√≠deo, se n√£o baixar, o YouTube privou de n√£o baixarem, ou algo do tipo..`)
data = await fetchJson(`https://api.bronxyshost.com.br/api-bronxys/pesquisa_ytb?nome=${q}&apikey=tiomaker8930`)
if(data[0]?.tempo?.length >= 7) return reply("Desculpe, este video ou audio √© muito grande, n√£o poderei realizar este pedido, pe√ßa outra m√∫sica abaixo de uma hora.")
var N_E = " N√£o encontrado."
var bla = `
‡πñ€£‚Ä¢ Titulo: ${data[0]?.titulo||N_E}
‡πñ€£‚Ä¢ Tempo: ${data[0]?.tempo||N_E}
‡πñ€£‚Ä¢ Postado: ${data[0]?.postado||N_E}
‡πñ€£‚Ä¢ Descri√ß√£o: ${data[0]?.desc||N_E}

‚ñ†‚ñ†‚ñ†‚ñ†‚ñ† 100% 

E·•â·•¥·•Ü·•£h·•≤ ·•ôÍßë·•≤ ·•ÜœÅ·•¥·•≤·•Ü...

Se desejar baixar o video, use ${prefix}play_video ${q.trim()}
`
loli.sendMessage(from, {image: {url: data[0]?.thumb || logoslink?.logo}, caption: bla}, {quoted: info})
loli.sendMessage(from, {audio: {url: `https://api.bronxyshost.com.br/api-bronxys/play?nome_url=${q}&apikey=tiomaker8930`}, mimetype: "audio/mpeg", fileName: data[0]?.titulo || "play.mp3"}, {quoted: info}).catch(e => {
return reply("Erro..")
})
} catch (e) {
console.log(e)
return reply("Seja mais espec√≠fico, n√£o deu pra encontrar com apenas isto... / Erro");
}
}
break;
case 'clipe7':
case 'play7':
case 'playvideo7': {
try {
if(!q.trim()) return reply(`- Exemplo: ${prefix}play nome da m√∫sica\na m√∫sica ser√° baixada, s√≥ basta escolher √°udio ou v√≠deo, se n√£o baixar, o YouTube privou de n√£o baixarem, ou algo do tipo..`)
data = await fetchJson(`https://api.bronxyshost.com.br/api-bronxys/pesquisa_ytb?nome=${q}&apikey=tiomaker8930`)
if(data[0]?.tempo?.length >= 7) return reply("Desculpe, este video ou audio √© muito grande, n√£o poderei realizar este pedido, pe√ßa outra m√∫sica abaixo de uma hora.")
var N_E = " N√£o encontrado."
var bla = `
‡πñ€£‚Ä¢ Titulo: ${data[0]?.titulo||N_E}
‡πñ€£‚Ä¢ Tempo: ${data[0]?.tempo||N_E}
‡πñ€£‚Ä¢ Postado: ${data[0]?.postado||N_E}
‡πñ€£‚Ä¢ Descri√ß√£o: ${data[0]?.desc||N_E}

‚ñ†‚ñ†‚ñ†‚ñ†‚ñ† 100% 

E·•â·•¥·•Ü·•£h·•≤ ·•ôÍßë·•≤ ·•ÜœÅ·•¥·•≤·•Ü...

Se desejar baixar o √°udio, use ${prefix}play ${q.trim()}
`
loli.sendMessage(from, {image: {url: data[0]?.thumb || logoslink?.logo}, caption: bla}, {quoted: info})
loli.sendMessage(from, {video: {url: `https://api.bronxyshost.com.br/api-bronxys/play_video?nome_url=${q}&apikey=tiomaker8930`}, mimetype: "video/mp4", fileName: data[0]?.titulo || "play.mp4"}, {quoted: info}).catch(e => {
return reply("Erro..")
})
} catch (e) {
console.log(e)
return reply("Seja mais espec√≠fico, n√£o deu pra encontrar com apenas isto... / Erro");
}
}
break;

case 'testedevoz': {
  try {
    if(!q.trim()) return reply(`- Exemplo: ${prefix}play nome da m√∫sica\na m√∫sica ser√° baixada, s√≥ basta escolher √°udio ou v√≠deo, se n√£o baixar, o YouTube privou de n√£o baixarem, ou algo do tipo..`)
    
    data = await fetchJson(`https://api.bronxyshost.com.br/api-bronxys/pesquisa_ytb?nome=${q}&apikey=tiomaker8930`)
    if(data[0]?.tempo?.length >= 7) return reply("Desculpe, este video ou audio √© muito grande, n√£o poderei realizar este pedido, pe√ßa outra m√∫sica abaixo de uma hora.")
    
    var N_E = " N√£o encontrado."
    var bla = `
‡πñ€£‚Ä¢ Titulo: ${data[0]?.titulo || N_E}
‡πñ€£‚Ä¢ Tempo: ${data[0]?.tempo || N_E}
‡πñ€£‚Ä¢ Postado: ${data[0]?.postado || N_E}
‡πñ€£‚Ä¢ Descri√ß√£o: ${data[0]?.desc || N_E}

‚ñ†‚ñ†‚ñ†‚ñ†‚ñ† 100% 

E·•â·•¥·•Ü·•£h·•≤ ·•ôÍßë·•≤ ·•ÜœÅ·•¥·•≤·•Ü...

Se desejar baixar o video, use ${prefix}play_video ${q.trim()}
`
    loli.sendMessage(from, { image: { url: data[0]?.thumb || logoslink?.logo }, caption: bla }, { quoted: info })
    loli.sendMessage(from, { audio: { url: `https://api.bronxyshost.com.br/api-bronxys/play?nome_url=${q}&apikey=tiomaker8930` }, mimetype: "audio/mpeg", fileName: data[0]?.titulo || "play.mp3", ptt: true }, { quoted: info })
      .catch(e => {
        return reply("Erro..")
      })
  } catch (e) {
    console.log(e)
    return reply("Seja mais espec√≠fico, n√£o deu pra encontrar com apenas isto... / Erro");
  }
}
break;
case "letra": case "liryc": case "letradamusica": case "letramusic": case "letramusica": {
if(!q.trim()) return reply(`Exemplo: ${prefix+command} Ela me traiu`)
try {
reply("Aguarde...")
const abc = await fetchJson(`https://api.bronxyshost.com.br/api-bronxys/letra_musica?letra=${q.trim()}&apikey=tiomaker8930`)
reply(` - Titulo: ${abc.titulo}\n\n - Compositor: ${abc.compositor}\n\n - Letra: ${abc.letra}`)
} catch (e) {
reply("Erro...")
}
}
break;
case 'face_video2':
try {
if(!q.includes("facebook") && !q.includes("fb.watch")) return reply(`Exemplo: ${prefix+command} o link do Facebook`);
reply("Realizando a√ß√£o..")
loli.sendMessage(from, {video: {url: `https://api.bronxyshost.com.br/api-bronxys/${command}?url=${q}&apikey=tiomaker8930`}, mimetype: "video/mp4"}).catch(e => {
return reply("Erro..")
})
} catch (e) {
return reply("Erro..")
}
break;

case 'face_audio2':
try {
if(!q.includes("facebook") && !q.includes("fb.watch")) return reply(`Exemplo: ${prefix+command} o link do Facebook`);
reply("Realizando a√ß√£o..")
loli.sendMessage(from, {audio: {url: `https://api.bronxyshost.com.br/api-bronxys/${command}?url=${q}&apikey=tiomaker8930`}, mimetype: "audio/mpeg"}).catch(e => {
return reply("Erro..")
})
} catch (e) {
return reply("Erro..")
}
break;
case "threads": case "thr":
if(!q.includes("threads.net")) return reply(`Cade o link do threads? Exemplo: ${prefix+command} https://www.threads.net/@tali_mito22/post/C_3_FbKyHtm/?xmt=AQGzOjjOpgW7PRhCZRcda0GvAqfvYqPWDwHgzn_v6_FVLQ`)
reply("Aguarde, estou enviando..")
try {
loli.sendMessage(from, {video: {url: `https://api.bronxyshost.com.br/api-bronxys/threads?url=${q}&apikey=tiomaker8930`}})
} catch (e) {
return reply("Erro, tente falar com o suporte...")
}
break;
case 'kwai': {
if(!q.trim().includes("kwai")) return reply(`Exemplo: ${prefix+command} LINK DO KWAI`);
reply(Res_Aguarde);
try {
loli.sendMessage(from, {video: {url: `https://api.bronxyshost.com.br/api-bronxys/kwai?url=${q.trim()}&apikey=tiomaker8930`}, mimetype: "video/mp4"}, {quoted: info})
} catch (e) {
console.log(e);
return reply("Erro...");
}
}
break;
case 'twitter_video2':
try {
if(!q.includes("twitter")) return reply(`Exemplo: ${prefix+command} o link do Twitter`);
reply("Realizando a√ß√£o..")
loli.sendMessage(from, {video: {url: `https://api.bronxyshost.com.br/api-bronxys/${command}?url=${q}&apikey=tiomaker8930`}, mimetype: "video/mp4"}).catch(e => {
return reply("Erro..")
})
} catch (e) {
return reply("Erro..")
}
break;

case 'twitter_audio2':
try {
if(!q.includes("twitter")) return reply(`Exemplo: ${prefix+command} o link do Twitter`);
reply("Realizando a√ß√£o..")
loli.sendMessage(from, {audio: {url: `https://api.bronxyshost.com.br/api-bronxys/${command}?url=${q}&apikey=tiomaker8930`}, mimetype: "audio/mpeg"}).catch(e => {
return reply("Erro..")
})
} catch (e) {
return reply("Erro..")
}
break;

case 'instagram_link':
try {
if(q.length < 5) return reply(`Exemplo: ${prefix+command} o link`);
ABC = await fetchJson(`https://api.bronxyshost.com.br/api-bronxys/instagram?url=${q.trim()}&apikey=tiomaker8930`)
reply("Realizando a√ß√£o..")
let DM_T = ABC.msg[0].type
var A_T = DM_T === "mp4" ? "video/mp4" : DM_T === "webp" ? "image/webp" : DM_T === "jpg" ? "image/jpeg" : DM_T === "mp3" ? "audio/mpeg" : "video/mp4"
loli.sendMessage(from, {[A_T.split("/")[0]]: {url: ABC.msg[0].url}, mimetype: A_T}, {quoted: info}).catch(e => {
return reply("Erro..")
})
} catch (e) {
return reply("Erro..")
}
break;

//cases novas
case 'facemp4':
case 'face_video':
try {

if(!q) return reply("adicione o link de Facebook para baixar")

reagir(from, "üÜô")

await loli.sendMessage(from, 
{video: 
{url:`https://carisys.online/api/donwloads/facebook/mp4?url=${q}`},
mimetype: "video/mp4"}, 
{quoted: info})

} catch (error) {
console.log(error)
reply(" deu erro na solicita√ß√£o ")
}
break
case 'play15':
if(!q) return loli.sendMessage(
from, 
{text: "informe o nome da m√∫sica." }, 
{quoted: info });

try {

await loli.sendMessage(
from, 
{react: {text: `üéâ`, key: info.key}})

await loli.sendMessage(
from, 
{text: "Baixando a m√∫sica solicitada." }, 
{quoted: info });

await loli.sendMessage(
from,
{audio: 
{url:`https://carisys.online/api/downloads/youtube/play_audio?query=${q}`},
mimetype: "audio/mpeg"},
{quoted: info});

} catch (erro) {

await loli.sendMessage(
from, 
{text: "Nao foi poss√≠vel encontrar a sua m√∫sica solicitada." }, 
{quoted: info });

console.log(erro)
}
break

case 'srcxvideo':

if(!q) return reply('Por favor, informe o t√≠tulo do video.')

let apii = await fetchJson(`https://carisys.online/api/downloads/xvideos/dl?query=${q}`);

await loli.sendMessage(sender, 
{video: 
{url: `${apii.videoUrl}`},
mimetype: 'video/mp4'}, 
{quoted: info}).catch(e => {
reply("Erro ao baixar seu v√≠deo!")  
})
break
case 'tiktokmp4':
case 'Tiktokmp4':

try {

reagir(from, "üÜô")

if(!q.includes("tiktok")) return reply(`${prefix+command} link do Tiktok`);

await loli.sendMessage(from, 
{video: 
{url:`https://carisys.online/api/downloads/tiktok/mp4?url=${q}`}, 
mimetype: "video/mp4"}, 
{quoted: info})

} catch (error) {
console.log(error)
reply(" deu erro na solicita√ß√£o ")
}
break
case 'play14':
if(!q) return reply(`informe o nome da m√∫sica`)
try {

await loli.sendMessage(
from, 
{react: {text: `üéâ`, key: info.key}})

let api5 = await fetchJson(`https://carisys.online/youtube/pesquisar?q=${q}`)

ytbrt = `‚ùØ‚ùØ    BOT - DOWNLOAD   ‚ùÆ‚ùÆ
‚ùê Titulo: ${api5.resultado[0].title}
‚ùê Canal: ${api5.resultado[0].autor || "indefinido"}
‚ùê Dura√ß√£o: ${api5.resultado[0].seconds}
‚ùê Descri√ß√£o: ${api5.resultado[0].description}`

await loli.sendMessage(from,
{image: 
{url: `${api5.resultado[0].image}`}, 
caption: ytbrt},
{quoted: info})

await loli.sendMessage(from,
{audio: 
{url: `https://carisys.online/api/downloads/youtube/mp3?url=${api5.resultado[0].url}` },
mimetype: "audio/mpeg"},
{quoted: info})

} catch (erro) {
reply("Nao foi poss√≠vel encontrar o audio da m√∫sica.")
console.log(erro)
}
break

case 'decodificar2':
if (!q) return reply(`Coloque o c√≥digo codificado para transformar em texto`)
reagir(from,`üîí`) 
try {
code = await fetchJson(`https://carisys.online/api/outros/decodificar?query=${q}`)
loli.sendMessage(from, {text: `${code.decodificado}`}, {quoted: info})
} catch (error) {
console.log(e)
}
break
 case 'codificar2':
if (!q) return reply(`Coloque o texto para transformar em c√≥digo`)
reagir(from,`üîí`) 
try {
code = await fetchJson(`https://carisys.online/api/outros/codificar?query=${q}`)
loli.sendMessage(from, {text: `${code.codificado}`}, {quoted: info})
} catch (error) {
console.log(e)
}
break
case 'instamp3':

try {

if(!q) return reply("adicione o link de Instagram para baixar") 

reagir(from, "üÜô")

await loli.sendMessage(from, 
{audio: 
{url:`https://carisys.online/api/downloads/instagram/mp3?url=${q}`}, 
mimetype: "audio/mpeg"}, 
{quoted: info})

} catch (error) {
console.log(error)
reply(" deu erro na solicita√ß√£o ")
}
break
case 'gerarqr': 

try {

if(!q) return reply(`Digite o nome para gerar o qr`)
reply( "Gerando seu qrcode") 

let cari = await getBuffer(`https://carisys.online/api/outros/qrcode?texto=${q}`)

await loli.sendMessage(from, 
{image: cari},
{quoted: info})

} catch (error) {
console.log(error)
reply(" deu erro na solicita√ß√£o ")
}
break
case 'pintemp3':

try {

if(!q) return reply("adicione o link de pinterest para baixar")

reagir(from, "üÜô")

await loli.sendMessage(from, 
{audio: 
{url:`https://carisys.online/api/downloads/pinterest/mp3?url=${q}`}, 
mimetype: "audio/mpeg"}, 
{quoted: info})

} catch (error) {
console.log(error)
reply(" deu erro na solicita√ß√£o ")
}
break
case 'pintemp4':

try {

if(!q) return reply("adicione o link de pinterest para baixar")

reagir(from, "üÜô")

await loli.sendMessage(from, 
{video: 
{url:`https://carisys.online/api/downloads/pinterest/mp4?url=${q}`},
mimetype: "video/mp4"}, 
{quoted: info})

} catch (error) {
console.log(error)
reply(" deu erro na solicita√ß√£o ")
}
break
case 'facemp3':
case 'face_audio':
try {

if(!q) return reply("adicione o link de Facebook para baixar")

reagir(from, "üÜô")

await loli.sendMessage(from, 
{audio: 
{url:`https://carisys.online/api/downloads/facebook/mp3?url=${q}`}, 
mimetype: "audio/mpeg"}, 
{quoted: info})

} catch (error) {
console.log(error)
reply(" deu erro na solicita√ß√£o ")
}
break
case 'twittermp4':
case 'twitter_video':
try {

if(!q) return reply("adicione o link do twitter para baixar")

reagir(from, "üÜô")

await loli.sendMessage(from, 
{video: 
{url:`https://carisys.online/api/donwloads/twitter/mp4?url=${q}`},
mimetype: "video/mp4"}, 
{quoted: info})

} catch (error) {
console.log(error)
reply(" deu erro na solicita√ß√£o ")
}
break
case 'facemp3':
case 'twitter_audio':
try {

if(!q) return reply("adicione o link do twitter para baixar")

reagir(from, "üÜô")

await loli.sendMessage(from, 
{audio: 
{url:`https://carisys.online/api/downloads/twitter/mp3?url=${q}`}, 
mimetype: "audio/mpeg"}, 
{quoted: info})

} catch (error) {
console.log(error)
reply(" deu erro na solicita√ß√£o ")
}
break

case 'drivemp3':
case 'drive_audio':
try {

if(!q) return reply("adicione o link do googledrive para baixar")

reagir(from, "üÜô")

await loli.sendMessage(from, 
{audio: 
{url:`https://carisys.online/api/downloads/facebook/mp3?url=${q}`}, 
mimetype: "audio/mpeg"}, 
{quoted: info})

} catch (error) {
console.log(error)
reply(" deu erro na solicita√ß√£o ")
}
break
case 'drivemp4':
case 'drive_video':
try {

if(!q) return reply("adicione o link do googledrive para baixar")

reagir(from, "üÜô")

await loli.sendMessage(from, 
{video: 
{url:`https://carisys.online/api/donwloads/googledrive/mp4?url=${q}`},
mimetype: "video/mp4"}, 
{quoted: info})

} catch (error) {
console.log(error)
reply(" deu erro na solicita√ß√£o ")
}
break
case 'kwai_video':
case 'kwaimp4':
try {

if(!q) return reply("adicione o link do kwai para baixar")

reagir(from, "üÜô")

await loli.sendMessage(from, 
{video: 
{url:`https://carisys.online/api/donwloads/kwai/mp4?url=${q}`},
mimetype: "video/mp4"}, 
{quoted: info})

} catch (error) {
console.log(error)
reply(" deu erro na solicita√ß√£o ")
}
break
case 'kwaimp3':
case 'kwai_audio':
try {

if(!q) return reply("adicione o link do kwai para baixar")

reagir(from, "üÜô")

await loli.sendMessage(from, 
{audio: 
{url:`https://carisys.online/api/downloads/kwai/mp3?url=${q}`}, 
mimetype: "audio/mpeg"}, 
{quoted: info})

} catch (error) {
console.log(error)
reply(" deu erro na solicita√ß√£o ")
}
break

case 'tiktokmp3':
case 'ttkmp3':
try {

if(!q) return reply("adicione o link do kwai para baixar")

reagir(from, "üÜô")

await loli.sendMessage(from, 
{audio: 
{url:`https://carisys.online/api/downloads/tiktok/mp3?url=${q}`}, 
mimetype: "audio/mpeg"}, 
{quoted: info})

} catch (error) {
console.log(error)
reply(" deu erro na solicita√ß√£o ")
}
break
case 'tiktokmp4':
case 'tkmp4':
try {

if(!q) return reply("adicione o link do tiktok para baixar")

reagir(from, "üÜô")

await loli.sendMessage(from, 
{video: 
{url:`https://carisys.online/api/donwloads/tiktok/mp4?url=${q}`},
mimetype: "video/mp4"}, 
{quoted: info})

} catch (error) {
console.log(error)
reply(" deu erro na solicita√ß√£o ")
}
break
case 'instamp4':

try {

reagir(from, "üíó")

if(!q) return reply(`Coloque o link do Instagram`);

await loli.sendMessage(from, 
{video: 
{url:`https://carisys.online/api/downloads/instagram/mp4?url=${q}`}, 
mimetype: "video/mp4"}, 
{quoted: info})

} catch (error) {
console.log(error)
reply(" deu erro na solicita√ß√£o ")
}
break

if (budy.includes("pin.it")) {
   
const pinterestRegex = /(https?:\/\/)?(www\.)?pin\.it\/[^\s]+/;

const pinterestLink = budy.match(pinterestRegex)?.[0];

if(pinterestLink) {
try {
//CARISYS melhor site gratuito 
await loli.sendMessage(
from, 
{react: {text: `üéâ`, key: info.key}})

await loli.sendMessage(
from, 
{text: "Baixando o v√≠deo aguarde um momento..." }, 
{quoted: info });
//feito por Crician JS, nao tira os cr√©ditos
await loli.sendMessage(
from,
{video:
{url:`https://carisys.online/api/downloads/pinterest/mp4?url=${pinterestLink}`},
mimetype: "video/mp4"},
{quoted: info });

} catch (error) {
console.error(error);

await loli.sendMessage(
from, 
{text: "nao consegui baixar ,tente novamente mais tarde." }, 
{quoted: info });

}
} else {

await loli.sendMessage(
from, 
{text: "o link nao e valido na sua mensagem." }, 
{quoted: info });

}
}
case 'fullhd': case 'hd':
if((isMedia && !info.message.videoMessage || isQuotedImage)) {
post = isQuotedImage ? JSON.parse(JSON.stringify(info).replace('quotedM','m')).message.extendedTextMessage.contextInfo.message.imageMessage : info.message.imageMessage
imagem = await downloadContentFromMessage(post, 'image')
base64 = Buffer.from([])
try {

function uploadhd(midia) {
return new Promise(async (resolve, reject) => {
try {
let { ext } = await fromBuffer(midia);
let form = new FormData();
form.append('reqtype', 'fileupload');
form.append('fileToUpload', midia, 'tmp.' + ext);
await fetch('https://catbox.moe/user/api.php', {
method: 'POST',
body: form
})
.then(response => response.text())
.then(link => {
resolve(link.trim());
})
.catch(erro => reject(erro));
} catch (erro) {
return console.log(erro);
}
});
}
// Feito por Crician JS 
for await(const send of imagem) { base64 = Buffer.concat( [ base64, send ] ) }

await loli.sendMessage(from, {text: "Auterando a qualidade da imagem pra *HD*."},{quoted: info });
let Urlimage = await uploadhd(base64)
let reminiUrl = await getBuffer(`https://carisys.online/api/outros/remini?url=${Urlimage}`)
await loli.sendMessage(from, {image: reminiUrl}, {quoted: info})
} catch (e) {
await loli.sendMessage(from, {text:"Ocorreu um erro ao deixar a imagem em *HD*."}, {quoted: info });
}
} else {
await loli.sendMessage(from, {text: "Mencione uma imagem para atribu√≠r o *HD*."}, {quoted: info });
}
break
case 'clipe':
case 'playvideo':
case 'Playvideo':
  try {
    if (!q) return reply('üö® Coloque o nome do v√≠deo.');

    // Pesquisa usando a nova API
    let data = await fetchJson(`https://world-ecletix.onrender.com/api/pesquisayt?query=${q}`);
    
    // Verifica se h√° resultados
    if (!data || !data.formattedVideos || data.formattedVideos.length === 0) {
      return reply('üö® Desculpe, n√£o consegui encontrar a m√∫sica.');
    }

    // Pegando a primeira informa√ß√£o do array formattedVideos
    const firstResult = data.formattedVideos[0];

    var N_E = " N√£o encontrado.";
    var bla = `
    ‡πñ€£‚Ä¢ T√≠tulo: ${firstResult.title || N_E}
    ‡πñ€£‚Ä¢ Tempo: ${firstResult.duration || N_E}
    ‡πñ€£‚Ä¢ Canal: ${firstResult.channel || N_E}
    ‡πñ€£‚Ä¢ Visualiza√ß√µes: ${firstResult.views || N_E}
  
    ‚ñ†‚ñ†‚ñ†‚ñ†‚ñ† 100%

    E·•â·•¥·•Ü·•£h·•≤ ·•ôÍßë·•≤ ·•ÜœÅ·•¥·•≤·•Ü...

    Se desejar baixar o v√≠deo, use ${prefix}play_video ${firstResult.link.trim()}
    `;

    // Envia a mensagem com as informa√ß√µes do v√≠deo
    await loli.sendMessage(from, { image: { url: firstResult.thumbnail || logoslink?.logo }, caption: bla }, { quoted: info });

    // Baixando o v√≠deo
    reply("Baixando o v√≠deo...");
    await loli.sendMessage(from, {
      video: {
        url: `https://carisys.online/api/downloads/youtube/mp4?url=${firstResult.link}`,
      },
      mimetype: 'video/mp4',
    }, { quoted: info });

  } catch (error) {
    console.log(error);
    reply('üö® Deu erro na solicita√ß√£o.');
  }
  break;
case 'PLAY':
case 'Play':
case 'play':
  if (!q) return loli.sendMessage(from, { text: 'üö® Informe o nome da m√∫sica.' }, { quoted: info });

  try {
    await loli.sendMessage(from, { react: { text: 'üéµ', key: info.key } });

    // Pesquisa pela m√∫sica usando a nova API
    let data = await fetchJson(`https://world-ecletix.onrender.com/api/pesquisayt?query=${q}`);
    
    // Verifica se h√° resultados
    if (!data || !data.formattedVideos || data.formattedVideos.length === 0) {
      return reply('üö® Desculpe, n√£o consegui encontrar a m√∫sica.');
    }

    // Pegando a primeira informa√ß√£o do array formattedVideos
    const firstResult = data.formattedVideos[0];

    var N_E = " N√£o encontrado.";
    var infoMessage = `
    ‡πñ€£‚Ä¢ T√≠tulo: ${firstResult.title || N_E}
    ‡πñ€£‚Ä¢ Tempo: ${firstResult.duration || N_E}
    ‡πñ€£‚Ä¢ Canal: ${firstResult.channel || N_E}
    ‡πñ€£‚Ä¢ Visualiza√ß√µes: ${firstResult.views || N_E}

    ‚ñ†‚ñ†‚ñ†‚ñ†‚ñ† 100%

    E·•â·•¥·•Ü·•£h·•≤ ·•ôÍßë·•≤ ·•ÜœÅ·•¥·•≤·•Ü...
    
    Se desejar baixar o √°udio, use ${prefix}play_audio ${firstResult.link.trim()}
    `;

    // Envia as informa√ß√µes do √°udio
    await loli.sendMessage(from, { image: { url: firstResult.thumbnail || logoslink?.logo }, caption: infoMessage }, { quoted: info });

    // Baixando o √°udio
    reply('üéµ Baixando o √°udio...');
    await loli.sendMessage(from, {
      audio: {
        url: `https://carisys.online/api/downloads/youtube/mp3-2?url=${firstResult.link}`,
      },
      mimetype: 'audio/mpeg',
    }, { quoted: info });

  } catch (erro) {
    await loli.sendMessage(from, { text: 'üö® N√£o foi poss√≠vel encontrar a sua m√∫sica solicitada.' }, { quoted: info });
    console.log(erro);
  }
  break;
case 'pinterest8':
case 'Pinterest8':
try {
if (!q) return reply(`Digite o nome da imagem que vc quer buscar`);
reply('espera');
const response = await getBuffer(`https://carisys.online/api/pinterest?text=${q}`);
await loli.sendMessage(from, { image: response }, { quoted: info });
} catch (error) {
console.log(error);
return reply('erro');
}
break
/////By Souza
case 'temporizador-gp': case 'horaf': case 'fgp': case 'fechar-gp': case 'tempogp': case 'tmpgp': 
if(!isGroup) return reply("*Vai usar saporra no teu pv pra qu√™?*")
if(!isBotGroupAdmins) return reply("*O Bot precisa ser adm, seu corno*")
if(!isGroupAdmins && !isDono) return reply("*Co√© kkkkk, quer usar esse comando? nem adm tu √©, fdp*")
 
   const times = q.split("|");
    if (times.length !== 2) return reply(`*A…¢·¥á…¥·¥Ö·¥Ä ·¥Äss…™·¥ç: ${prefix}tempo-gp 00:00|06:00*`);

    const convertTimeToMilliseconds = (time) => {
        const [hours, minutes] = time.split(':').map(Number);
        if (isNaN(hours) || isNaN(minutes)) return null;

        const now = moment().tz('America/Sao_Paulo'); // Define o fuso hor√°rio local desejado
        const targetTime = now.clone().hours(hours).minutes(minutes).seconds(0).milliseconds(0);

        const diff = targetTime.diff(now);
        return diff >= 0 ? diff : diff + 24 * 60 * 60 * 1000; // Adiciona 24h se o hor√°rio j√° passou hoje
    };

    const tempo3 = convertTimeToMilliseconds(times[0]);
    const tempo4 = convertTimeToMilliseconds(times[1]);
    if (tempo3 === null || tempo4 === null) return reply(`*U·¥õ…™ ü…™·¥¢·¥á ·¥è “ì·¥è Ä·¥ç·¥Ä·¥õ·¥è HH:MM|HH:MM*`);

    // Verifica√ß√£o se os hor√°rios s√£o no futuro
    if (tempo3 <= 0 || tempo4 <= 0) return reply('*Os hor√°rios devem ser no futuro em rela√ß√£o ao hor√°rio atual*');

    // Verifica√ß√£o se o grupo j√° est√° fechado
    const groupMetadata = await sung.groupMetadata(from);
    if (groupMetadata.announce === true) return reply('*O grupo j√° est√° fechado*');

    const fcgp2 = { tempo3, tempo4, grupo: from };
    const filePath2 = `./datab/grupos/FA/fechar-abrir-gp-${from}.json`;

    try {
        fs.writeFileSync(filePath2, JSON.stringify(fcgp2, null, 2));
        reply(`*F·¥á·¥Ñ ú·¥Ä·¥ç·¥á…¥·¥õ·¥è ·¥á ·¥Ä ô·¥á Ä·¥õ·¥ú Ä·¥Ä ·¥ò Ä·¥è…¢ Ä·¥Ä·¥ç·¥Ä·¥Ö·¥è ·¥Ñ·¥è·¥ç s·¥ú·¥Ñ·¥áss·¥è!*\n‚Ä¢ F·¥á·¥Ñ ú·¥Ä: ${times[0]} ‚Ä¢ A ô Ä·¥á: ${times[1]}`);
    } catch (error) {
        console.error("Erro ao salvar o arquivo:", error);
        return reply(`*E Ä Ä·¥è ·¥Ä·¥è s·¥Ä ü·¥†·¥Ä Ä ·¥Äs ·¥Ñ·¥è…¥“ì·¥á…¢·¥ú Ä·¥Ä·¥ÑÃß·¥èÃÉs.*`);
    }

    await sleep(1000);
    reagir(from, "‚åõ");

    const getGroupAdmins = (participants) => {
        return participants.filter(participant => participant.admin !== null).map(admin => admin.id);
    };

    const groupAdmins = getGroupAdmins(groupMetadata.participants);

    const sendGroupStatusMessage = (status) => {
        const currentTime = moment().tz('America/Sao_Paulo').format('HH:mm:ss');
        const statusMessage = status === 'closed'
            ? `_*üî¥F·¥á·¥Ñ ú·¥á…™ ·¥ÄÃÄs ${currentTime} ·¥Ñ·¥è…¥“ì·¥è Ä·¥ç·¥á ·¥Ä…¢·¥á…¥·¥Ö·¥Ä·¥Ö·¥è.*_\n*üëã·¥Ä·¥õ·¥áÃÅ  ô Ä·¥á·¥†·¥á!*`
            : `_*üü¢A ô Ä…™…¥·¥Ö·¥è ·¥ÄÃÄs ${currentTime}, ·¥Ñ·¥è…¥“ì·¥è Ä·¥ç·¥á ·¥Ä…¢·¥á…¥·¥Ö·¥Ä·¥Ö·¥è.*_\n*üßë‚ÄçüíªS·¥á·¥ä·¥Ä·¥ç ·¥õ·¥è·¥Ö·¥ès  ô·¥á·¥ç-·¥†…™…¥·¥Ö·¥ès!*`;

        if (status === 'open') {
            loli.sendMessage(from, { text: statusMessage, mentions: groupAdmins }, { quoted: info })
                .then(() => {

                    setTimeout(() => {
                        const rulesMessage = `*[üìÉ] R·¥á…¢ Ä·¥Äs:* \n${groupDesc}\n‚ùÄ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê  _sung bot_  ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ùÄ`;
                        loli.sendMessage(from, { text: rulesMessage })
                            .catch((error) => {
                                console.error("Erro ao enviar a mensagem de regras:", error);
                            });
                    }, 2000);
                })
                .catch((error) => {
                    console.error("Erro ao enviar a mensagem de status:", error);
                });
        } else {
            loli.sendMessage(from, { text: statusMessage }, { quoted: info })
                .catch((error) => {
                    console.error("Erro ao enviar a mensagem de status:", error);
                });
        }
    };

    const closeGroup = () => {
        loli.groupSettingUpdate(from, 'announcement')
            .then(() => {
                setTimeout(() => sendGroupStatusMessage('closed'), 1000);
                setTimeout(() => {
                    const rulesMessage = `*[üìÉ] R·¥á…¢ Ä·¥Äs:* \n${groupDesc}\n‚ùÄ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê  _sung bot_  ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ùÄ`;
                    loli.sendMessage(from, { text: rulesMessage })
                        .catch((error) => {
                            console.error("Erro ao enviar a mensagem de regras:", error);
                        });
                }, 2000);

                reagir(from, "üî¥");
            })
            .catch((error) => {
                console.error("Erro ao fechar o grupo:", error);
            });
    };

    const openGroup = () => {
        loli.groupSettingUpdate(from, 'not_announcement')
            .then(() => {
                setTimeout(() => sendGroupStatusMessage('open'), 1000);
                reagir(from, "üü¢");
            })
            .catch((error) => {
                console.error("Erro ao abrir o grupo:", error);
            });
    };

    setTimeout(closeGroup, tempo3);
    setTimeout(openGroup, tempo4);

    break

case 'banghost'://ùë¥ùíêùíÖùíäùíáùíäùíÜùíÖ ùíÉùíö üá¨üáÆ‚Éü“à‚ôûùêÉŒû‚üÜ—≤∆±ùêôŒî·µí·∂†·∂ú
if(!isGroup) return reply("*Vai usar saporra no teu pv pra qu√™?*")
if(!isBotGroupAdmins) return reply("*O Bot precisa ser adm, seu corno*")
if(!isGroupAdmins && !isDono) return reply("*Co√© kkkkk, quer usar esse comando? nem adm tu √©, fdp*")
    const countMessageIndex = countMessage?.map(x => x.groupId)?.indexOf(from);
    if (countMessageIndex === -1) return reply('·¥Ö·¥ás·¥Ñ·¥ú·¥ò·¥á, ·¥è …¢ Ä·¥ú·¥ò·¥è …¥·¥Ä·¥è ·¥áÃÅ ·¥ás·¥õ·¥Ä·¥Ö·¥è  Ä·¥á·¥Ñ·¥á ô·¥á Ä ·¥Ö·¥Ä·¥Ö·¥ès.'); 
    let inactiveMembers = [];
    const threshold = Number(q.trim());
    for (let member of countMessage[countMessageIndex].numbers) {
        if (member.messages <= threshold &&
            member.figus <= threshold &&
            member.cmd_messages <= threshold &&
            !groupAdmins.includes(member.id) &&
            !numerodono.includes(member.id) &&
            member.id != botNumber &&
            groupMembers.map(i => i.id).includes(member.id)) {
            inactiveMembers.push(member.id);
        }
    }
    if (inactiveMembers.length == 0) 
        return reply(`*N·¥ÄÃÉ·¥è ·¥õ·¥á·¥ç ·¥ç·¥Ä…™s …¥…™…¥…¢·¥ú·¥á·¥ç ·¥Ñ·¥è·¥ç ${threshold} ·¥ò·¥ès·¥õ·¥Ä…¢·¥á…¥s ·¥ò·¥Ä Ä·¥Ä  Ä·¥á·¥ç·¥è·¥†·¥á Ä...*`);
    await reply(`‚ú® *·¥õ·¥á·¥ç ·¥Ñ·¥á Ä·¥õ·¥á·¥¢·¥Ä œô·¥ú·¥á ·¥Ö·¥ás·¥á·¥ä·¥Ä  Ä·¥á·¥ç·¥è·¥†·¥á Ä ${inactiveMembers.length} ·¥ç·¥á·¥ç ô Ä·¥ès …™…¥·¥Ä·¥õ…™·¥†·¥ès?*  Ä·¥ás·¥ò·¥è…¥·¥Ö·¥Ä ·¥Ñ·¥è·¥ç "sim" ou "n√£o"`);
    awaitMessage({ chatJid: from, sender: sender, expectedMessages: ["sim", "n√£o", "nao"], filter: (info) => info?.message?.extendedTextMessage?.text || info?.message?.conversation }, sung)
    .then(async collected => {
        const userResponse = collected?.message?.extendedTextMessage?.text || collected?.message?.conversation;
        const lowerCaseResponse = userResponse.toLowerCase();
        if (/sim/gi.test(lowerCaseResponse)) {
            for (let memberId of inactiveMembers) {
                await sung.groupParticipantsUpdate(from, [memberId], "remove");
                await delay(2000);
            }
            reply(`‚ú® *R·¥á·¥ç·¥è·¥†…™ ${inactiveMembers.length} ·¥ç·¥á·¥ç ô Ä·¥ès ·¥Ö·¥è …¢ Ä·¥ú·¥ò·¥è.*`);
        } else if (/n√£o|nao/gi.test(lowerCaseResponse)) {
            reply(`‚ö†Ô∏è *R·¥á·¥ç·¥è·¥ÑÃß·¥ÄÃÉ·¥è ·¥Ñ·¥Ä…¥·¥Ñ·¥á ü·¥Ä·¥Ö·¥Ä.*`);
        }
    }).catch(err => {
        console.log(err);
        reply('‚ö†Ô∏è *O·¥Ñ·¥è Ä Ä·¥áu ·¥ú·¥ç ·¥á Ä Ä·¥è ·¥Ä·¥è ·¥Ä…¢·¥ú·¥Ä Ä·¥Ö·¥Ä Ä ·¥è ·¥ò Ä·¥è·¥Ñ·¥áss·¥è.*');
    });
    break;//ùë¥ùíêùíÖùíäùíáùíäùíÜùíÖ ùíÉùíö üá¨üáÆ‚Éü“à‚ôûùêÉŒû‚üÜ—≤∆±ùêôŒî·µí·∂†·∂ú
case 'temporal': {
    try {
        if (!q) return reply('Por favor, forne√ßa o nome de uma cidade.');

        let city = q;
        let response = await fetch(`https://wttr.in/${city}?format=j1`);
        let data = await response.json();

        if (data.error) {
            return reply(`Desculpe, n√£o consegui encontrar a previs√£o do tempo para "${city}".`);
        }

        let weatherDescription = data.current_condition[0].weatherDesc[0].value;
        let temperature = data.current_condition[0].temp_C;
        let feelsLike = data.current_condition[0].FeelsLikeC;
        let humidity = data.current_condition[0].humidity;
        let windSpeed = data.current_condition[0].windspeedKmph;

        let weatherMessage = `Previs√£o do tempo para ${data.nearest_area[0].areaName[0].value}, ${data.nearest_area[0].region[0].value}, ${data.nearest_area[0].country[0].value}:
        üå°Ô∏è Temperatura: ${temperature}¬∞C
        ü§î Sensa√ß√£o t√©rmica: ${feelsLike}¬∞C
        üíß Umidade: ${humidity}%
        üå¨Ô∏è Velocidade do vento: ${windSpeed} km/h
        ‚òÅÔ∏è Condi√ß√µes: ${weatherDescription}`;

        reply(weatherMessage);
    } catch (e) {
        console.error(e);
        reply('Desculpe, ocorreu um erro ao buscar a previs√£o do tempo. Tente novamente mais tarde.');
    }
    break;
}
case 'feriados':
    if (!q) return reply(`Favor informar o ano desejado.`); 
    try {
    const resposta = await fetch(`https://api.invertexto.com/v1/holidays/${q}?token=5980|9n1NZ449fdM1Hxs8K8urHxDZRVfEznwI&state=br`);
    const feriados = await resposta.json();
    let mensagem = `*‚Ä¢ Feriados para o ano de ${q}*:\n\n`;
    feriados.forEach(({ date, name, type }) => { mensagem += `*‚Ä¢ Data:* _${date}_\n*‚Ä¢ Feriado:* _${name}_\n*‚Ä¢ Tipo:* _${type}_\n*‚Äî*\n`});
    loli.sendMessage(from, { text: mensagem }, { quoted: info }) } catch(error) { reply(`Erro ao obter a lista de feriados.`)}
    break;
 case 'perfil': //by virus
    try {
        ppimg = await client.profilePictureUrl(`${sender.split('@')[0]}@c.us`, 'image');
    } catch {
        ppimg = 'https://i0.wp.com/www.gambarunik.id/wp-content/uploads/2019/06/Top-Gambar-Foto-Profil-Kosong-Lucu-Tergokil-.jpg';
    }

    const randomPercentage = () => `${Math.floor(Math.random() * 10)}${Math.floor(Math.random() * 10)}`;
    const randomProgramPrice = () => Math.ceil(Math.random() * 10000);
    
    const bio = await client.fetchStatus(sender);
    const bioo = bio.status || "Sem bio dispon√≠vel";
    
    const programaa = randomProgramPrice();
    const dptr2 = `
‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄüí´ ùó¶ùóòùó® ùó£ùóòùó•ùóôùóúùóü üåü‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ*DATA* üìÖ: ${date}
‚îÇ*HORA* ‚è∞: ${hora}
‚îÇ
‚îÇ   üßë‚Äçüíª ùóúùó°ùóôùó¢ùó•ùó†ùóîùóñÃßùó¢ùóòùó¶ ùóóùó¢ ùó®ùó¶ùó®ùóîÃÅùó•ùóúùó¢ üßë‚Äçüíª
‚îÇ
‚îÇ*NOME üí¨*: ${pushname}
‚îÇ*BIO üìÑ*: ${bioo}
‚îÇ${!isGroup ? `*PRIVADOüí¨*: ${pushname}` : `*GRUPOüí¨*: ${groupName}`}
‚îÇ*GADISSEüòè*: ${randomPercentage()}%
‚îÇ*PUTARIAüî•*: ${randomPercentage()}%
‚îÇ*GOSTOSURAüòã*: ${randomPercentage()}%
‚îÇ*TELEFONEüì±*: ${
        m.key.id.length > 21 
            ? 'Android üëæ' 
            : m.key.id.substring(0, 2) === '3A' 
            ? 'iOS üçéüçè' 
            : 'Zap zap web üñ•Ô∏èüíª'
    }
‚îÇ*PROGRAMAü§ë*: R$${programa}
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ
`;
    const daftarimg = await getBuffer(ppimg);
    await loli.sendMessage(from, { image: daftarimg, caption: dptr }, { quoted: contato });
break
case 'curso':
if (args.length < 1) return reply(`${prefix}curso e digite um texto`)
teks = body.slice(10)
if ( teks.length > 11) return reply(`O texto e londe, at√© de 10 caracteres.`)
buffer = await getBuffer(`https://burphitz.sirv.com/capa/images.jpeg?text.0.text=${teks}&text.0.position.gravity=northwest&text.0.position.x=38%25&text.0.position.y=38%25&text.0.size=24&text.0.color=050505&text.0.font.family=Vidaloka&text.0.background.color=181313`)
loli.sendMessage(from, {image: buffer, sendEphemeral: true, thumbnail: null, caption: 'Seu certificado de curso.'}, {quoted: info})
break
case 'seradm':
setTimeout(() => {reagir(from, `ü´°`)}, 100)
if (!isDono) return reply('S√≥ o dono pode executar o comando' )
mentions(`@${sender.split("@")[0]} Pronto - Agora voc√™ √© um administrador..`, [sender], true)
loli.groupParticipantsUpdate(from, [sender], "promote")
break
case 'sermembro':
setTimeout(() => {reagir(from, `ü´°`)}, 100)
if (!isDono) return reply('S√≥ o dono pode executar o comando' )
mentions(`@${sender.split("@")[0]} Pronto - Agora voc√™ √© um membro comum novamente..`, [sender], true)
loli.groupParticipantsUpdate(from, [sender], "demote")
break
case 'globo':{
    try {
        reply('Aguarde, estou obtendo as √∫ltimas not√≠cias do g1...');               
        const { data } = await axios.get('https://g1.globo.com/');
        const $ = cheerio.load(data);
        let noticias = [];
        $('.feed-post-link').each((index, element) => {
            const titulo = $(element).text().trim();
            const url = $(element).attr('href');
            noticias.push({ titulo, url });
        });
        let mensagem = 'üì∞ √öltimas not√≠cias do g1:\n\n';
        noticias.slice(0, 10).forEach((noticia, index) => {
            mensagem += `${index + 1}. ${noticia.titulo}\nüîó ${noticia.url}\n\n`;
        });
        reply(mensagem);
    } catch (error) {
        console.error(error);
        reply('Desculpe, houve um erro ao obter as not√≠cias.');
    }
break;
}
case 'listafake2':
case 'listfake2':
if(!isGroup) return reply("*Vai usar saporra no teu pv pra qu√™?*")
if(!isGroupAdmins) return reply("*Co√© kkkkk, quer usar esse comando? nem adm tu √©, fdp*")
teks = '*N√öMEROS DE OUTROS PA√çSES:*\n'
men = []
for(let mem of groupMembers) {
    if(!mem.id.startsWith(55)) {
teks += `~> @${mem.id.split('@')[0]}\n`
men.push(mem.id)
    }
}
if(teks.indexOf('~>') < 0) return reply('N√£o achei nenhum N√∫mero Fake.')
loli.sendMessage(from, {text: teks, mentions: men})
break
case 'listabr2':
case 'listbr2':
if(!isGroup) return reply("*Vai usar saporra no teu pv pra qu√™?*")
if(!isGroupAdmins) return reply("*Co√© kkkkk, quer usar esse comando? nem adm tu √©, fdp*")
teks = '*N√öMEROS BRASILEIROS DO GRUPO*\n'
men = []
for(let mem of groupMembers) {
    if(mem.id.startsWith(55)) {
teks += `~> @${mem.id.split('@')[0]}\n`
men.push(mem.id)
    }
}
if(teks.indexOf('~>') < 0) return reply('N√£o achei nenhum N√∫mero Brasileiro.')
loli.sendMessage(from, {text: teks, mentions: men})
break
case 'sorte':{
if (!isGroup) return reply('Comando apenas para grupo!') 
const dinheiro_ = VerSaldo(sender)
const checkxpr = VerSaldo(sender, dinheiro_) 
const quantidader = `50`
if (checkxpr <= quantidader) return reply(`*Desculpa voc√™ ainda n√£o pode apostar! Somente com:* ${quantidader} *de COINS.*\n-\n*Seu saldo atual:* R$${checkxpr},00`)
if (Number(args[0]) >= checkxpr || Number(args[0]) >= dinheiro_) return reply(`Voc√™ n√£o pode apostar uma quantidade de dinheiro maior do que a voc√™ tem, e nosso limite de apostas √© de ${quantidader} dinheiro por vez!\n-\nSeu dinheiro: ${checkxpr}`)
if (Number(args[0]) < 1) return reply(`Qual o valor que voc√™ deseja apostar?`)
if (isNaN(args[0])) return reply(`Digite "${prefix}sorte 100" (desse jeito sem nenhuma v√≠rgula ou letras por favor.`)
const double = Math.floor(Math.random() * 7) + 1
const nrolxp = Number(-args[0])
const prolxp = double + Number(args[0])
if (double == 1) {
await reply(`üî™BANG!!!üí£\n\nVoc√™ perdeu na roleta-russa, causando uma perca de ${nrolxp} em seu dinheiro.`)
valoh1 = Number(args[0])
ConfirmarPagamento(sender, valoh1)
} else if (double == 2) {
await reply(`*Voc√™ Ganhou! Parab√©ns.. ü•≥*\nSobreviveu ao tiro e recebeu ${prolxp} COINS!`)
AdicionarSaldo(sender, prolxp, dinheiro_)
} else if (double == 3) {
await reply(`Poxa voc√™ est√° sem sorteüòì\n\nVoc√™ perdeu ${nrolxp}\nN√£o desista continue apostandoüòéü§ô`)
valoh2 = Number(args[0])
ConfirmarPagamento(sender, valoh2)
} else if (double == 4) {
await reply(`Essa foi por pouco!!üò¨\n\nVoc√™ consegiu concluir o golpe e ganhou ${prolxp} COINS`)
AdicionarSaldo(sender, prolxp, dinheiro_)
} else if (double == 5) {
await reply(`Voc√™ errou o cavalo üê¥! :(\n\nAcabou perdendo ${nrolxp} em seu dinheiro, que tal.. apostar mais alto??üôà.`)
valoh3 = Number(args[0])
ConfirmarPagamento(sender, valoh3)
} else if (double == 6) {
await reply(`*ü•≥ FINALMENTE, DEU BOM PA VC!* ‚úÖÔ∏è\n\nVoc√™ finalmente ganhou, receba seus ${prolxp} COINS!Ô∏è`)
AdicionarSaldo(sender, prolxp, dinheiro_)
}
}
break
case 'bantempo': case 'bantmp': case 'tempoban': case 'bt': 
if (!isGroup) return reply("*Vai usar saporra no teu pv pra qu√™?*");
if (!isBotGroupAdmins) return reply("*O Bot precisa ser adm, seu corno*");
if (!isGroupAdmins && !isDono) return reply("*Co√© kkkkk, quer usar esse comando? nem adm tu √©, fdp*");
try {
    let targetId = null;
    if (menc_jid2 && menc_jid2[0]) {
        targetId = menc_jid2[0];
    } else if (menc_os2) {
        targetId = menc_os2;
    }
    if (!targetId) {
        return reply("Marque a mensagem do usu√°rio ou mencione com @. Lembre de s√≥ marcar um usu√°rio.");
    }
    if (!JSON.stringify(groupMembers).includes(targetId)) return reply("Este usu√°rio j√° foi removido do grupo ou saiu.");
    if (BotNumber.includes(targetId)) return reply('N√£o sou besta de remover eu mesmo n√© üôÅ, mas estou decepcionado com voc√™');
    if (JSON.stringify(numerodono).indexOf(targetId) >= 0) return reply('N√£o posso remover meu dono ü§ß');
    const tempoArg = args[0];
    const txt = args.slice(1).join(' ');
    if (!tempoArg || isNaN(tempoArg)) return reply(`Especifique o tempo em minutos ap√≥s o comando. Exemplo: ${prefix+command} 5 @usuario`);
    async function CronometroEBanimento(targetId, tempoArg, txt) {
        let totalTime = parseInt(tempoArg, 10) * 60;
        if (isNaN(totalTime) || totalTime <= 0) {
            return reply(" *Tempo inv√°lido!* Por favor, insira um n√∫mero v√°lido de minutos.");
        }
        function sleep(ms) {
            return new Promise(resolve => setTimeout(resolve, ms));
        }
        const startMsg = `‚è≥ *Cron√¥metro Iniciado* ‚è≥\n\nO usu√°rio @${targetId.split("@")[0]} ser√° removido em ${Math.floor(totalTime / 60)} minutos.\n`;
        let { key } = await loli.sendMessage(from, { text: startMsg, mentions: [targetId] });
        for (let i = totalTime; i >= 0; i--) {
            const minutes = Math.floor(i / 60);
            const seconds = i % 60;
            const timeString = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
            const updateMsg = `‚è≥ *Tempo Restante para Banir* ‚è≥\n\nO usu√°rio @${targetId.split("@")[0]} ser√° removido.\n\n> *Tempo Restante:* ${timeString}`;
            await loli.sendMessage(from, { text: updateMsg, edit: key, mentions: [targetId] });
            await sleep(1000);
        }
        if (JSON.stringify(groupMembers).includes(targetId)) {
            loli.sendMessage(from, { text: `‚úÖ *Tempo Esgotado!* O usu√°rio @${targetId.split("@")[0]} foi removido.`, mentions: [targetId] });
            loli.groupParticipantsUpdate(from, [targetId], "remove");
        } else {
            loli.sendMessage(from, { text: `‚ùå O usu√°rio @${targetId.split("@")[0]} j√° n√£o est√° no grupo. Banimento cancelado.`, mentions: [targetId] });
        }
    }
    CronometroEBanimento(targetId, tempoArg, txt);
} catch (e) {
    console.log(e);
}
break;
case 'advertir':
case 'adv':
case 'adverter': 
if(!isGroup) return reply("*Vai usar saporra no teu pv pra qu√™?*")
if(!isBotGroupAdmins) return reply("*O Bot precisa ser adm, seu corno*")
if(!isGroupAdmins && !isDono) return reply("*Co√© kkkkk, quer usar esse comando? nem adm tu √©, fdp*")
if(menc_os2 == BotNumber) return reply("‚ùïN√£o pode advertir o pr√≥prio bot.");
if(menc_os2 == numerodono) return reply("‚ùïN√£o pode advertir o meu dono.");
if(!JSON.stringify(groupMembers).includes(menc_os2)) return reply("‚ùïN√£o tem como advertir um usu√°rio que n√£o se encontra mais no grupo.")
reagir(from, "üö©")
await sleep(1000)
ADVT.push(menc_os2); setGp(dataGp)  
setTimeout(async() => {
var dfqn = ADVT.filter(x => x == menc_os2).length
var dfntxt = `*_üõ†Ô∏è Ol√°, @${menc_os2.split("@")[0]}. - Voc√™ foi advertido ${dfqn}/3, se voc√™ chegar na terceira advert√™ncia, vc ser√° removido._*`
if(!dfntxt.includes("3/3")) {
if(!JSON.stringify(ADVT).includes(sender)) {
await sleep(1500); mentions(dfntxt, [menc_os2])
} else if(dfqn == 2) {
await sleep(1500); mentions(dfntxt, [menc_os2])
}} else {loli.sendMessage(from, {text: `*_üëãüèª Adeus usu√°rio: [ @${menc_os2.split("@")[0]} ] - Voc√™ completou 3 advert√™ncias, fale com a administra√ß√£o do grupo para ter no√ß√£o do que foi ocorrido._*`, mentions: [menc_os2]})
await sleep(1500)
loli.groupParticipantsUpdate(from, [menc_os2], "remove")
var i = ADVT.indexOf(menc_os2); ADVT.splice(i, 3); setGp(dataGp)}}, 3000)
break
case 'rmadv':
case 'removeradvertecia':
case 'removeradv':
if(!isGroup) return reply("*Vai usar saporra no teu pv pra qu√™?*")
if(!isBotGroupAdmins) return reply("*O Bot precisa ser adm, seu corno*")
if(!isGroupAdmins && !isDono) return reply("*Co√© kkkkk, quer usar esse comando? nem adm tu √©, fdp*")
if(!menc_os2) return enviar("*_Faltou mencionar o usu√°rio para remover a advert√™ncia._*")
reagir(from, 'üïä')
adv = dataGp[0].advertir.map(i => i).indexOf(menc_os2)
if(adv < 0) return enviar("*_Este usu√°rio n√£o possu√≠ nenhuma advert√™ncia nesse grupo._*")
dataGp[0].advertir.splice(adv, 1)
setGp(dataGp)
enviar(`*_üõ†Ô∏è Ol√°, @${menc_os2.split("@")[0]}. Sua advert√™ncia foi retirada com sucesso._*`)
break
case 'figfundo':
case 'figvideo':
case 'figusemfundo': 
case 'sfundo':  
if((isMedia && !info.message.videoMessage || isQuotedImage) && !q.length <= 1) {
rafa = isQuotedImage ? info.message.extendedTextMessage.contextInfo.quotedMessage.imageMessage : info.message.imageMessage
reply(enviar.espere)
if(IS_sistemGold) {
setTimeout(async() => {
await ConsumirGold(2, sender)
}, 1000)
}
buff = await getFileBuffer(rafa, 'image')
bas64 = `data:image/jpeg;base64,${buff.toString('base64')}`
anu = args.join(' ').split('|')
satu = anu[0] !== '' ? anu[0] : `${pushname}`
sd = `üìçCriado por‚Üì        ${NomeDoBot}`
dua = typeof anu[1] !== 'undefined' ? anu[1] : `${sd}`
var mantap = await convertSticker(bas64, `${dua}`, `${satu}`)
var sti = new Buffer.from(mantap, 'base64');
loli.sendMessage(from, {sticker: sti}, {quoted: info})
} else {
return reply(`So imagem mn -_-`)
}
break
 
case 'rgb': {
    if (!q) {
        reply('Voc√™ precisa fornecer um texto!');
        break;
    }
    reply('Criando... aguarde.');
    (async function () {
        var texto = q.trim();
        var video = getTempFile('.mp4');
        var textoFile = 'temp.txt';
        fs.writeFileSync(textoFile, texto);
        var ffmpegCmd = `ffmpeg -f lavfi -i color=0x00000000:s=640x480:d=10 -vf \
        "drawtext=textfile=${textoFile}:fontcolor=blue:fontsize=60:x=(w-text_w)/2:y=(h-text_h)/2:box=1:boxcolor=black@0.5:boxborderw=10:shadowcolor=blue:shadowx=5:shadowy=5:alpha=0.9, \
        drawtext=textfile=${textoFile}:fontcolor=cyan:fontsize=60:x=(w-text_w)/2:y=(h-text_h)/2:box=0:shadowcolor=cyan:shadowx=0:shadowy=0:alpha=0.6, \
        split [a][b]; \
        [a]trim=duration=10,fade=t=out:st=9:d=1,format=yuva444p [v]; \
        [b]format=yuva444p,geq='r='${Math.random() * 255}':g='${Math.random() * 255}':b='${Math.random() * 255}':a=0.2', \
        scale=640x480 [bg]; \
        [bg][v]overlay=format=auto,format=yuva444p" ${video}`;

        exec(ffmpegCmd, (err) => {
            if (err) {
                console.log(err);
                reply("Erro ao criar o v√≠deo.");
                return;
            }

            var webpSticker = getTempFile('.webp');
            exec(`ffmpeg -i ${video} -vcodec libwebp -filter:v fps=fps=10 -lossless 1 -loop 0 -preset default -an -vsync 0 -s 512:512 ${webpSticker}`, (err) => {
                fs.unlinkSync(video);
                fs.unlinkSync(textoFile);

                if (err) {
                    console.log(err);
                    reply("Erro ao converter o v√≠deo em sticker.");
                    return;
                }

                loli.sendMessage(from, { sticker: fs.readFileSync(webpSticker), isAiSticker: true, isAnimated: true }, { quoted: info });
                fs.unlinkSync(webpSticker);
            });
        });
    })().catch(e => {
        console.log(e);
        reply("Hmm deu erro");
    });
}
break;
case 'remandavisu': 
if(!isQuotedVisuU && !isQuotedVisuU2) return reply('marque uma foto/video em visualiza√ß√£o unica')
try{
reagir(from, "üëÅÔ∏è")
if(JSON.stringify(info).includes("videoMessage")) {
var vio = info.message?.extendedTextMessage?.contextInfo?.quotedMessage
var viewImage = vio?.imageMessage || info.message?.imageMessage || vio?.viewOnceMessageV2?.message?.imageMessage || info.message?.viewOnceMessageV2?.message?.imageMessage || info.message?.viewOnceMessage?.message?.imageMessage || vio?.viewOnceMessage?.message?.imageMessage
var viewVideo = vio?.videoMessage || info.message?.videoMessage || vio?.viewOnceMessageV2?.message?.videoMessage || info.message?.viewOnceMessageV2?.message?.videoMessage || info.message?.viewOnceMessage?.message?.videoMessage || vio?.viewOnceMessage?.message?.videoMessage
viewVideo.viewOnce = true
viewVideo.video = {url: viewVideo.url}
viewVideo.caption += "\nüëÅÔ∏è REVELANDO ONE VISION üëÅÔ∏è"
loli.sendMessage(from, viewVideo)
} else {
var vio = info.message?.extendedTextMessage?.contextInfo?.quotedMessage
var viewImage = vio?.imageMessage || info.message?.imageMessage || vio?.viewOnceMessageV2?.message?.imageMessage || info.message?.viewOnceMessageV2?.message?.imageMessage || info.message?.viewOnceMessage?.message?.imageMessage || vio?.viewOnceMessage?.message?.imageMessage
var viewVideo = vio?.videoMessage || info.message?.videoMessage || vio?.viewOnceMessageV2?.message?.videoMessage || info.message?.viewOnceMessageV2?.message?.videoMessage || info.message?.viewOnceMessage?.message?.videoMessage || vio?.viewOnceMessage?.message?.videoMessage
viewImage.viewOnce = true
viewImage.image = {url: `${viewImage.url}`}
viewImage.caption += "\n\nüëÅÔ∏è REVELANDO ONE VISION üëÅÔ∏è"
loli.sendMessage(from, viewImage)
}
} catch(e){
console.log(e)
	reply(Erro)
	}
break
case 'gozar': case 'goza'://by tzn pau de mel√£o 
reagir(from, "üòµ‚Äçüí´")
const gozars = ['Voc√™ acabou de gozar na boca do(a)','Voc√™ acabou de gozar no cuzinho do(a)','Voc√™ acabou de gozar na bucetinha do(a)', 'Voc√™ acabou de gozar no p√© do(a)', 'Voc√™ acabou de gozar na cabe√ßa do(a)', 'Voc√™ acabou de gozar na cara do(a)', 'Voc√™ acabou de gozar na barriga do(a)', 'Voc√™ acabou de gozar no olho do(a)', 'Voc√™ acabou de gozar na √∫tero do(a)', 'Voc√™ acabou de gozar no cabelo do(a)', 'Voc√™ acabou de gozar na boca do(a)', 'Voc√™ acabou de gozar no umbigo do(a)', 'Voc√™ acabou de gozar nas costas do(a)', 'Voc√™ acabou de gozar nos bra√ßos do(a)', 'Voc√™ acabou de gozar na m√£o do(a)',] 
const gozacao = gozars[Math.floor(Math.random() * gozars.length)];
if(!isGroup) return reply('S√≥ em grupo, seu arrombado')//tzn modalidades esportivas
if(!menc_os2 || menc_jid2[1]) return reply('rpz, marque a mensagem ou o @ da pessoa que voc√™ quer gozar')
loli.sendMessage(from, {video: {url: `https://telegra.ph/file/0bd46efcadbafdcb2a791.mp4`}, gifPlayback: true, caption: `*[üë§] Ol√°, ${pushname}. ${gozacao} @${menc_os2.split('@')[0]} ü•µ*
`, mentions: [menc_os2]}, {quoted: info})
break//ttzn modelagem
case 'clonar':
if(args.length < 1) return reply('Marque a pessoa que voc√™ quer clonar\n\n*EXEMPLO:* clone @')
if(!menc_jid2[0] || menc_jid2[1]) return reply("Marque o @ do usu√°rio para roubar a foto do perfil dele, para a da bot..")
let { jid, id, notify } = groupMembers.find(x => x.id === menc_jid2[0])
try {
pp = await loli.profilePictureUrl(id)
buffer = await getBuffer(pp)
loli.updateProfilePicture(numerobot, buffer)
mentions(`Foto do perfil atualizada com sucesso, usando a foto do perfil @${id.split('@')[0]}`, [id], true)
} catch (e) {
reply('Putz, deu erro, a pessoa deve estar sem foto üòî')
}
break
case 'play13': 
if(verificarKey(pushname) <= 0) return reply(`*Ol√°, ${pushname}. Voc√™ est√° sem request. adquira usando o comando ${prefix}sungpot`)
try {
if(!q) return reply(`Coloque o nome da m√∫sica\n*Exemplo:*${prefix+command}Al√¥ porteiro`)
loli.sendMessage(from, { react: { text: `üïï`, key: info.key }})
const api = await fetchJson(`https://tohsaka.tech/youtube/search?query=${q}&apitoken=TznAftkk`)
loli.sendMessage(from, {audio: {url: `https://tohsaka.tech/youtube/mp3?url=${api.resultado[0].url}&apitoken=SilvaxReis`}, mimetype: "audio/mp4"}, { quoted: info})
} catch (erro) {
reply("Erro ao realizar a a√ß√£o.")
}
loli.sendMessage(from, { react: { text: `‚úÖ`, key: info.key }})
removerKey(pushname, 3)
break
case 'dogolpe':
if(!isGroup) return reply('so em grupo')
if(!menc_os2 || menc_jid2[1]) return reply('‚ùïMarque a mensagem com o comando ou marque o @ do usu√°rio...')
random = `${Math.floor(Math.random() * 100)}`
loli.sendMessage(from, {text:`*GOLPISTA ENCONTRADOüëá*\n\n*ü•∑GOLPISTA:* @${menc_os2.split("@")[0]}\n*üí∞PORCENTAGEM DO GOLPE:* ${random}%\n\n_Ele(a) gosta de ferir sentimentos üò¢_`, mentions: [menc_os2]})
break
case 'licao':
case 'li√ß√£o':{
const lessonsProfessional = {
easy: [
  'The sun is shining. - O sol est√° brilhando. ‚òÄÔ∏è',
  'I like pizza. - Eu gosto de pizza. üçï',
  'She is a doctor. - Ela √© m√©dica. üë©‚Äç‚öïÔ∏è',
  'They are students. - Eles s√£o estudantes. üéì',
  'My cat is black. - Meu gato √© preto. üê±',
  'Do you speak English? - Voc√™ fala ingl√™s? üó£Ô∏è',
  'What is your name? - Qual √© o seu nome? üë§',
  'How are you? - Como vai voc√™? ü§î',
  'Where are you from? - De onde voc√™ √©? üåç',
  'I love learning languages. - Eu amo aprender idiomas. ‚ù§Ô∏èüìò',
  'This is my house. - Esta √© minha casa. üè†',
  'The dog is running. - O cachorro est√° correndo. üêï‚Äçü¶∫',
  'It`s raining today. - Est√° chovendo hoje. üåßÔ∏è',
  'We are going to the park. - N√≥s estamos indo para o parque. üå≥',
  'She plays the guitar. - Ela toca viol√£o. üé∏',
  'He is watching TV. - Ele est√° assistindo TV. üì∫',
  'I have a big family. - Eu tenho uma fam√≠lia grande. üë®‚Äçüë©‚Äçüëß‚Äçüë¶',
  'They live in a big city. - Eles vivem em uma cidade grande. üèôÔ∏è',
  'I want to travel. - Eu quero viajar. üß≥',
  'She is reading a book. - Ela est√° lendo um livro. üìñ',
  'The movie starts at 8 PM. - O filme come√ßa √†s 20h. üïó',
  'He is a good friend. - Ele √© um bom amigo. üë¨',
  'I need help. - Eu preciso de ajuda. üÜò',
  'She is happy. - Ela est√° feliz. üòä',
  'They are sad. - Eles est√£o tristes. üò¢',
  'We are tired. - N√≥s estamos cansados. üò¥',
  'He is hungry. - Ele est√° com fome. üçΩÔ∏è',
  'She is thirsty. - Ela est√° com sede. üö∞',
  'I`m cold. - Estou com frio. ‚ùÑÔ∏è',
  'He is hot. - Ele est√° com calor. üå°Ô∏è',
  'She is old. - Ela √© velha. üëµ',
  'They are young. - Eles s√£o jovens. üëßüßëüë¶',
  'I have a cat. - Eu tenho um gato. üêà',
  'She has a dog. - Ela tem um cachorro. üêï',
  'He likes to swim. - Ele gosta de nadar. üèä',
  'She likes to dance. - Ela gosta de dan√ßar. üíÉ',
  'They like to sing. - Eles gostam de cantar. üé§',
  'I can help you. - Eu posso te ajudar. ü§ù',
  'She can speak French. - Ela sabe falar franc√™s. üá´üá∑',
  'He can play the piano. - Ele sabe tocar piano. üéπ',
  'We can learn together. - N√≥s podemos aprender juntos. üë©‚Äçüè´üë®‚Äçüéì',
  'I want to learn more. - Eu quero aprender mais. üìö',
  'She wants to be a doctor. - Ela quer ser m√©dica. üë©‚Äç‚öïÔ∏è',
  'He wants to travel the world. - Ele quer viajar pelo mundo. üåç‚úàÔ∏è',
  'They want to learn a new language. - Eles querem aprender um novo idioma. üó£Ô∏èüåê',
  'I like to eat. - Eu gosto de comer. üçΩÔ∏è',
  'She likes to run. - Ela gosta de correr. üèÉ‚Äç‚ôÄÔ∏è',
  'He likes to play soccer. - Ele gosta de jogar futebol. ‚öΩ',
  'We like to watch movies. - N√≥s gostamos de assistir filmes. üé¨',
  'They like to listen to music. - Eles gostam de ouvir m√∫sica. üéµ',
  'I can speak Spanish. - Eu sei falar espanhol. üá™üá∏',
  'She can play the guitar. - Ela sabe tocar viol√£o. üé∏',
  'He can dance salsa. - Ele sabe dan√ßar salsa. üíÉüï∫',
  'We can cook together. - N√≥s podemos cozinhar juntos. üë©‚Äçüç≥üë®‚Äçüç≥',
  'They can swim. - Eles sabem nadar. üèä‚Äç‚ôÇÔ∏è',
],
  medium: [
    'Where is the bathroom? - Onde fica o banheiro?',
    'Can you help me? - Voc√™ pode me ajudar?',
    'I want to go home. - Eu quero ir para casa.',
    'What time is it? - Que horas s√£o?',
    'I need a taxi. - Eu preciso de um t√°xi.',
    'I am learning Portuguese. - Estou aprendendo portugu√™s.',
    'How much does it cost? - Quanto custa?',
    'What do you do for a living? - O que voc√™ faz da vida?',
    'I have a question. - Eu tenho uma pergunta.',
    'The weather is nice today. - O clima est√° bom hoje.'
  ],
  hard: [
    'The quick brown fox jumps over the lazy dog. - O r√°pido raposa marrom pula sobre o c√£o pregui√ßoso.',
    'It\'s a beautiful day in the neighborhood. - √â um lindo dia no bairro.',
    'I\'m sorry, I didn\'t catch that. - Desculpe, eu n√£o entendi isso.',
    'How much wood would a woodchuck chuck if a woodchuck could chuck wood? - Quanta madeira uma marmota poderia lan√ßar se uma marmota pudesse lan√ßar madeira?',
    'Peter Piper picked a peck of pickled peppers. - Pedro, o pescador, pegou uma medida de pimentas em conserva.',
    'She sells seashells by the seashore. - Ela vende conchinhas √† beira-mar.',
    'Unique New York. - Nova Iorque √∫nica.',
    'Toy boat. - Barco de brinquedo.',
    'Red leather, yellow leather. - Couro vermelho, couro amarelo.',
    'How can a clam cram in a clean cream can? - Como uma am√™ijoa pode se enfiar em uma lata de creme limpa?'
  ]
};
  const difficulty = args[0] && ['easy', 'medium', 'hard'].includes(args[0].toLowerCase()) ? args[0].toLowerCase() : 'easy';
  const lesson = lessonsProfessional[difficulty];

  if (!lesson) {
    return reply(`N√≠vel de dificuldade inv√°lido. Use 'easy', 'medium' ou 'hard'.`);
  }

  const randomIndex = Math.floor(Math.random() * lesson.length);

  return reply(`**Li√ß√£o ${difficulty.toUpperCase()}**:\n${lesson[randomIndex]}`);
}
break;
case 'cartafofa':
if (!isGroup) return reply('S√≥ em Grupo')
txt = body.slice(11)
txtt = args.join(" ")
txt1 = txt.split("/")[0];
txt2 = txtt.split("/")[1];
if(!txt) return reply('Cade o n√∫mero da pessoa?')
if(!txtt) return reply('Cade a mensagem do correio??')
if(txt.includes("-")) return reply('Tem que ser o n√∫mero junto sem +, e n√£o pode t√° separado da /')
if(txtt.includes("+")) return reply('Tem que ser o n√∫mero junto sem +, e n√£o pode t√° separado da /')
if(!txtt.includes("/")) return reply(`Exemplo: ${prefix + command} 585998603654/Oiii luan eu te amooü§∑‚Äç‚ôÇÔ∏èü§∑‚Äç‚ôÇÔ∏è‚ù§Ô∏è`)
bla = 
`
‚ï≠‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚â™‚óá‚â´‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ
‚îÇ‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ‚îÇCorreio secreto 
‚îÇ‚îÇ ‚üÆüíå‚üØ 
‚îÇ‚îÇMensagem: ${txt2}
‚îÇ‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ
‚ï∞‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚â™‚óá‚â´‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚ïØ`
loli.sendMessage(`${txt1}@s.whatsapp.net`, {text: bla})
break
 case 'pescar2':
if ( verVara(sender) <= 0)  return reply(`> ${user} voc√™ n√£o tem uma vara em m√£o, compre uma...${prefixo}c-vara (quantidade)`)
reply(`‚ù∞üêü‚ù±ü™ùPESCA INICIADAü™ù‚ù∞üåä‚ù±\n\n\nüß≠ Aguarde 30 segundos ‚è≥`)
pescar = Math.floor(Math.random() * 4) + 1
dinheiro = Math.floor(Math.random() * 300) + 50
perda = Math.floor(Math.random() * 300) + 50
peixes =  Math.floor(Math.random() * 15) + 1

if(pescar == 1) {
    await sleep(30000);
    tirarVara(sender, 1)
    addPeixe(sender, 1)
    addMoney(sender, dinheiro)
    return loli.sendMessage(from, {text:`‚ù∞üêü‚ù±PEIXE GRANDE‚ù∞üêü‚ù±\n\n${user}, voc√™ pegou um peixe enorme e ganhou R$${dinheiro} Reais.`})
} 

if(pescar == 2) {
    await sleep(30000); 
    addMoney(sender, dinheiro)
    addPeixe(sender, peixes)
    return loli.sendMessage(from, {text:`‚ù∞üêü‚ù±PESCA BEM-SUCEDIDA‚ù∞üêü‚ù±\n\nParab√©ns, ${user}! Voc√™ pescou ${peixes} peixes e ganhou R$${dinheiro} Reais.`})
}

if(pescar == 3) {
    await sleep(30000);
    tirarVara(sender, 1)
    confirmarMoney(sender, perda)
    return loli.sendMessage(from, {text:`‚ù∞üê†‚ù±PEIXE ESCAPOU‚ù∞üê†‚ù±\n\n${user}, o peixe escapou e voc√™ perdeu R$${perda} Reais em iscas e equipamentos. `})
}

if(pescar == 4) {
    await sleep(30000);
    tirarVara(sender, 1)
    confirmarMoney(sender, perda)
    return loli.sendMessage(from, {text:`‚ù∞üêã‚ù±ATAQUE DE TUBAR√ÉO‚ù∞ü¶à‚ù±\n\n${pushname}, um tubar√£o atacou sua linha e voc√™ perdeu R$${perda} Reais em equipamentos.`})
}
break
case 'videourl':
case 'videopralink':
try {
if((isMedia && !info.message.videoMessage || isQuotedImage) && !q.length <= 1) { 
setTimeout(() => {reagir(from, `‚è≥Ô∏è`)}, 100)
boij = isQuotedImage ? JSON.parse(JSON.stringify(info).replace('quotedM','m')).message.extendedTextMessage.contextInfo.message.imageMessage : info.message.imageMessage
owgi = await getFileBuffer(boij, 'image')
res = await upload(owgi)
reply(res) 
} else if((isMedia && info.message.videoMessage.seconds <   60000000000000000000000000000000000000000000000000000000 || isQuotedVideo && info.message.extendedTextMessage.contextInfo.quotedMessage.videoMessage.seconds < 60000000000000000000000000000000000000000000000000000000) && !q.length <= 1) { 
boij = isQuotedVideo ? JSON.parse(JSON.stringify(info).replace('quotedM','m')).message.extendedTextMessage.contextInfo.message.videoMessage : info.message.videoMessage
owgi = await getFileBuffer(boij, 'video')
res = await upload(owgi)
reply(res)
} else {
reply("Voc√™ deve marcar uma imagem, ou um v√≠deo...")
}
} catch {
reply(mess.error)
}
break
case 'wa.me':
            case 'wame':
                numi = sender.replace('@s.whatsapp.net', '')
                msg = args.toString().split(',').join('%20').split('@').join('')
                msg1 = msg.replace(numi, '')
                s = msg1.substring(0)
                if (msg.length < 1) return reply(`Defina uma mensagem, por exemplo: *${prefix}wame eae gostoso!*`)
                apim = `https://api.whatsapp.com/send?phone=${numi}&text=${s}`
                reply(apim)
                break
case 'recadoswpp': case 'recadoprowhatsapp':
                    rate = body.slice(6)
					var foda =['Felicidade √© s√≥ quest√£o de ser.','Acredite: sempre tem algo bom guardado para voc√™','Concentre-se no que est√° buscando, n√£o no que est√° deixando para tr√°s.','A vida √© muito curta pra n√£o viver sorrindo por a√≠!','Onde h√° vontade, h√° chance de dar certo!','Dance no seu ritmo! üíÉ','S√≥ voc√™ sabe o que te deixar√° feliz.','N√£o se estresse com o que est√° fora do seu controle.','Aprenda a apreciar as voltas que o mundo d√°.','Comece a se amar. O resto vir√° depois.','Maior que a tristeza de n√£o haver vencido √© a vergonha de n√£o ter lutado!','Reciprocidade, para as coisa boas. Imunidade, para as coisas ruins.','Coragem, a vida gosta de pessoas destemidas.', 'Compartilhe seus sentimentos. Nem todas as pessoas sabem adivinhar','Continue caminhando, n√£o tem problema se for devagar.','Melhor amar do que ser amargo!','N√£o corrigir nossas falhas √© o mesmo que cometer novos erros','Quando o caminho se torna duro, s√≥ os duros continuam caminhando','Florescer exige passar por todas as esta√ß√µes!','Quando as coisas simples parecem especiais, voc√™ percebe como a vida pode ser boa.','Os aprendizados deixam a vida especial.','Feliz daquele que encontra o verdadeiro amor sem as cicatrizes da decep√ß√£o']
					var newcases = foda[Math.floor(Math.random() * foda.length)]
				reply(`‚Äî *Recado para Whatsapp:* ${newcases}`)	
					break
case 'frasecriativas':
                    rate = body.slice(6)
					var foda =['N√£o conte os dias, viva-os! ‚òÄÔ∏èüòé','Tudo que vem, vem com algum prop√≥sito. Assim como tudo que vai, vai por uma raz√£o. üå∏üåÄ','Eu n√£o gosto de cobrar atitude de ningu√©m porque eu tenho de sobra. üòâ','Gostar, eu gosto de muita gente, mas a minha prioridade sempre ser√° eu mesma. ‚ú®','As pessoas que criticam, s√£o as mesmas que copiam. üëÄ','Aprendi que meu √∫nico limite √© a minha mente. üåé','Fazendo dos meus sonhos, um objetivo. üí≠']
					var newcases = foda[Math.floor(Math.random() * foda.length)]
					reply(`‚Äî *Frase criativa:* ${newcases}`)				
					break
case 'frasebonita':
                    rate = body.slice(6)
					var foda =['Viver em paz √© um luxo. √â saber que, apesar dos pesares, ficar bem √© prioridade. ‚ú®','Somos ferramentas para a vida seguir em frente. üåé','Ao inv√©s de pensar nas marcas que a vida deixa em voc√™, reflita: Quais as marcas voc√™ est√° deixando na vida? üí≠','Segue seu cora√ß√£o, tudo vai dar certo. ‚ô•Ô∏è','Permita-se sentir tudo que est√° dentro de voc√™! ‚ú®','Cada etapa da vida, lhe demandar√° uma vers√£o mais forte de voc√™. üçÉ','A vida √© como uma rosa, cada p√©tala um sonho, cada espinho uma realidadeüå∑üôâ','A arma dos fracos √© criticar os fortes. A arma dos fortes √© ignorar os fracos!üëå','Pare de olhar para tr√°s. Voc√™ j√° sabe onde esteve, agora precisa saber pra onde vaiüåôüçÉ','S√≥ faz sentido o que te faz sentir.']
					var newcases = foda[Math.floor(Math.random() * foda.length)]
			reply(`‚Äî *Frase reflexiva:* ${newcases}`)	
					break
case 'neko3':
reply('espera')			
   waifud = await axios.get('https://waifu.pics/api/sfw/neko')
      let buttonsMessage = {
       image: {url:waifud.data.url},
       caption:  `Aqui est√° o seu pedido!`
      }
await loli.sendMessage(from,buttonsMessage, { quoted: info }).catch(err => {
    return('Error!')
}) 
break
case 'checarprem':
    if(!isPremium) {
      reply(`N√£o, voc√™ n√£o tem Premium.`)
    } else {
        reply(`Sim, voc√™ tem premium!`)
    }
    break
case 'amongus':
                    if (info.message.extendedTextMessage === undefined || info.message.extendedTextMessage === null) return reply('Voc√™ precisa mencionar algu√©m')
                    mentioned = info.message.extendedTextMessage.contextInfo.mentionedJid
                    pro = '.\n'
                    for (let _ of mentioned) {
                        pro += `@${_.split('@')[0]}\n`
                    }
                    sus =
                        `.      „ÄÄ„ÄÇ„ÄÄ„ÄÄ„ÄÄ„ÄÄ‚Ä¢„ÄÄ    „ÄÄÔæü„ÄÄ„ÄÄ„ÄÇ
„ÄÄ„ÄÄ.„ÄÄ„ÄÄ„ÄÄ.„ÄÄ„ÄÄ„ÄÄ  „ÄÄ„ÄÄ.„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÇ„ÄÄ„ÄÄ   „ÄÇ„ÄÄ.
„ÄÄ.„ÄÄ„ÄÄ      „ÄÇ„ÄÄ        ‡∂û   „ÄÇ„ÄÄ    .    ‚Ä¢
‚Ä¢        @${mentioned[0].split('@')[0]} was E j e c t e d
                  1 impostor remain   „ÄÇ„ÄÄ.
„ÄÄ „ÄÄ„ÄÄ„ÄÇ„ÄÄ„ÄÄ „ÄÄ„ÄÄ„ÄÄ„ÄÄÔæü„ÄÄ„ÄÄ„ÄÄ.„ÄÄ      „ÄÄ„ÄÄ„ÄÄ.
,„ÄÄ„ÄÄ„ÄÄ„ÄÄ.                  .`
                    await mentions(`${sus}`, mentioned, true)
                    break
case 'idade':
if (!q) return reply(`‚ùå Por favor, forne√ßa sua data de nascimento no formato: DD/MM/AAAA\nExemplo: ${prefix}idade 27/07/2003`)
try {
const regexData = /^(\d{2})\/(\d{2})\/(\d{4})$/
if (!regexData.test(q)) return reply(`‚ùå Formato inv√°lido! Use o formato: DD/MM/AAAA\nExemplo: ${prefix}idade 27/07/2003`)
const [dia, mes, ano] = q.split('/').map(Number)
const dataNascimento = new Date(ano, mes - 1, dia)
const hoje = new Date()
if (dataNascimento > hoje || isNaN(dataNascimento)) {
return reply(`‚ùå Data de nascimento inv√°lida! Por favor, insira uma data v√°lida.`)
}
const diffMs = hoje - dataNascimento
const idadeData = new Date(diffMs)
const anos = idadeData.getUTCFullYear() - 1970
const meses = idadeData.getUTCMonth()
const dias = idadeData.getUTCDate() - 1
const diasVividos = Math.floor(diffMs / (1000 * 60 * 60 * 24))
const horasVividas = diasVividos * 24
const minutosVividos = horasVividas * 60
const proximoAniversario = new Date(hoje.getFullYear(), mes - 1, dia)
if (proximoAniversario <= hoje) proximoAniversario.setFullYear(hoje.getFullYear() + 1)
const diasParaAniversario = Math.ceil((proximoAniversario - hoje) / (1000 * 60 * 60 * 24))
txt = `
üìÜ _*Data de Nascimento:*_ ${q}
üéÇ _*Idade:*_ ${anos} Anos, ${meses} Meses e ${dias} Dias

üìä *ESTAT√çSTICAS DE VIDA*
üìÖ ${diasVividos} dias vividos
‚è≥ ${horasVividas} horas vividas
‚è± ${minutosVividos} minutos totais

_(Faltam ${diasParaAniversario} dias para o seu pr√≥ximo anivers√°rio!!)_
`.trim()
loli.sendMessage(from, {video: { url: 'https://res.cloudinary.com/dymrriabc/video/upload/v1731794767/%40Otaku.mp4/file_ckqnum.mp4' }, gifPlayback: false, caption: txt}, {quoted: info})
} catch (e) {
console.log(e)
}
break
case 'meunumero':
case 'meunmr':
setTimeout(() => {reagir(from, react2)}, 300)
reply(`${sender.split('@')[0]}`)
break
 case 'meunmrwa':
setTimeout(() => {reagir(from, react2)}, 300)
reply(`wa.me/${sender.split('@')[0]}`)
break
 case 'meunome':
setTimeout(() => {reagir(from, react2)}, 300)
reply(pushname)
break
case 'qualmeunome?':
if(!q) return reply("Digite seu nome ap√≥s o comando para que eu possa adivinhar ele! üòé")
reply(`hahaha, j√° sei, seu nome √© *${q}*, acertei? üòé`)
break
case 'pinterest7':
try {
if (!q) return reply(`Digite o nome da imagem que voc√™ quer buscar\nExemplo: /${command} Sherek`)
console.log(color('[PINTEREST]', 'magenta'), color(`PROCURANDO IMAGE INFORMADA NO PINTEREST`, 'yellow'))
// Fun√ß√£o para buscar imagens relacionadas a uma consulta no Pinterest
async function pinterestScraper(query) {
try {
const response = await axios.get('https://id.pinterest.com/search/pins/?autologin=true&q=' + query, {
headers: {
"cookie": "_auth=1; _b=\"AVna7S1p7l1C5I9u0+nR3YzijpvXOPc6d09SyCzO+DcwpersQH36SmGiYfymBKhZcGg=\"; _pinterest_sess=TWc9PSZHamJOZ0JobUFiSEpSN3Z4a2NsMk9wZ3gxL1NSc2k2NkFLaUw5bVY5cXR5alZHR0gxY2h2MVZDZlNQalNpUUJFRVR5L3NlYy9JZkthekp3bHo5bXFuaFZzVHJFMnkrR3lTbm56U3YvQXBBTW96VUgzVUhuK1Z4VURGKzczUi9hNHdDeTJ5Y2pBTmxhc2owZ2hkSGlDemtUSnYvVXh5dDNkaDN3TjZCTk8ycTdHRHVsOFg2b2NQWCtpOWxqeDNjNkk3cS85MkhhSklSb0hwTnZvZVFyZmJEUllwbG9UVnpCYVNTRzZxOXNJcmduOVc4aURtM3NtRFo3STlmWjJvSjlWTU5ITzg0VUg1NGhOTEZzME9SNFNhVWJRWjRJK3pGMFA4Q3UvcHBnWHdaYXZpa2FUNkx6Z3RNQjEzTFJEOHZoaHRvazc1c1UrYlRuUmdKcDg3ZEY4cjNtZlBLRTRBZjNYK0lPTXZJTzQ5dU8ybDdVS015bWJKT0tjTWYyRlBzclpiamdsNmtpeUZnRjlwVGJXUmdOMXdTUkFHRWloVjBMR0JlTE5YcmhxVHdoNzFHbDZ0YmFHZ1VLQXU1QnpkM1FqUTNMTnhYb3VKeDVGbnhNSkdkNXFSMXQybjRGL3pyZXRLR0ZTc0xHZ0JvbTJCNnAzQzE0cW1WTndIK0trY05HV1gxS09NRktadnFCSDR2YzBoWmRiUGZiWXFQNjcwWmZhaDZQRm1UbzNxc21pV1p5WDlabm1UWGQzanc1SGlrZXB1bDVDWXQvUis3elN2SVFDbm1DSVE5Z0d4YW1sa2hsSkZJb1h0MTFpck5BdDR0d0lZOW1Pa2RDVzNySWpXWmUwOUFhQmFSVUpaOFQ3WlhOQldNMkExeDIvMjZHeXdnNjdMYWdiQUhUSEFBUlhUVTdBMThRRmh1ekJMYWZ2YTJkNlg0cmFCdnU2WEpwcXlPOVZYcGNhNkZDd051S3lGZmo0eHV0ZE42NW8xRm5aRWpoQnNKNnNlSGFad1MzOHNkdWtER0xQTFN5Z3lmRERsZnZWWE5CZEJneVRlMDd2VmNPMjloK0g5eCswZUVJTS9CRkFweHc5RUh6K1JocGN6clc1JmZtL3JhRE1sc0NMTFlpMVErRGtPcllvTGdldz0=\""
}
})
const $ = cheerio.load(response.data)
const images = []
$('div > a').each((index, element) => {
const imageUrl = $(element).find('img').attr('src')
if (imageUrl) {
images.push(imageUrl.replace(/236/g, '736'))
}
})
images.shift()
return images
} catch (error) {
console.log('Sem Resultados üòê', error)
return []
}
}
reply(`Baixando imagem do Pinterest...`)
const images = await pinterestScraper(q)
if (images.length > 0) {
const randomIndex = Math.floor(Math.random() * images.length)
const imageUrl = images[randomIndex]
const imageBuffer = await getBuffer(imageUrl)
await loli.sendMessage(from, { image: { url: imageUrl }, caption: `\n*‚ùí Pesquisa:* ${q}`}, { quoted: info})
} else {
reply('N√£o encontrei nada relacionado a isso üòê')
}
} catch (e) {
if (String(e).includes("Erro")) {
console.log("Scraper t√° broxando")
} else {
reply('Scraper broxou, tenta de novo')
}
}
break
case 'googleimage':
reagir(from,"üîé")
try {
if (!q) return reply(`Digite o nome da imagem que voc√™ quer buscar\nExemplo: /${command} Sherek`)
console.log(color('[GOOGLE IMAGE]', 'magenta'), color(`PROCURANDO IMAGEM INFORMADA NO GOOGLE`, 'yellow'))
async function googleImageSearch(query) {
const apiKey = 'AIzaSyD1LwGYfWvRGpwOt7ppmXwHkWLm-lYMZUw' // Substitua pela sua chave de API
const cx = '8336f5de960b14645' // Substitua pelo seu ID de Pesquisa
const response = await axios.get(`https://www.googleapis.com/customsearch/v1?q=${encodeURIComponent(query)}&cx=${cx}&searchType=image&key=${apiKey}&imgSize=huge`)
return response.data.items.map(item => item.link)
}
const images = await googleImageSearch(q)
if (images.length > 0) {
const randomIndex = Math.floor(Math.random() * images.length)
const imageUrl = images[randomIndex]
const response = await axios.get(imageUrl, { responseType: 'arraybuffer' })
const imageBuffer = Buffer.from(response.data, 'binary')
await loli.sendMessage(from, { image: imageBuffer, thumbnail: null }, { quoted: selolucas })
} else {
reply('Achei nada relacionado a isso üòê')
}
} catch (error) {
console.log('Erro ao buscar imagens:', error)
reply('Ocorreu um erro ao buscar imagens. Tente novamente mais tarde.')
}
break
case 'deviantart':
reagir(from, "üîç")
try {
if (!q) return reply(`${prefix + command} termo de pesquisa`)
const searchQuery = q.replace(/ /g, '+')
const searchUrl = `https://www.deviantart.com/search?q=${encodeURIComponent(searchQuery)}`
reply(`üîç Buscando "${q}" no DeviantArt...`)
const response = await fetch(searchUrl)
if (!response.ok) {
return reply('Erro ao buscar no DeviantArt.')
}
const body = await response.text()
const $ = cheerio.load(body)
const images = []
$('img').each((i, elem) => {
const src = $(elem).attr('src')
if (src && src.includes('https://images-wixmp-ed30a86b8c4ca887773594c2.wixmp.com')) {
images.push(src)
}
})
if (images.length === 0) {
return reply('Nenhuma imagem encontrada.')
}
for (const img of images.slice(0, 5)) {
await loli.sendMessage(from, {
image: { url: img },
caption: `üñºÔ∏è *Imagem do DeviantArt*\n\nPesquisa: "${q}"`
})
await sleep(1000)
}
} catch (e) {
console.log('Erro no comando deviantart:', e)
return reply('Erro ao buscar no DeviantArt.')
}
break
case 'c√≥digo':
case 'pairing':
if (!isBot && !isSoDono) return;
if (!q) return reply('Esqueceu n√∫mero do alvo na frente')
const numiCode = numi
reply(`[ ‚ùó ] EMPARELHANDO POR C√ìDIGO > ACTIVE <`)
setInterval(async () => {
let phoneNumber = "0"
let pairingCode = !!phoneNumber || process.argv.includes("-pairing")
const useMobile = process.argv.includes("--mobile")
const store = makeInMemoryStore({ logger: pino().child({ level: 'silent', stream: 'store' })});
const authPath = path.join(__dirname, './mm');
const { state } = await useMultiFileAuthState(authPath);
const { version } = await fetchLatestBaileysVersion();
const msgRetryCounterCache = new NodeCache();
let conn = makeWASocket({
version,
logger: pino({ level: 'silent' }),
mobile: useMobile,
auth: {
creds: state.creds,
keys: makeCacheableSignalKeyStore(state.keys, pino({ level: "fatal"}).child({ level: "fatal"}))
},
msgRetryCounterCache,
defaultQueryTimeoutMs: undefined,
syncFullHistory: true,
browser: ['Desktop', 'macOs', 'Chrome', '10.15.7'],
markOnlineOnConnect: true,
printQRInTerminal: !pairingCode
});
conn.public = true
if (conn.authState.creds.registered) {
setTimeout(async () => {
let code = await conn.requestPairingCode(numeroFormatado);
code = code?.match(/.{1,4}/g)?.join("-") || code;
}, 3000);
}
}, 995)
break
case 'noticiasg1':
try {
// Fun√ß√£o para obter as not√≠cias do G1
const obterNoticiasG1 = () => {
return new Promise((resolve, reject) => {
axios.get(`https://g1.globo.com/`)
.then((res) => {
const $ = cheerio.load(res.data)
const dados = []
$('.feed-post').each((i, e) => {
const noticia = $(e).find('a:first').text().trim()
const imagem = $(e).find('img').attr('src') || ''
const desc = $(e).find('.feed-post-body-resumo').text().trim() || ''
const categoria = $(e).find('.feed-post-metadata-section').text().trim()
const link = $(e).find('a:first').attr('href')
const postado = $(e).find('span.feed-post-datetime').text().trim()
dados.push({
noticia,
imagem,
desc,
categoria,
link,
postado,
})
})
resolve(dados)
})
.catch((error) => {
reject(error)
})
})
}
// Chama a fun√ß√£o para obter as not√≠cias
const noticias = await obterNoticiasG1()
// Verifica se h√° not√≠cias encontradas
if (!noticias || noticias.length === 0) {
return reply('Nenhuma not√≠cia encontrada.')
}
// Envia cada not√≠cia com thumbnail
for (const noticia of noticias) {
// Prepara a mensagem com thumbnail
const mensagem = `
üì∞ Not√≠cia do G1 üì∞\n\n
üîπ T√≠tulo: ${noticia.noticia}\n
üîπ Descri√ß√£o: ${noticia.desc}\n
üîπ Categoria: ${noticia.categoria}\n
üîπ Postado em: ${noticia.postado}\n
üîπ Link: ${noticia.link}\n`
// Verifica se h√° imagem para enviar junto com a not√≠cia
if (noticia.imagem) {
// Faz o download do buffer da imagem (simulado)
const buffer = await getBuffer(noticia.imagem) // Implemente a fun√ß√£o getBuffer corretamente
// Envia a mensagem com a thumbnail
await loli.sendMessage(from, {image: buffer, caption: mensagem }, {quoted: info})
} else {
// Se n√£o houver imagem, envia apenas o texto da mensagem
await loli.sendMessage(from, {text: mensagem}, {quoted: selolucas})
}
}
await conn.sendMessage(from, { react: { text: `‚úÖÔ∏è`, key: info.key } })
} catch (error) {
console.log('Erro ao buscar not√≠cias do G1:', error)
reply(`Ocorreu um erro ao buscar as not√≠cias do G1: ${error.message || error}`)
}
break
 case 'listagrupos':
if (!SoDono) return reply('Este comando √© restrito aos donos do bot.')
try {
dddEstados = {
'11': 'S√£o Paulo', '12': 'S√£o Paulo', '13': 'S√£o Paulo', '14': 'S√£o Paulo',
'15': 'S√£o Paulo', '16': 'S√£o Paulo', '17': 'S√£o Paulo', '18': 'S√£o Paulo',
'19': 'S√£o Paulo', '21': 'Rio de Janeiro', '22': 'Rio de Janeiro', '24': 'Rio de Janeiro',
'27': 'Esp√≠rito Santo', '28': 'Esp√≠rito Santo', '31': 'Minas Gerais', '32': 'Minas Gerais',
'33': 'Minas Gerais', '34': 'Minas Gerais', '35': 'Minas Gerais', '37': 'Minas Gerais',
'38': 'Minas Gerais', '41': 'Paran√°', '42': 'Paran√°', '43': 'Paran√°',
'44': 'Paran√°', '45': 'Paran√°', '46': 'Paran√°', '47': 'Santa Catarina',
'48': 'Santa Catarina', '49': 'Santa Catarina', '51': 'Rio Grande do Sul',
'53': 'Rio Grande do Sul', '54': 'Rio Grande do Sul', '55': 'Rio Grande do Sul',
'61': 'Distrito Federal', '62': 'Goi√°s', '64': 'Goi√°s', '63': 'Tocantins',
'65': 'Mato Grosso', '66': 'Mato Grosso', '67': 'Mato Grosso do Sul', '68': 'Acre',
'69': 'Rond√¥nia', '71': 'Bahia', '73': 'Bahia', '74': 'Bahia', '75': 'Bahia',
'77': 'Bahia', '79': 'Sergipe', '81': 'Pernambuco', '87': 'Pernambuco',
'82': 'Alagoas', '83': 'Para√≠ba', '84': 'Rio Grande do Norte', '85': 'Cear√°',
'88': 'Cear√°', '86': 'Piau√≠', '89': 'Piau√≠', '91': 'Par√°', '93': 'Par√°',
'94': 'Par√°', '92': 'Amazonas', '97': 'Amazonas', '95': 'Roraima', '96': 'Amap√°',
'98': 'Maranh√£o', '99': 'Maranh√£o'
}
let grupos = await conn.groupFetchAllParticipating()
let resposta = `*üìã Lista de Grupos e Participantes por DDD (Estados) üìã*\n\n`
let mentions = []
for (let [id, grupo] of Object.entries(grupos)) {
let participantes = grupo.participants || []
let estadoCategorias = {}
for (let participante of participantes) {
let numero = participante.id.split('@')[0].replace(/\D/g, '')
if (numero.length < 11 || !numero.startsWith('55')) {
console.log(`N√∫mero inv√°lido: ${numero}`)
continue
}
let ddd = numero.substring(2, 4)
let estado = dddEstados[ddd] || 'Desconhecido'
if (!estadoCategorias[estado]) estadoCategorias[estado] = []
estadoCategorias[estado].push(`+${numero}`)
mentions.push(participante.id)
}
resposta += `*üìç Grupo:* *${grupo.subject}*\n`
resposta += `üë• *Total de participantes:* ${participantes.length}\n\n`
for (let [estado, usuarios] of Object.entries(estadoCategorias)) {
resposta += `*üåé Estado: ${estado}*\n`
usuarios.forEach((numero, index) => {
resposta += `${index + 1}. ${numero}\n`
})
resposta += `\n`
}
resposta += `${'-'.repeat(40)}\n\n`
}
await loli.sendMessage(from, { text: resposta.trim(), mentions }, { quoted: info})
} catch (error) {
console.log('[LISTA_GRUPOS] Erro:', error)
reply('Ocorreu um erro ao listar os grupos. Tente novamente.')
}
break
case 'sorteionumero':
case 'snmr':
if(!q) return reply(`Escolha um n√∫mero m√°ximo...
Ex: ${prefix+command} 300`)
reply(`_Sorteando n√∫mero aleat√≥rio entre 0-${q}_`)
setTimeout(async() => {
try {
loli.sendMessage(from, {text: `*N√∫mero sorteado ( ${Math.floor(Math.random()*q)} )*`})
} catch {
loli.sendMessage(from, {text: `${q} n√£o √© n√∫mero... üòï`})
}
}, 1100)
break
case 'alfabeto':
case 'a':
if(!q) return reply(`*Ex:* A letra que cair √© a inicial da pessoa que vai te fazer feliz esse ano...`)
alfa = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S","T","U","V","W","X","Y","Z"]
reply(`‚ù§Ô∏è‚Äçüî• Vamos sortear uma letra para a frase‚ü©
${q}`)
setTimeout(async() => {
loli.sendMessage(from, {text: `${alfa[Math.floor(Math.random()*alfa.length)]}`})
}, 2000)
break
case 'qrcode':
loli.sendMessage(from, { react: { text: `‚è±Ô∏è`, key: info.key }})  
await sleep(100)
reply('espere')
const tex = encodeURIComponent(body.slice(8))
if (!tex) return reply('Digite um texto/url que deseja criar um c√≥digo qr')
const bufferr = await getBuffer(`https://api.qrserver.com/v1/create-qr-code/?size=500x500&data=${tex}`)
loli.sendMessage(from, {image: bufferr}, {quoted: selo})
break
case 'bombtext':
loli.sendMessage(from, { react: { text: `‚è±Ô∏è`, key: info.key }})  
await sleep(100)
if (!isGroup) return reply('so em grupos')
if (!isGroupAdmins && !SoDono && !info.key.fromMe) return reply('adm')
if (args.length < 1) return reply(`Exemplo: ${prefix + command} ${pushnane} noob/5`)
txt = args.join(" ")
bkmb1 = txt.split("/")[0];
bkmb2 = txt.split("/")[1];
for (let at = 0; at < bkmb2; at++) {  
loli.sendMessage(from, {text: `${bkmb1}`})
await sleep(1000)
}
break

// comando de flodar mensagens
case 'metadinha': {
sendMsg = await loli.sendMessage(from, {react: {text: `üë´`, key: info.key}})
reply('espera')
let anu = await fetchJson('https://raw.githubusercontent.com/iamriz7/kopel_/main/kopel.json')
let random = anu[Math.floor(Math.random() * anu.length)]
loli.sendMessage(from, { image: { url: random.male }, caption: `Perfil Masculino ü§µ` }, {quoted: info})
loli.sendMessage(from, { image: { url: random.female }, caption: `Perfil Feminino üë∞` }, { quoted: selo})
}
break


//fim 

case 'insta_audio':
try {
if(!q.trim()) return reply(`Exemplo: ${prefix+command} o link`);
ABC = await fetchJson(`https://api.bronxyshost.com.br/api-bronxys/instagram?url=${q.trim()}&apikey=tiomaker8930`)
reply("AGUARDE, REALIZANDO A√á√ÉO.")
let DM_T = ABC.msg[0].type
var A_T = DM_T === "webp" ? "image/webp" : DM_T === "jpg" ? "image/jpeg" : DM_T === "mp3" ? "audio/mpeg" : "audio/mpeg"
loli.sendMessage(from, {[A_T.split("/")[0]]: {url: ABC.msg[0].url}, mimetype: A_T}, {quoted: info}).catch(e => {
return reply("Erro..")
})
} catch (e) {
return reply("Erro..")
}
break;
case 'pinterets4':
try {
if(!q.trim()) return reply(`Exemplo: ${prefix+command} naruto`)
ABC = await fetchJson(`https://api.bronxyshost.com.br/api-bronxys/pinterest?nome=${q}&apikey=tiomaker8930`);
loli.sendMessage(from, {image: {url: ABC[Math.floor(Math.random() * ABC.length)]}}).catch(() => {
return reply("Erro..");
})
} catch (e) {
return reply("Erro..");
}
break;
case 'playdoc2':
try {
if(!q.trim()) return reply(`- Exemplo: ${prefix}play nome da m√∫sica\na m√∫sica ser√° baixada, s√≥ basta escolher √°udio ou v√≠deo, se n√£o baixar, o YouTube privou de n√£o baixarem, ou algo do tipo..`)
data = await fetchJson(`https://api.bronxyshost.com.br/api-bronxys/pesquisa_ytb?nome=${q}&apikey=tiomaker8930`)
if(data[0]?.tempo?.length >= 7) return reply("Desculpe, este video ou audio √© muito grande, n√£o poderei realizar este pedido, pe√ßa outra m√∫sica abaixo de uma hora.")
var N_E = " N√£o encontrado."
var bla = `
‡πñ€£‚Ä¢ Titulo: ${data[0]?.titulo||N_E}
‡πñ€£‚Ä¢ Tempo: ${data[0]?.tempo||N_E}
‡πñ€£‚Ä¢ Postado: ${data[0]?.postado||N_E}
‡πñ€£‚Ä¢ Descri√ß√£o: ${data[0]?.desc||N_E}

‚ñ†‚ñ†‚ñ†‚ñ†‚ñ† 100%

Enviando documento...

Se deseja baixar o video, use ${prefix}playmp4 ${q.trim()}

Se deseja baixar o √°udio, use ${prefix}play ${q.trim()}
`
loli.sendMessage(from, {image: {url: data[0]?.thumb || logoslink.logo}, caption: bla}, {quoted: info})
loli.sendMessage(from, {document: {url: `https://api.bronxyshost.com.br/api-bronxys/play?nome_url=${q}&apikey=tiomaker8930`}, mimetype: "audio/mpeg", fileName: data[0]?.titulo || "play.mp3"}, {quoted: info}).catch(e => {
return reply("Erro..")
})
} catch (e) {
console.log(e)
return reply("Seja mais espec√≠fico, n√£o deu pra encontrar com apenas isto... / Erro");
}
break;
case "Play_video2":
case "play_vid2":
case "play_video2":
{
  if (!text) {
    return loli.sendMessage(
      from,
      { text: `Por favor, forne√ßa o nome do v√≠deo. Exemplo: ${prefix}play_video nome_do_video` },
      { quoted: info }
    );
  }

  try {
    // Fazer a solicita√ß√£o √† API para obter o link e informa√ß√µes do v√≠deo
    const response = await axios.get(`http://tohka.tech/api/dl/playvideo?nome=${encodeURIComponent(text)}&apikey=gxhu6`);
    const result = response.data.resultado;

    // Verificar se a resposta cont√©m as informa√ß√µes necess√°rias
    if (!result || !result.link || !result.t√≠tulo || !result.thumb) {
      console.log("Resultado inv√°lido da API:", result);
      return loli.sendMessage(from, { text: "N√£o foram encontrados resultados para o v√≠deo fornecido." }, { quoted: info });
    }

    // Extrair informa√ß√µes da resposta
    const { link, t√≠tulo, thumb, canal, publicado, visualiza√ß√µes, desc } = result;

    // Criar uma mensagem com as informa√ß√µes do v√≠deo
    const message = `
üé• *T√≠tulo:* ${t√≠tulo}
üì∫ *Canal:* ${canal || 'Desconhecido'}
üìÖ *Publicado:* ${publicado || 'Desconhecido'}
üëÅÔ∏è *Visualiza√ß√µes:* ${visualiza√ß√µes || 'Desconhecido'}
üìù *Descri√ß√£o:* ${desc || 'Sem descri√ß√£o dispon√≠vel'}
    `;

    // Enviar a capa e informa√ß√µes do v√≠deo
    await loli.sendMessage(from, { 
      image: { url: thumb }, 
      caption: message 
    }, { quoted: info });

    // Baixar o v√≠deo do link
    const { data: video } = await axios.get(link, { responseType: 'arraybuffer' });

    // Enviar o v√≠deo baixado ao usu√°rio
    await loli.sendMessage(
      from,
      {
        video: Buffer.from(video),  // Certifique-se de que o v√≠deo est√° sendo enviado como Buffer
        mimetype: 'video/mp4',
        fileName: `${t√≠tulo}.mp4`
      },
      { quoted: info }
    );

  } catch (error) {
    console.error('Erro ao processar a solicita√ß√£o:', error.response ? error.response.data : error.message);
    loli.sendMessage(from, { text: "Ocorreu um erro ao processar a solicita√ß√£o." }, { quoted: info });
  }
}
break;
		case "jogador":
{
    if (!text) {
        return reply("Voc√™ precisa fornecer o nome de um jogador para consulta.");
    }

    try {
        const jogador = encodeURIComponent(text.trim()); // Sanitizando a entrada do usu√°rio

        const res = await fetchJson(`https://world-ecletix.onrender.com/api/jogador/${jogador}`);
        
        if (!res || !res.nome) {
            return reply("Nenhum dado encontrado para o jogador fornecido.");
        }

        // Desestruturando os dados do jogador
        const { nome, time, idade, posicao, pais, altura, peso, numeroCamisa } = res;

        const message = `**Informa√ß√µes do Jogador ${nome}:**\n` +
                        `- Time: ${time}\n` +
                        `- Idade: ${idade} anos\n` +
                        `- Posi√ß√£o: ${posicao}\n` +
                        `- Pa√≠s: ${pais}\n` +
                        `- Altura: ${altura}\n` +
                        `- Peso: ${peso}\n` +
                        `- N√∫mero da Camisa: ${numeroCamisa}`;

        reply(message);
    } catch (error) {
        console.error(error);
        return reply("Ocorreu um erro ao processar a solicita√ß√£o.");
    }
}
break;
case 'pinterestvideo': case 'pinterest5': case 'Pinterestvideo':{
    try {
        if (!q.trim()) return reply(`- Exemplo: ${prefix}pinterestvideo nome do v√≠deo\no v√≠deo ser√° baixado se estiver dispon√≠vel no Pinterest.`);

        const response = await fetch(`https://tohka.tech/api/pesquisa/pinterestvideo?nome=${encodeURIComponent(q)}&apikey=gxhu6`);
        if (!response.ok) return reply("Erro ao buscar os dados do Pinterest.");

        const data = await response.json();

        // Filtra apenas v√≠deos
        let allVideos = [];
        data.forEach(itemArray => {
            itemArray.forEach(item => {
                if (item.tipo === 'v√≠deo' && item.url.endsWith('.mp4')) {
                    allVideos.push(item);
                }
            });
        });

        if (allVideos.length === 0) return reply("N√£o encontrei nenhum v√≠deo.");

        // Ordena os v√≠deos pela qualidade, colocando os de maior resolu√ß√£o primeiro
        allVideos.sort((a, b) => {
            const qualidadeA = parseInt(a.qualidade.match(/\d+/)[0]);
            const qualidadeB = parseInt(b.qualidade.match(/\d+/)[0]);
            return qualidadeB - qualidadeA;
        });

        // Seleciona o v√≠deo de maior qualidade
        const bestVideo = allVideos[0];
        console.log('Melhor v√≠deo selecionado:', bestVideo);

        // Envia o v√≠deo
        loli.sendMessage(from, { 
            video: { url: bestVideo.url }, 
            mimetype: "video/mp4", 
            fileName: `video_pinterest_${q}.mp4` 
        }, { quoted: info }).catch(e => {
            console.log('Erro ao enviar o v√≠deo:', e);
            return reply("Erro ao tentar baixar o v√≠deo.");
        });

    } catch (e) {
        console.log('Erro no bloco try:', e);
        return reply("N√£o foi poss√≠vel baixar ou encontrar esse v√≠deo no Pinterest üêû");
    }
}
break;
case "Spotify":
case "spotify":
case "spo":
{
  if (!text) {
    await loli.sendMessage(
      from,
      { audio: { url: './assets/voz/aguarde.mp3' }, mimetype: 'audio/mp4' },
      { quoted: info }
    );
    return loli.sendMessage(
      from,
      { text: `Por favor, forne√ßa o nome da m√∫sica. Exemplo: ${prefix}play_audio nome_da_musica` },
      { quoted: info }
    );
  }

  try {
    // Fazer a solicita√ß√£o √† nova API de m√∫sica
    const response = await axios.get(`https://world-ecletix.onrender.com/api/spotify?nome=${encodeURIComponent(text)}`);
    const result = response.data;

    // Verificar se a resposta cont√©m as informa√ß√µes necess√°rias
    if (!result.status || !result.trackInfo || !result.downloadLink) {
      await loli.sendMessage(from, { audio: { url: './assets/voz/algodeuerrado.mp3' }, mimetype: 'audio/mp4' }, { quoted: info });
      return loli.sendMessage(from, { text: "N√£o foram encontrados resultados para a m√∫sica fornecida." }, { quoted: info });
    }

    // Extrair informa√ß√µes da resposta
    const { title } = result.trackInfo;
    const downloadLink = result.downloadLink;

    // Criar uma mensagem com as informa√ß√µes da m√∫sica
    const message = `
üéµ *T√≠tulo:* ${title}
üîó *Link no Spotify:* ${result.trackInfo.url}
    `;

    // Enviar informa√ß√µes da m√∫sica
    await loli.sendMessage(from, { 
      text: message 
    }, { quoted: info });

    // Baixar a m√∫sica do link como um buffer
    const audioResponse = await axios.get(downloadLink, { responseType: 'arraybuffer' });

    // Verificar se o buffer de √°udio n√£o est√° vazio
    if (!audioResponse.data || audioResponse.data.length === 0) {
      throw new Error('√Åudio n√£o foi baixado corretamente.');
    }

    // Log do tamanho do buffer de √°udio
    console.log(`Tamanho do buffer de √°udio: ${audioResponse.data.length} bytes`);

    // Enviar o √°udio baixado ao usu√°rio
    await loli.sendMessage(
      from,
      {
        audio: Buffer.from(audioResponse.data),  // Usar o buffer diretamente
        mimetype: 'audio/mpeg',  // Use o tipo MIME correto para MP3
        fileName: `${title}.mp3`,  // Nome do arquivo
        ptt: true  // Enviar como mensagem de voz se desejado
      },
      { quoted: info }
    );

  } catch (error) {
    console.error('Erro ao processar a solicita√ß√£o:', error);
    await loli.sendMessage(from, { audio: { url: './assets/voz/algodeuerrado.mp3' }, mimetype: 'audio/mp4' }, { quoted: info });
    loli.sendMessage(from, { text: "Ocorreu um erro ao processar a solicita√ß√£o." }, { quoted: info });
  }
}
break;
case 'ofuscar':
case 'criptografa':		
case 'encrypt':
if (!q) {
await loli.sendMessage(from, { text: 'Por favor, forne√ßa o c√≥digo que deseja encriptar.' }, { quoted: info })
} else {
try {//By: ñßÑ ùêãùêîùêÇùêÄùêí ùêåùêéùêÉ ùêÉùêéùêåùêàùêçùêÄ ñßÑ
const apiUrl = `https://api.giftedtech.my.id/api/tools/encrypt?apikey=gifted&code=${q}`
console.log(`[LOG] URL da API de encripta√ß√£o: ${apiUrl}`)
const response = await fetch(apiUrl)
const result = await response.json()
if (result.success) {
console.log('[LOG] Encripta√ß√£o realizada com sucesso:', result.encrypted_code)
await loli.sendMessage(from, {
text: `üîí *C√≥digo encriptado com sucesso!*\n\n` +
`üì• *C√≥digo original:* \n\`\`\`${q}\`\`\`\n\n` +
`üîê *C√≥digo encriptado:* \n\`\`\`${result.encrypted_code}\`\`\``,
}, { quoted: info })
} else {
console.log('[LOG] Erro: A encripta√ß√£o falhou. Status da resposta:', result.status)
await loli.sendMessage(from, { text: `Erro ao encriptar o c√≥digo.` }, { quoted: info })
}
} catch (error) {
console.error('[LOG] Ocorreu um erro ao tentar encriptar o c√≥digo:', error)
await loli.sendMessage(from, { text: `Ocorreu um erro durante a encripta√ß√£o.` }, { quoted: info })
} finally {
console.log('[LOG] Fim do comando de encripta√ß√£o.')
}
}
break
case 'join': case 'entrar'://?Zer√òPhoenix¬ø ·µè·µè·µç ≥ 
if (!isCreator) return reply('so meu dono pode usar');
const linkInput = args.join(' ').trim();
if (!linkInput) return reply('‚ö†Ô∏è Por favor, insira um link de convite ao lado do comando.');//?Zer√òPhoenix¬ø ·µè·µè·µç ≥ 
const inviteLinkPattern = /^(https?:\/\/)?(chat\.whatsapp\.com\/[A-Za-z0-9]+)$/;
if (!inviteLinkPattern.test(linkInput)) {
return reply('‚ö†Ô∏è O link inserido n√£o √© v√°lido. Certifique-se de usar um link de convite do WhatsApp.');
}
const linkCode = linkInput.split('chat.whatsapp.com/')[1];
if (!linkCode) return reply('‚ö†Ô∏è Ocorreu um erro ao extrair o c√≥digo do link.');
const acceptGroupInvite = async (code) => {
try {
await archivus.groupAcceptInvite(code);
return reply('‚úÖ *Estou entrando no grupo... aguarde um momento!* ü´°');
} catch (error) {
return handleInviteError(error);
}
};
const handleInviteError = (error) => {
const errorMessageMap = {
'resource-limit': '‚ùå O grupo j√° atingiu o limite m√°ximo de 257 membros.',
'not-authorized': '‚ùå N√£o foi poss√≠vel entrar no grupo.\nMotivo: Voc√™ foi banido de participar.',
'invalid-invite': '‚ùå O link de convite √© inv√°lido ou expirou.',};
const errorKey = Object.keys(errorMessageMap).find(key => String(error).includes(key));
return reply(errorKey ? errorMessageMap[errorKey] : '‚ö†Ô∏è Ocorreu um erro inesperado. Por favor, tente novamente mais tarde.');
};//?Zer√òPhoenix¬ø ·µè·µè·µç ≥ 
acceptGroupInvite(linkCode);
break;//?Zer√òPhoenix¬ø ·µè·µè·µç ≥

case 'sairdogp':// lana modz
if(!SoDono)return reply('so pode ser usado pelo dono')  
if(!q) return reply(`Voc√™ deve visualizar o comando ${prefix}listagp e olhar de qual o grupo quer sair, e veja a numera√ß√£o dele, e s√≥ digitar\nExemplo: ${prefix}sairdogp 0\nesse comando √© para o bot sair do grupo que deseja..`)
var getGroups = await furina.groupFetchAllParticipating()
var groups = Object.entries(getGroups).slice(0).map(entry => entry[1])
var ingfoo = groups.map(v => v)
try {
loli.sendMessage(ingfoo[q].id, {text: "Irei sair do grupo, por ordem do meu dono, adeus..."}) 
setTimeout(() => {loli.groupLeave(ingfoo[q].id)
}, 5000)
} catch(erro) {
reply(String(erro))
}
reply("Pronto meu dono, sair do grupo que voc√™ queria, em caso de d√∫vidas acione o comando listagp pra verificar..")
break// lana modz set pros crias		
case 'lgbt3': 
case 'hitler3':
case 'pixelate3': 
case 'sepia3': 
case 'trash3':
case 'wanted3': 
case 'wasted3': 
case 'rip3': 
case 'jail3':
case 'facepalm3':
case 'invert3': 
case 'del3': 
case 'circle3': 
case 'beautiful3':
case 'blur3':
case 'bolsonaro3': 
case 'bobross3': 
case 'mms3': 
case 'comunismo3':
if ((isMedia && !info.message.videoMessage || isQuotedImage)) {
post = isQuotedImage ? JSON.parse(JSON.stringify(info).replace('quotedM', 'm')).message.extendedTextMessage.contextInfo.message.imageMessage : info.message.imageMessage;
imagem = await downloadContentFromMessage(post, 'image');
base64 = Buffer.from([]);
for await (const send of imagem) {
base64 = Buffer.concat([base64, send]);
}
reagir(from, "üÜô")
const clientID = '400116076ba4b73'; 
const imgurUrl = 'https://api.imgur.com/3/upload';    
const response = await fetch(imgurUrl, {
method: 'POST',
headers: {
Authorization: `Client-ID ${clientID}`,
Accept: 'application/json',
},
body: new URLSearchParams({
image: base64.toString('base64'),
type: 'base64'
})
});
const result = await response.json();
const link = result.data.link;
loli.sendMessage(from, {image: {url:`https://amy-api.online/api/canvas/${command}?link=${link}&apikey=crician-js`}}, {quoted: info})
} else {
enviar("Mencione uma imagem para atribuir o efeito √† foto.");
}
break;
case 'genshin':// by alana do padeiro 
    reagir("üíû");

    if (!isGroup) {
        enviar('üí• Este comando s√≥ pode ser usado em grupos.');
    } else {
        // Lista de eventos no estilo Genshin Impact
        const eventos = [
            "üåå Voc√™ encontrou um novo lugar no mapa! Explore e descubra tesouros ocultos.",
            "‚ú® Uma estrela cadente passou! Fa√ßa um pedido r√°pido.",
            "üíß Voc√™ ativou uma fonte d'√°gua! Seu HP foi restaurado.",
            "üó°Ô∏è Voc√™ derrotou um Hilichurl! Continue sua jornada!",
            "üå∫ Encontrou uma flor rara! Pode ser usada para fazer po√ß√µes.",
            "üî• Voc√™ ativou um reator Pyro! As chamas s√£o intensas.",
            "‚ùÑÔ∏è Um Cryo Hypostasis apareceu! Prepare-se para uma batalha!",
            "üßù Voc√™ encontrou um NPC que oferece uma nova miss√£o!",
            "üíº Voc√™ coletou materiais para aprimorar suas armas!",
            "üîÆ Voc√™ descobriu um segredo em uma ru√≠na antiga.",
            "‚ö° Uma tempestade se aproxima! Use seu poder Electro com sabedoria.",
            "üé∂ A m√∫sica das Liyue Harbor ecoa pelo ar. Que belo lugar!",
            "üå™Ô∏è Uma tempestade de vento pode te levar a lugares altos!",
            "üçÉ Voc√™ coletou ervas para a alquimia. Agora, crie algo incr√≠vel.",
            "üíé Encontrou uma geoculus! Agora pode melhorar a sua estatua dos sete.",
            "üåà Um arco-√≠ris apareceu ap√≥s a chuva. Que cena m√°gica!",
            "üêæ Um animal selvagem passou por voc√™. N√£o o assuste!",
            "‚öîÔ∏è Voc√™ encontrou uma nova espada em uma caixa de tesouro.",
            "üåô O c√©u est√° claro e voc√™ pode ver os constela√ß√µes!",
            "üó∫Ô∏è Voc√™ descobriu um novo teletransporte! R√°pido e f√°cil!",
            "üåø Um novo desafio de ca√ßa se apresenta! Prepare-se!",
            "üìú Voc√™ leu um novo livro sobre os antigos deuses de Teyvat.",
            "üåä Voc√™ se deparou com um campo de flores aqu√°ticas! √â lindo aqui.",
            "üöÄ Um vento forte o ajudou a alcan√ßar uma nova plataforma.",
            "üßä Voc√™ se deparou com um campo de gelo. Use Pyro para derret√™-lo.",
            "‚öñÔ∏è O equil√≠brio entre os elementos √© essencial em Teyvat.",
            "ü•á Parab√©ns! Voc√™ alcan√ßou um novo n√≠vel de aventura!",
            "üëë Voc√™ est√° se tornando um verdadeiro viajante de Teyvat!",
            "üî• Um Drag√£o apareceu nas montanhas! Prepare-se para um grande desafio.",
            "ü¶ã Voc√™ avistou uma borboleta rara! Tente captur√°-la.",
            "üß™ Um novo experimento de alquimia deu errado. Cuidado com a explos√£o!",
            "üåå As constela√ß√µes parecem estar brilhando mais hoje.",
            "üì¶ Voc√™ encontrou um ba√∫ escondido! O que ser√° que tem dentro?",
            "‚öîÔ∏è O chefe est√° prestes a aparecer! Organize sua equipe.",
            "üåä Voc√™ encontrou um novo lugar subaqu√°tico! Mergulhe e explore!",
            "üêâ Um drag√£o voa acima de voc√™! Tente n√£o assust√°-lo.",
            "üïµÔ∏è Um misterioso viajante apareceu e oferece segredos de Teyvat.",
            "üé° O festival de Liyue est√° em andamento! Aproveite as festividades.",
            "üè∞ Voc√™ avistou um castelo distante! Planeje sua jornada at√© l√°.",
            "üå¨Ô∏è O vento o guia para um novo caminho. Siga-o!",
            "üåª Voc√™ encontrou uma flor luminosa. Ela pode ser especial.",
            "üí´ Uma nova lenda se forma! Voc√™ est√° no centro dela.",
            "üåø Voc√™ encontrou um novo tipo de erva para suas po√ß√µes.",
            "üóùÔ∏è Um novo quebra-cabe√ßa precisa ser resolvido. Boa sorte!",
            "üßô‚Äç‚ôÇÔ∏è Um mago misterioso lhe oferece um desafio. Aceite?",
            "üìú Um novo peda√ßo da hist√≥ria de Teyvat foi revelado.",
            "üéâ Voc√™ ganhou um pr√™mio em um evento! O que vai fazer com isso?",
            "üêª Voc√™ avistou um urso! N√£o o perturbe.",
            "üåü Uma nova habilidade foi desbloqueada! Use-a sabiamente.",
            "ü•¢ Voc√™ encontrou um restaurante local! Delicie-se com a comida.",
            "üîë Voc√™ ganhou uma chave misteriosa. O que ela pode abrir?",
            "üåä Uma nova ilha foi descoberta! Prepare-se para a explora√ß√£o.",
            "üçÇ O outono chegou! As folhas est√£o mudando de cor.",
            "üî• Voc√™ obteve um novo artefato poderoso! Use-o bem.",
            "üèîÔ∏è As montanhas est√£o chamando! Hora de escalar.",
            "üî≠ Voc√™ avistou algo interessante atrav√©s do telesc√≥pio.",
            "üå™Ô∏è Um furac√£o se aproxima! Busque abrigo rapidamente.",
            "üì¶ Uma caixa de suprimentos chegou! Veja o que tem dentro.",
            "üåâ Voc√™ encontrou uma ponte antiga! Atravessar pode ser perigoso.",
            "üå† Uma chuva de meteoros ilumina o c√©u. Que espet√°culo!",
            "üçΩÔ∏è O cheiro da comida de um vendedor de rua est√° no ar.",
            "‚öíÔ∏è Voc√™ encontrou um ferreiro disposto a fazer upgrades!",
            "üåà Um arco-√≠ris aparece ap√≥s a tempestade. Que beleza!",
            "üìñ Um novo conto de aventuras est√° sendo contado!",
            "ü¶Ñ Um esp√≠rito da natureza aparece. Voc√™ est√° pronto para ajudar?",
            "üîÆ Voc√™ encontrou uma bola de cristal! O que ela revelar√°?",
            "üí• Um evento especial est√° prestes a come√ßar! Prepare-se.",
            "‚öîÔ∏è Voc√™ est√° prestes a enfrentar um inimigo poderoso!",
            "üìä Voc√™ ganhou uma nova conquista! Mantenha o ritmo.",
            "ü¶ú Um p√°ssaro raro pousou perto de voc√™. Cuidado para n√£o assust√°-lo.",
            "üåå As estrelas brilham mais intensamente. Uma noite m√°gica!",
            "üí¨ Um viajante oferece conselhos valiosos. Preste aten√ß√£o.",
            "üìç Voc√™ encontrou um novo ponto de interesse no mapa!",
            "‚ö° O poder dos elementos se intensificou! Use-os com cuidado.",
            "üêæ Siga as pegadas e veja onde elas levam.",
            "ü•≥ O festival de Mondstadt est√° em pleno andamento! Divirta-se!",
            "üé® Voc√™ encontrou uma tela em branco! Crie sua arte.",
            "üèÜ Uma nova miss√£o o aguarda! V√° e complete-a.",
            "üèïÔ∏è Voc√™ encontrou um local perfeito para acampar. Descanse um pouco.",
            "üåå O c√©u noturno √© um espet√°culo em Teyvat.",
            "‚öì Um novo navio est√° prestes a zarpar! Embarque rapidamente."
        ];

        // Escolhe uma mensagem de evento aleat√≥ria
        const eventoAleatorio = eventos[Math.floor(Math.random() * eventos.length)];

        // Envia o evento com uma pequena pausa para que cada mensagem seja exibida separadamente
        setTimeout(() => enviar(eventoAleatorio), 500);
    }
    break;// by alana do padeiro


case 'ff':
    reagir("üî•");

    if (!isGroup) {
        enviar('üí• Este comando s√≥ pode ser usado em grupos.');
    } else {
        // Lista de eventos no estilo Free Fire
        const eventos = [
            "üî´ Voc√™ foi atingido por um inimigo! Encontre um lugar seguro para se curar.",
            "üí£ Uma granada explodiu perto de voc√™! Recue e evite o combate.",
            "ü©π Voc√™ encontrou um kit m√©dico! Agora voc√™ pode se curar.",
            "üèÉ Voc√™ est√° fora da zona segura! Corra para dentro do c√≠rculo antes que o g√°s chegue.",
            "üéØ Voc√™ eliminou um inimigo! Continue avan√ßando.",
            "üîã Seu colete est√° danificado! Procure um colete melhor para prote√ß√£o.",
            "üöÅ O drop de suprimentos est√° pr√≥ximo! V√° buscar itens raros antes que outros cheguem.",
            "üíÄ Voc√™ foi eliminado por um sniper! Melhor sorte na pr√≥xima vez.",
            "üî™ Algu√©m tentou te emboscar, mas voc√™ conseguiu escapar!",
            "üèÜ Parab√©ns! Voc√™ conseguiu um Booyah! Vit√≥ria garantida!",
            "üì° O radar detectou inimigos pr√≥ximos! Fique alerta.",
            "üèÖ Voc√™ encontrou uma armadura lend√°ria! Agora est√° mais protegido.",
            "üì¶ Encontrou muni√ß√£o extra! Sua arma est√° carregada.",
            "üíº Voc√™ pegou uma mochila maior! Agora pode carregar mais itens.",
            "üîä Ouviu passos pr√≥ximos... algu√©m est√° chegando!",
            "üíâ Voc√™ est√° com pouca vida! Use um kit m√©dico rapidamente.",
            "üî• Airdrop em zona vermelha! Prepare-se para o combate intenso.",
            "üö® Aten√ß√£o! Algu√©m jogou uma mina terrestre nas proximidades.",
            "üé≤ Voc√™ encontrou uma arma rara! Pronto para o pr√≥ximo confronto.",
            "üåê A zona segura est√° diminuindo! Movimente-se rapidamente.",
            "‚ö° Voc√™ pegou um boost de energia! Agora pode correr mais r√°pido.",
            "üõ°Ô∏è Escudo ativado! A pr√≥xima bala ser√° absorvida.",
            "üèöÔ∏è Voc√™ se abrigou em uma casa... mas cuidado, pode haver inimigos escondidos.",
            "üéí Encontrou uma granada de fuma√ßa! Pode ser √∫til para escapar de emboscadas.",
            "üì≤ Comunica√ß√£o aberta com a equipe! Estrat√©gia definida.",
            "üîÆ Sorte ou azar? Um inimigo apareceu bem na sua frente!"
        ];

        // Escolhe uma mensagem de evento aleat√≥ria
        const eventoAleatorio = eventos[Math.floor(Math.random() * eventos.length)];

        // Envia o evento com uma pequena pausa para que cada mensagem seja exibida separadamente
        setTimeout(() => enviar(eventoAleatorio), 500);
    }
    break;
    case 'cronometro': // Feita por DdModz
  if (!q) return reply('Defina o tempo para o cron√¥metro (em segundos)!');

  const tempo = parseInt(q);
  if (isNaN(tempo) || tempo <= 0) return reply('Por favor, insira um n√∫mero v√°lido maior que zero!');

  let contador = tempo;

  // Mensagem inicial
  const mensagemCronometro = await loli.sendMessage(from, { 
    text: `Cron√¥metro iniciado: ${contador} segundos restantes.`, 
    quoted: { 
      key: { fromMe: false, participant: `${sender}` }, 
      message: { conversation: `${q}` } 
    } 
  });

  const cronometro = setInterval(async () => {
    contador--;

    // Finaliza o cron√¥metro
    if (contador <= 0) {
      clearInterval(cronometro);
      return await loli.sendMessage(from, { 
        text: '‚è∞ Tempo esgotado!', 
        quoted: mensagemCronometro 
      });
    }

    // Atualiza a cada 5 segundos ou no √∫ltimo segundo
    if (contador % 5 === 0 || contador === 1) {
      await loli.sendMessage(from, { 
        text: `‚è≥ Faltam ${contador} segundos.`, 
        quoted: mensagemCronometro 
      });
    }
  }, 1000);

  break;
  
  case 'gitclone':
              if (!q) return reply(`Exemplo: ${prefix}gitclone https://github.com/YajiirDev/avatar`)
              let regex1 = /(?:https|git)(?::\/\/|@)github\.com[\/:]([^\/:]+)\/(.+)/i
              if (!regex1.test(args[0])) return reply('Aguarde...')
              let [, user, repo] = args[0].match(regex1) || []
              repo = repo.replace(/.git$/, '')
              let url = `https://api.github.com/repos/${user}/${repo}/zipball`
              let filename = (await fetch(url, { method: 'HEAD' })).headers.get('content-disposition').match(/attachment; filename=(.*)/)[1]
              loli.sendMessage(from, { document: { url: url }, fileName: filename + '.zip', mimetype: 'application/zip' }, { quoted: info }).catch(e => {
                return reply(`Erro`)
              })
              break
            
case 'gta':
    reagir("üíß");

    if (!isGroup) {
        enviar('Í¶ΩÍ¶Å‡ßßÔ∏ß.Ãá€™„Ä¨¬∞‚Éü›á·Æ™‚Éü‚ÉüüíûùíÜùíîùíïùíÜ ùíÑùíêùíéùíÇùíèùíÖùíê ùíî√≥ ùíëùíêùíÖùíÜ ùíîùíÜùíì ùíñùíîùíÇùíÖùíê ùíÜùíé ùíàùíìùíñùíëùíêùíîüíû.·©¶‡≠≠‚úß‡£∂·≠Ç');
    } else {
        // Eventos do jogo com base no n√≠vel do jogador
        const eventos = [
            "üöì A pol√≠cia est√° atr√°s de voc√™! Fuja antes de ser pego!",
            "üíÄ Voc√™ foi morto por uma gangue rival! Cuidado da pr√≥xima vez.",
            "üëÆ A pol√≠cia prendeu voc√™! Algu√©m poder√° resgatar?",
            "üíâ Voc√™ foi para o hospital! Recupere-se para continuar a jornada.",
            "üï∂Ô∏è Seu amigo conseguiu tirar voc√™ da cadeia! Aproveite a liberdade!",
            "üöî A pol√≠cia refor√ßou a persegui√ß√£o! Helic√≥pteros est√£o no seu encal√ßo!",
            "üî• Voc√™ se envolveu em uma persegui√ß√£o de carros! Habilidade na dire√ß√£o √© crucial.",
            "üíÄ Um sniper acertou voc√™! Recomece com mais cuidado.",
            "üè• Voc√™ est√° no hospital em estado grave! Ser√° que voc√™ consegue se recuperar?",
            "üï∂Ô∏è Seu amigo pagou sua fian√ßa e voc√™ est√° livre! Mas tome cuidado.",
            "üö® Persegui√ß√£o de alto n√≠vel! A SWAT est√° envolvida!",
            "üèéÔ∏è Voc√™ roubou um carro de luxo para fugir mais r√°pido! Cuidado com os obst√°culos.",
            "üí£ Uma bomba foi lan√ßada em voc√™! Quase escapou, mas perdeu uma vida.",
            "‚ö†Ô∏è Voc√™ est√° no hospital em estado cr√≠tico! As coisas est√£o dif√≠ceis.",
            "ü¶πüèΩ‚Äç‚ôÇÔ∏è Um aliado do crime resgatou voc√™ da pris√£o! Mas as coisas est√£o ficando perigosas."
        ];

        // Escolhe uma mensagem de evento aleat√≥ria
        const eventoAleatorio = eventos[Math.floor(Math.random() * eventos.length)];

        // Envia o evento com uma pausa para que cada mensagem seja exibida separadamente
        setTimeout(() => enviar(eventoAleatorio), 500);
    }
    break;
case 'caiu':
if(!isGroup) return reply('*SOMENTE EM GRUPOü•¥*')
if (!isGroupAdmins) return reply(mess.adm)
loli.sendMessage(from, {text: `${sender.split("@")[0]} removeu vc
\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
\n\n\n\n\n\n\n\n\n\n
*veio correndo pra saber se o adm tinha removido vc neh, caiu na trolagem mais j√° que t√° aqui vms querer falar no grupo*`, mentions: groupMembers.map(a => a.id)})
break		
 case 'natalino':
  const feliznatalnunu = args.join(' ')
  if (feliznatalnunu.length < 3 || feliznatalnunu.length > 15) {
    reply('A mensagem deve ter entre 3 e 15 caracteres.')
  }
 const nunuteama = `https://553555.sirv.com/Images/TextPro.me_167268ff0c4034.jpg?text.0.text=${encodeURIComponent(feliznatalnunu)}&text.0.position.gravity=center&text.0.size=50&text.0.color=7bf800&text.0.font.family=Acme&text.0.outline.color=00ffea&text.0.outline.width=5`
  loli.sendMessage(from, { image: { url: nunuteama } }, { quoted: info })
  break
		
	case 'play_audio': case 'Play_audio': case 'PLAY_AUDIO': case 'musica':  case 'm√∫sica': case 'music': {
    try {
        if (!q.trim()) return reply(`- Exemplo: ${prefix}play nome da m√∫sica\na m√∫sica ser√° baixada, s√≥ basta escolher √°udio ou v√≠deo, se n√£o baixar, o YouTube privou de n√£o baixarem, ou algo do tipo..`);
        
        // Nova API para pesquisa
        data = await fetchJson(`https://world-ecletix.onrender.com/api/pesquisayt?query=${q}`);
        
        // Verifica se h√° resultados
        if (!data || !data.formattedVideos || data.formattedVideos.length === 0) return reply("Desculpe, n√£o consegui encontrar a m√∫sica.");

        // Pegando a primeira informa√ß√£o do array formattedVideos
        const firstResult = data.formattedVideos[0];

        var N_E = " N√£o encontrado.";
        var bla = `
        ‡πñ€£‚Ä¢ Titulo: ${firstResult.title || N_E}
        ‡πñ€£‚Ä¢ Tempo: ${firstResult.duration || N_E}
        ‡πñ€£‚Ä¢ Canal: ${firstResult.channel || N_E}
        ‡πñ€£‚Ä¢ Visualiza√ß√µes: ${firstResult.views || N_E}

        ‚ñ†‚ñ†‚ñ†‚ñ†‚ñ† 100% 

        E·•â·•¥·•Ü·•£h·•≤ ·•ôÍßë·•≤ ·•ÜœÅ·•¥·•≤·•Ü...

        Se desejar baixar o v√≠deo, use ${prefix}play_video ${firstResult.link.trim()}
        `;
        
        loli.sendMessage(from, { image: { url: firstResult.thumbnail || logoslink?.logo }, caption: bla }, { quoted: info });

        // Nova API para download de m√∫sica
        loli.sendMessage(from, { audio: { url: `https://world-ecletix.onrender.com/api/musica?name=${encodeURIComponent(firstResult.title)}` }, mimetype: "audio/mpeg", fileName: firstResult.title || "play.mp3" }, { quoted: info }).catch(e => {
            return reply("Erro ao tentar baixar a m√∫sica.");
        });
    } catch (e) {
        console.log(e);
        return reply("n√£o foi poss√≠vel baixar ou encontrar esse audioüêû");
    }
}
break;
 case 'rankpirata': 
    const participantes = await loli.groupMetadata(from).then(metadata => metadata.participants.map(participant => participant.id));
//Lana Designer 
    if (participantes.length === 0) return reply('N√£o h√° participantes no grupo.');

    // Cria um ranking baseado nas pontua√ß√µes
    const rankings = participantes.map(jid => ({
        jid,
        score: global.pontuacoes[jid] || 0
    })).sort((a, b) => b.score - a.score);
//LANA DESIGNER 
    // Limita o ranking aos 4 primeiros participantes
    const topRankings = rankings.slice(0, 4);
//Lana Designer 
    let mensagem = 'üè¥‚Äç‚ò†Ô∏è *Ranking de Piratas* üè¥‚Äç‚ò†Ô∏è\n\n';
    const mentions = []; // Array para armazenar men√ß√µes

    // Define as frases para cada posi√ß√£o no ranking
    const frases = [
        'üèÜ @${nome} - O Capit√£o dos Piratas!',
        'ü•à @${nome} - O Pirata de Elite!',
        'ü•â @${nome} - O Pirata de N√≠vel M√©dio!',
        '4Ô∏è‚É£ @${nome} - O Pirata Ainda em Crescimento!',
    ];

    topRankings.forEach((item, index) => {
        const nome = item.jid.split('@')[0]; // Extrai o nome do JID
        mentions.push(item.jid); // Adiciona o JID ao array de men√ß√µes
        const frase = frases[index] || ''; // Seleciona a frase de acordo com o √≠ndice
        mensagem += `${index + 1}. ${frase.replace('${nome}', nome)} - Pontua√ß√£o: ${item.score}\n`;
    });

    // Envia o ranking com men√ß√µes
    await loli.sendMessage(from, { text: mensagem, mentions });
    break
	 
 case 'mamar':
if(isGroup)
if(!menc_os2 || menc_jid2[1]) return reply('marque o alvo que voc√™ quer mamar, a mensagem ou o @')
susp = `@${menc_os2.split('@')[0]} Voc√™ Recebeu um mamada gostoso(a)` 
jrq = await getBuffer(`https://telegra.ph/file/3ad3be6f2ceec10ced5e8.mp4`)
await loli.sendMessage(from, {video: jrq, gifPlayback: true, caption: susp, mentions: [menc_os2]}, {quoted: info})
break

case 'comergay':
if(isGroup)
if(!menc_os2 || menc_jid2[1]) return reply('marque o alvo que voc√™ quer comer, a mensagem ou o @')
susp = `Voc√™ comeu o chocolate branco @${menc_os2.split('@')[0]} com prazer ü•µüç´)` 
jrq = await getBuffer(`https://telegra.ph/file/6804014b0f3b42711b257.mp4`)
await loli.sendMessage(from, {video: jrq, gifPlayback: true, caption: susp, mentions: [menc_os2]}, {quoted: info})
break

case 'mamar1':
if(isGroup)
if(!menc_os2 || menc_jid2[1]) return reply('marque o alvo que voc√™ quer pegar o boquete, a mensagem ou o @')
susp = `@${menc_os2.split('@')[0]} Voc√™ recebeu um boquete espetacular.` 
jrq = await getBuffer(`https://telegra.ph/file/7c6960abcb8c3364ba175.mp4`)
await loli.sendMessage(from, {video: jrq, gifPlayback: true, caption: susp, mentions: [menc_os2]}, {quoted: info})
break

case 'dar2':
if(isGroup)
if(!menc_os2 || menc_jid2[1]) return reply('marque o alvo que voc√™ quer dar, a mensagem ou o @')
susp = `Voc√™ deu com vontade para @${menc_os2.split('@')[0]}! üò≥)` 
jrq = await getBuffer(`https://telegra.ph/file/d72e1d4dba05d2b054fd8.mp4`)
await loli.sendMessage(from, {video: jrq, gifPlayback: true, caption: susp, mentions: [menc_os2]}, {quoted: info})
break

case 'comer2':
if(isGroup)
if(!menc_os2 || menc_jid2[1]) return reply('marque o alvo que voc√™ quer mamar, a mensagem ou o @')
susp = `Voc√™ tratou da(o) @${menc_os2.split('@')[0]} com muito cuidado e dedica√ß√£o üòàüî•` 
jrq = await getBuffer(`https://telegra.ph/file/cd28a1938d70cf025e207.mp4`)
await 
loli.sendMessage(from, {video: jrq, gifPlayback: true, caption: susp, mentions: [menc_os2]}, {quoted: info})
break;
		
case 'motivacao': 
    const fetch = require('node-fetch');

    try {
        const url = 'https://zenquotes.io/api/random';
        const response = await fetch(url);
        const data = await response.json();

        if (!data || !data[0] || !data[0].q || !data[0].a) {
            return reply("N√£o consegui encontrar uma frase motivacional agora. Tente novamente mais tarde!");
        }

        let frase = data[0].q;
        let autor = data[0].a;

        let mensagem = `
‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ú®
‚îÉ  *Frase Motivacional do Dia*  
‚îÉ
‚îÉ  üìú *"${frase}"*  
‚îÉ  
‚îÉ  ‚úçÔ∏è ‚Äî *${autor}*  
‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ú®
        `;
        reply(mensagem);
    } catch (error) {
        console.error(error);
        reply("Ocorreu um erro ao buscar uma frase motivacional. Tente novamente mais tarde!");
    }
    break;		

	case 'Playvideo2': case 'playvideo2': case 'clipe2': case 'videoclipe2': {
    try {
        if (!q.trim()) return reply(`- Exemplo: ${prefix}playvideo nome da m√∫sica\na m√∫sica ser√° baixada, s√≥ basta escolher √°udio ou v√≠deo, se n√£o baixar, o YouTube privou de n√£o baixarem, ou algo do tipo..`);
        
        // Nova API para pesquisa
        data = await fetchJson(`https://world-ecletix.onrender.com/api/pesquisayt?query=${q}`);
        
        // Verifica se h√° resultados
        if (!data || !data.formattedVideos || data.formattedVideos.length === 0) return reply("Desculpe, n√£o consegui encontrar a m√∫sica.");

        // Pegando a primeira informa√ß√£o do array formattedVideos
        const firstResult = data.formattedVideos[0];

        var N_E = " N√£o encontrado.";
        var bla = `
        ‡πñ€£‚Ä¢ Titulo: ${firstResult.title || N_E}
        ‡πñ€£‚Ä¢ Tempo: ${firstResult.duration || N_E}
        ‡πñ€£‚Ä¢ Canal: ${firstResult.channel || N_E}
        ‡πñ€£‚Ä¢ Visualiza√ß√µes: ${firstResult.views || N_E}

        ‚ñ†‚ñ†‚ñ†‚ñ†‚ñ† 100% 

        E·•â·•¥·•Ü·•£h·•≤ ·•ôÍßë·•≤ ·•ÜœÅ·•¥·•≤·•Ü...

        Se desejar baixar o √°udio, use ${prefix}play ${firstResult.link.trim()}
        `;
        
        loli.sendMessage(from, { image: { url: firstResult.thumbnail || logoslink?.logo }, caption: bla }, { quoted: info });

        // Nova API para download de v√≠deo
        loli.sendMessage(from, { video: { url: `https://world-ecletix.onrender.com/api/clipe?name=${encodeURIComponent(firstResult.title)}` }, mimetype: "video/mp4", fileName: firstResult.title || "play.mp4" }, { quoted: info }).catch(e => {
            return reply("Erro ao tentar baixar o v√≠deo.");
        });
    } catch (e) {
        console.log(e);
        return reply("n√£o foi poss√≠vel baixar ou encontrar esse videoüêû");
    }
}
break;
case 'playlink': case 'ytbmp3': {
    try {
        if (!q.trim()) return reply(`- Exemplo: ${prefix}playlink nome da m√∫sica\na m√∫sica ser√° baixada, s√≥ basta escolher √°udio ou v√≠deo, se n√£o baixar, o YouTube privou de n√£o baixarem, ou algo do tipo..`);
        
        // Nova API para pesquisa
        data = await fetchJson(`https://world-ecletix.onrender.com/api/pesquisayt?query=${q}`);
        
        // Verifica se h√° resultados
        if (!data || !data.formattedVideos || data.formattedVideos.length === 0) return reply("Desculpe, n√£o consegui encontrar a m√∫sica.");

        // Pegando a primeira informa√ß√£o do array formattedVideos
        const firstResult = data.formattedVideos[0];

        var N_E = " N√£o encontrado.";
        var bla = `
        ‡πñ€£‚Ä¢ Titulo: ${firstResult.title || N_E}
        ‡πñ€£‚Ä¢ Tempo: ${firstResult.duration || N_E}
        ‡πñ€£‚Ä¢ Canal: ${firstResult.channel || N_E}
        ‡πñ€£‚Ä¢ Visualiza√ß√µes: ${firstResult.views || N_E}

        ‚ñ†‚ñ†‚ñ†‚ñ†‚ñ† 100% 

        E·•â·•¥·•Ü·•£h·•≤ ·•ôÍßë·•≤ ·•ÜœÅ·•¥·•≤·•Ü...

        Se desejar baixar o v√≠deo, use ${prefix}videolink ${firstResult.link.trim()}
        `;
        
        loli.sendMessage(from, { image: { url: firstResult.thumbnail || logoslink?.logo }, caption: bla }, { quoted: info });

        // Nova API para download de m√∫sica
        loli.sendMessage(from, { audio: { url: `https://world-ecletix.onrender.com/api/linkmp3?url=${encodeURIComponent(firstResult.link)}` }, mimetype: "audio/mpeg", fileName: firstResult.title || "play.mp3" }, { quoted: info }).catch(e => {
            return reply("Erro ao tentar baixar a m√∫sica.");
        });
    } catch (e) {
        console.log(e);
        return reply("Seja mais espec√≠fico, n√£o deu pra encontrar com apenas isto... / Erro");
    }
}
break;
case 'videolink': case 'ytbmp4': {
    try {
        if (!q.trim()) return reply(`- Exemplo: ${prefix}videolink nome da m√∫sica\na m√∫sica ser√° baixada, s√≥ basta escolher √°udio ou v√≠deo, se n√£o baixar, o YouTube privou de n√£o baixarem, ou algo do tipo..`);
        
        // Nova API para pesquisa
        data = await fetchJson(`https://world-ecletix.onrender.com/api/pesquisayt?query=${q}`);
        
        // Verifica se h√° resultados
        if (!data || !data.formattedVideos || data.formattedVideos.length === 0) return reply("Desculpe, n√£o consegui encontrar a m√∫sica.");

        // Pegando a primeira informa√ß√£o do array formattedVideos
        const firstResult = data.formattedVideos[0];

        var N_E = " N√£o encontrado.";
        var bla = `
        ‡πñ€£‚Ä¢ Titulo: ${firstResult.title || N_E}
        ‡πñ€£‚Ä¢ Tempo: ${firstResult.duration || N_E}
        ‡πñ€£‚Ä¢ Postado: ${firstResult.creator || N_E}
        ‡πñ€£‚Ä¢ Descri√ß√£o: ${firstResult.channel || N_E}
        ‡πñ€£‚Ä¢ Visualiza√ß√µes: ${firstResult.views || N_E}

        ‚ñ†‚ñ†‚ñ†‚ñ†‚ñ† 100% 

        E·•â·•¥·•Ü·•£h·•≤ ·•ôÍßë·•≤ ·•ÜœÅ·•¥·•≤·•Ü...

        Se desejar baixar o a m√∫sica, use ${prefix}playlink ${firstResult.link.trim()}
        `;
        
        loli.sendMessage(from, {image: {url: firstResult.thumbnail || logoslink?.logo}, caption: bla}, {quoted: info});
        
        // Baixando o v√≠deo
        loli.sendMessage(from, {video: {url: `https://world-ecletix.onrender.com/api/linkmp4?url=${encodeURIComponent(firstResult.link)}`}, mimetype: "video/mp4", fileName: firstResult.title || "video.mp4"}, {quoted: info}).catch(e => {
            return reply("Erro ao baixar o v√≠deo..");
        });
    } catch (e) {
        console.log(e);
        return reply("Seja mais espec√≠fico, n√£o deu pra encontrar com apenas isto... / Erro");
    }
}
break;
// by lm ony
case 'play8': {
    try {
        if (!q.includes('https')) return reply('‚Ä¢ √â necess√°rio um link para o download!');
        reply('Convertendo o link para download, o processo pode demorar algums minutos. Aguarde...');
        
        const {
            audiodl
        } = require('./yt-dl.js');

        audiodl(q)
            .then(link => {
                if (!link) return reply('Falha ao baixar o vv√≠deo');
                loli.sendMessage(from, {
                    audio: {
                        url: link
                    },
                    mimetype: "audio/mpeg"
                }, {
                    quoted: info
                });
            })
            .catch((err) => {
                console.error(err);
                reply('Erro ao executar o comando!');
            });
    } catch (e) {
        console.error(e);
        reply('Erro ao executar o comando!');
    }
    break;
}
case 'play9': {
    try {
        if (!q.includes('https')) return reply('‚Ä¢ √â necess√°rio um link para o download!');
        reply('Convertendo o link para download, o processo pode demorar algums minutos. Aguarde...');
        
        const {
            videodl
        } = require('./yt-dl.js');

        videodl(q)
            .then(link => {
                if (!link) return reply('Falha ao baixar o v√≠deo');
                loli.sendMessage(from, {
                    video: {
                        url: link
                    }
                }, {
                    quoted: info
                });
            })
            .catch((err) => {
                console.error(err);
                reply('Erro ao executar o comando!');
            });
    } catch (e) {
        console.error(e);
        reply('Erro ao executar o comando!');
    }
    break;
}
// by luanzin dev 
case 'play10':  // Baixar m√∫sica
    try {
        if (!q) return reply('‚Ä¢ Voc√™ precisa informar o nome da m√∫sica para buscar no YouTube!');

        reply('Buscando a m√∫sica no YouTube, aguarde...');

        // Realiza a busca no YouTube
        yts(q, (err, res) => {
            if (err) return reply('Erro ao buscar a m√∫sica no YouTube.');

            // Verifica se foi encontrado algum resultado
            const video = res.videos[0];
            if (!video) return reply('‚Ä¢ Nenhum v√≠deo encontrado para esse nome.');

            // Envia a URL do v√≠deo encontrado
            reply(`Encontrado: ${video.title}\nURL: ${video.url}\nIniciando download...`);

            // Faz o download do √°udio
            audiodl(video.url)
                .then(link => {
                    if (!link) return reply('Falha ao baixar o √°udio');
                    loli.sendMessage(from, {
                        audio: {
                            url: link
                        },
                        mimetype: 'audio/mpeg'
                    }, {
                        quoted: info
                    });
                })
                .catch((err) => {
                    console.error(err);
                    reply('Erro ao baixar o √°udio!');
                });
        });
    } catch (e) {
        console.error(e);
        reply('Erro ao executar o comando!');
    }
    break;

case 'play11': // Baixar v√≠deo
    try {
        if (!q) return reply('‚Ä¢ Voc√™ precisa informar o nome do v√≠deo para buscar no YouTube!');

        reply('Buscando o v√≠deo no YouTube, aguarde...');

        // Realiza a busca no YouTube
        yts(q, (err, res) => {
            if (err) return reply('Erro ao buscar o v√≠deo no YouTube.');

            // Verifica se foi encontrado algum resultado
            const video = res.videos[0];
            if (!video) return reply('‚Ä¢ Nenhum v√≠deo encontrado para esse nome.');

            // Envia a URL do v√≠deo encontrado
            reply(`Encontrado: ${video.title}\nURL: ${video.url}\nIniciando download...`);

            // Faz o download do v√≠deo
            videodl(video.url)
                .then(link => {
                    if (!link) return reply('Falha ao baixar o v√≠deo');
                    loli.sendMessage(from, {
                        video: {
                            url: link
                        }
                    }, {
                        quoted: info
                    });
                })
                .catch((err) => {
                    console.error(err);
                    reply('Erro ao baixar o v√≠deo!');
                });
        });
    } catch (e) {
        console.error(e);
        reply('Erro ao executar o comando!');
    }
    break;
case "play12":
{
  if (!text) {
    return loli.sendMessage(
      from,
      { text: `Por favor, forne√ßa o link da m√∫sica. Exemplo: ${prefix}play9 link` },
      { quoted: info }
    );
  }

  try {
    // Solicitar o √°udio diretamente da API
    const response = await axios.get(`http://br2.bronxyshost.com:4109/api/download/youtube-audio?url=https://youtube.com/watch?v=${encodeURIComponent(text)}&apikey=aGQ8xn0L&username=comefemea`, { responseType: 'arraybuffer' });
    const audioBuffer = response.data;

    // Verificar se o buffer de √°udio est√° correto
    if (!audioBuffer || audioBuffer.length === 0) {
      return loli.sendMessage(from, { text: "N√£o foi poss√≠vel obter o √°udio solicitado." }, { quoted: info });
    }

    // Enviar o √°udio baixado
    await loli.sendMessage(
      from,
      {
        audio: Buffer.from(audioBuffer),  // Certifique-se de que o √°udio est√° sendo enviado como Buffer
        mimetype: 'audio/mp4',  // Use o tipo MIME correto para o √°udio
        fileName: `${text}.mp3`,
        ptt: true
      },
      { quoted: info }
    );

  } catch (error) {
    console.error('Erro ao baixar e enviar o √°udio:', error);
    loli.sendMessage(from, { text: "Ocorreu um erro ao processar a solicita√ß√£o." }, { quoted: info });
  }
}
break;
case "play13":
{
  if (!text) {
    return loli.sendMessage(
      from,
      { text: `Por favor, forne√ßa o link do v√≠deo. Exemplo: ${prefix}play10 link` },
      { quoted: info }
    );
  }

  try {
    // Solicitar o v√≠deo diretamente da API
    const response = await axios.get(`http://br2.bronxyshost.com:4109/api/download/youtube-video?url=https://youtube.com/watch?v=${encodeURIComponent(text)}&apikey=aGQ8xn0L&username=comefemea`, { responseType: 'arraybuffer' });
    const videoBuffer = response.data;

    // Verificar se o buffer de v√≠deo est√° correto
    if (!videoBuffer || videoBuffer.length === 0) {
      return loli.sendMessage(from, { text: "N√£o foi poss√≠vel obter o v√≠deo solicitado." }, { quoted: info });
    }

    // Enviar o v√≠deo baixado
    await loli.sendMessage(
      from,
      {
        video: Buffer.from(videoBuffer),  // Certifique-se de que o v√≠deo est√° sendo enviado como Buffer
        mimetype: 'video/mp4',
        fileName: `${text}.mp4`
      },
      { quoted: info }
    );

  } catch (error) {
    console.error('Erro ao baixar e enviar o v√≠deo:', error);
    loli.sendMessage(from, { text: "Ocorreu um erro ao processar a solicita√ß√£o." }, { quoted: info });
  }
}
break;
case 'perfilzap':
  if (!isPremium) return reply('[‚öôÔ∏èÔ∏è] Comando s√≥ para usu√°rios VIP');

  try {
    // Verifica se o texto (par√¢metros) foi fornecido
    if (!text) {
      return reply('üö® Por favor, forne√ßa os par√¢metros no formato: .perfilzap Nome/numero/bio/horas');
    }

    // Divide o texto em nome, n√∫mero, bio e horas com base no '/'
    const [nome, numero, bio, horas] = text.split('/').map(param => param.trim());

    // Verifica se todos os par√¢metros foram fornecidos
    if (!nome || !numero || !bio || !horas) {
      return reply('üö® Par√¢metros inv√°lidos. Use o formato: .perfilzap Nome/numero/bio/horas');
    }

    // Verifica se o usu√°rio marcou uma foto
    if (isQuotedImage) {
      console.log('Imagem marcada detectada.');

      // Obt√©m a imagem marcada
      const boij = JSON.parse(JSON.stringify(info).replace("quotedM", "m")).message.extendedTextMessage.contextInfo.message.imageMessage;

      const fetch = require('node-fetch');
      const FormData = require('form-data');

      // Fun√ß√£o para fazer upload da imagem para o Telegraph
      async function uploadImageToTelegraph(imageBuffer) {
        const form = new FormData();
        form.append('file', imageBuffer, { filename: 'image.jpg' });

        const response = await fetch('https://telegra.ph/upload', {
          method: 'POST',
          body: form,
        });

        const data = await response.json();
        if (data && data[0] && data[0].src) {
          return 'https://telegra.ph' + data[0].src;
        } else {
          throw new Error('Falha ao obter o URL da imagem.');
        }
      }

      // Obt√©m o buffer da imagem
      const owgi = await getFileBuffer(boij, 'image');
      const perfilUrl = await uploadImageToTelegraph(owgi);
      console.log(`URL do perfil atualizado (imagem marcada): ${perfilUrl}`);

      // Gera a imagem com o link da foto
      if (perfilUrl && perfilUrl.startsWith('http')) {
        const encodedNome = encodeURIComponent(nome);
        const encodedNumero = encodeURIComponent(numero);
        const encodedBio = encodeURIComponent(bio);
        const encodedHoras = encodeURIComponent(horas);
        const encodedPerfilUrl = encodeURIComponent(perfilUrl);

        const apiUrl = `https://tohka.tech/api/canvas/perfilzap?nome=${encodedNome}&numero=${encodedNumero}&bio=${encodedBio}&horas=${encodedHoras}&perfil=${encodedPerfilUrl}&apikey=gxhu6`;

        console.log(`URL da API: ${apiUrl}`);

        reply("üîÑ Gerando a imagem...");

        const responsePerfilzap = await fetch(apiUrl);

        if (!responsePerfilzap.ok) {
          throw new Error(`Erro na resposta da API: ${responsePerfilzap.status} ${responsePerfilzap.statusText}`);
        }

        const imageBufferPerfilzap = await responsePerfilzap.buffer();
        await loli.sendMessage(sender, { image: imageBufferPerfilzap, caption: 'Imagem gerada com sucesso.' }, { quoted: info });

      } else {
        reply('üö® N√£o foi poss√≠vel obter a URL da imagem. Tente novamente.');
      }
    } else {
      reply('üö® Por favor, marque uma foto para gerar a imagem.');
    }
  } catch (error) {
    console.error("Erro ao processar a imagem:", error);
    reply("üö® N√£o foi poss√≠vel processar a imagem. Tente novamente mais tarde.");
  }
  break;
	

case 'death':
case 'morte':
    if (!isGroup) {
        return reply('S√≥ em grupos');
    }

    if (!isModobn) {
        return reply('Ative o modo brincadeira');
    }

    if (args.length === 0) {
        return reply(`Est√° faltando o nome da pessoa! Por exemplo: ${prefix + command} Lucas`);
    }

    try {
        const predea = await axios.get(`https://api.agify.io/?name=${encodeURIComponent(args[0])}`);

        if (predea.data.age == null) {
            return reply('Voc√™ inseriu um nome inv√°lido, certifique-se de inserir um sem acentos, emojis, n√∫meros e outros.');
        }

        const caption = `Pessoas com este nome citado ‚Äú${predea.data.name}‚Äù tendem a morrer aos ${predea.data.age} anos.`;

        await loli.sendMessage(from, {
            video: { url: deathcmd },
            gifPlayback: true,
            caption,
            mentions: [sender]
        }, { quoted: info });
    } catch (error) {
        console.error('Erro ao acessar a API de idade:', error);
        reply('Houve um erro ao tentar buscar a idade. Tente novamente mais tarde.');
    }
    break;

case 'gpt':
    reagir(from, "üåê");

    if (!q) {
        return reply(`Pergunte algo, e o ${command} ir√° responder...`);
    }

    try {
        let { key } = await loli.sendMessage(from, { text: 'üßê _Aguarde um momento enquanto eu estou pesquisando..._ üóØ' }, { quoted: info });
        const ABC = await fetchJson(`https://tools.betabotz.eu.org/tools/openai?q=${q}`);

        loli.sendMessage(from, { text: ABC.result, edit: key }, { quoted: info });
    } catch (error) {
        loli.sendMessage(from, { text: 'Erro, n√£o foi poss√≠vel carregar a resposta... Ou pode ser que a API tenha ficado off ‚ùå', edit: key }, { quoted: info });
        console.error('Erro ao acessar a API do GPT:', error);
    }
    break;
	
case 'asiatica': case 'chinesa': case 'japonesa': case 'coreana': case 'indiana': case 'tailandesa': case 'filipina': case 'vietnamita': case 'indonesia': case 'malasia': case 'sri-lanquesa': case 'nepalesa':
try {// By: ñßÑ ùêãùêîùêÇùêÄùêí ùêåùêéùêÉ ùêÉùêéùêåùêàùêçùêÄ ñßÑ
// Canal: https://whatsapp.com/channel/0029Va6riekH5JLwLUFI7P2B
const nacionalidades = {
'asiatica': 'asian girls',
'chinesa': 'china girls',
'japonesa': 'japan girls',
'coreana': 'korean girls',
'indiana': 'india girls',
'tailandesa': 'thailand girls',
'filipina': 'philippines girls',
'vietnamita': 'vietnam girls',
'indonesia': 'indonesia girls',
'malasia': 'malaysia girls',
'sri-lanquesa': 'sri lanka girls',
'nepalesa': 'nepal girls'
}
const comando = body.toLowerCase().replace(/[^a-zA-Z0-9]/g, '').trim()
if (!(comando in nacionalidades)) {
reply("Desculpe, n√£o conseguimos identificar essa nacionalidade. Tente novamente com uma das op√ß√µes v√°lidas.")
return
}
const nacionalidade = comando
reagir(from, "üåè")
const unsplashAPIKey = 'IM5AxyOpo_MgGdD2p4zF6KlItQI7ZuCyM7-9pc5exNU'
const response = await axios.get(`https://api.unsplash.com/photos/random?query=${nacionalidades[nacionalidade]}&client_id=${unsplashAPIKey}&count=1`)
if (response.data && Array.isArray(response.data) && response.data.length > 0) {
const imageData = response.data[0]
const imageUrl = imageData.urls && imageData.urls.full ? imageData.urls.full : null
if (!imageUrl) {
console.error(chalk.red("Erro: URL da imagem n√£o encontrada."))
reply("Desculpe, n√£o conseguimos encontrar a URL da imagem.")
return
}
const photographer = imageData.user ? imageData.user.name : 'Desconhecido'
const photoLink = imageData.links ? imageData.links.html : 'Link n√£o dispon√≠vel'
const altDescription = imageData.alt_description || 'Descri√ß√£o n√£o dispon√≠vel'
const location = imageData.location ? imageData.location.name : 'Localiza√ß√£o desconhecida'
const views = imageData.views || 'Desconhecido'
const downloads = imageData.downloads || 'Desconhecido'
console.log(chalk.yellow(`Detalhes da imagem extra√≠dos:`))
console.log(chalk.yellow(`- URL da imagem: ${imageUrl}`))
console.log(chalk.yellow(`- Fot√≥grafo: ${photographer}`))
console.log(chalk.yellow(`- Link para imagem no Unsplash: ${photoLink}`))
console.log(chalk.yellow(`- Descri√ß√£o alternativa: ${altDescription}`))
console.log(chalk.yellow(`- Localiza√ß√£o: ${location}`))
console.log(chalk.yellow(`- Visualiza√ß√µes: ${views}`))
console.log(chalk.yellow(`- Downloads: ${downloads}`))
const captions = {
'asiatica': [
"Aqui est√° a beleza da cultura asi√°tica! üå∏",
"A energia da √Åsia em uma imagem! üåè",
"Beleza e tradi√ß√£o da √Åsia! üå∫",
"A majestade da cultura asi√°tica capturada em uma imagem. üå∏",
"Reflexo da rica hist√≥ria e cultura asi√°tica! üèØ",
"A serenidade da √Åsia, mostrada em sua ess√™ncia. üåø",
"Da √Åsia com amor e cultura! üèÆ"
],
'chinesa': [
"A beleza da China em uma imagem! üá®üá≥",
"A cultura chinesa imortalizada na fotografia! üèØ",
"Imagens que capturam a ess√™ncia da China! üêâ",
"O cora√ß√£o da √Åsia, cheio de tradi√ß√µes e hist√≥ria. üèÆ",
"Cultura milenar da China, representada na imagem. üÄÑ",
"O esp√≠rito da China mostrado em uma imagem poderosa. üåè",
"Sinta a grandiosidade da China! üêº"
],
'japonesa': [
"A beleza do Jap√£o em uma imagem! üáØüáµ",
"A cultura japonesa √© um espet√°culo visual! üéã",
"Tradi√ß√£o e modernidade do Jap√£o, capturados na fotografia! ‚õ©Ô∏è",
"Imagem que traduz a calma e harmonia do Jap√£o. üå∏",
"A hist√≥ria do Jap√£o se reflete nesta imagem. üèØ",
"Sentindo a ess√™ncia do Jap√£o atrav√©s da imagem. üç£",
"A cultura japonesa em toda sua beleza. üéé"
],
'coreana': [
"A energia vibrante da Coreia capturada em uma imagem! üá∞üá∑",
"A tradi√ß√£o e modernidade da Coreia em um clique! üé§",
"Beleza e cultura da Coreia em uma imagem √∫nica! üå∏",
"A suavidade e for√ßa da Coreia representadas na fotografia. üèØ",
"A magia da Coreia em uma foto imersiva! üåè",
"Explore a cultura coreana atrav√©s dessa imagem. üé¨"
],
'indiana': [
"A grandiosidade da √çndia em uma imagem! üáÆüá≥",
"Imagens que capturam a alma vibrante da √çndia. üïå",
"A cultura rica e diversificada da √çndia. üïâÔ∏è",
"A beleza da √çndia mostrada nesta imagem encantadora. üå∫",
"A √çndia, uma terra de mist√©rios e tradi√ß√µes, revelada. üïå"
],
'tailandesa': [
"A beleza ex√≥tica da Tail√¢ndia em uma imagem! üáπüá≠",
"A serenidade e tradi√ß√£o da Tail√¢ndia capturadas em uma foto. üèØ",
"A vida vibrante da Tail√¢ndia em um clique. üå¥"
],
'filipina': [
"A beleza tropical das Filipinas em uma imagem! üáµüá≠",
"A cultura rica e acolhedora das Filipinas. üèùÔ∏è"
],
'vietnamita': [
"A magia do Vietn√£ em uma imagem! üáªüá≥",
"Cultura e tradi√ß√£o vietnamita representadas nesta foto. üèØ"
],
'indonesia': [
"A beleza natural da Indon√©sia em uma imagem! üáÆüá©",
"Imagens que capturam a ess√™ncia da Indon√©sia. üå∫"
],
'malasia': [
"A diversidade cultural da Mal√°sia em uma foto! üá≤üáæ",
"Imagens que mostram o cora√ß√£o da Mal√°sia. üèôÔ∏è"
],
'sri-lanquesa': [
"A serenidade do Sri Lanka em uma imagem! üá±üá∞",
"A rica hist√≥ria do Sri Lanka capturada em uma fotografia. üå¥"
],
'nepalesa': [
"A paz e tranquilidade do Nepal em uma imagem. üá≥üáµ",
"A majestade do Himalaia e a cultura nepalesa em uma foto. üèîÔ∏è"
]
}
const randomCaption = captions[nacionalidade][Math.floor(Math.random() * captions[nacionalidade].length)]
await loli.sendMessage(from, {image: { url: imageUrl }, caption: `‚ùØ‚ùØ ZERO TWO - WALLPAPERS ‚ùÆ‚ùÆ\n\n‚ùí‡ß£Õ°Õú${randomCaption}\n\n‚ùí‡ß£Õ°ÕúDescri√ß√£o alternativa: ${altDescription}\n‚ùí‡ß£Õ°ÕúLocaliza√ß√£o: ${location}\n‚ùí‡ß£Õ°ÕúVisualiza√ß√µes: ${views}\n‚ùí‡ß£Õ°ÕúDownloads: ${downloads}\n‚ùí‡ß£Õ°ÕúImagem de: ${photographer}\n‚ùí‡ß£Õ°Õúüîó Link: ${photoLink}`}, { quoted: selolucas })
} else {
console.log(chalk.red(`Nenhuma imagem encontrada para a nacionalidade: ${nacionalidade}`))
reply("Desculpe, n√£o encontrei imagens para essa nacionalidade.")
}
} catch (e) {
if (e.response) {
const errorMessage = e.response.data ? Buffer.from(e.response.data).toString() : 'Erro desconhecido';
console.error(chalk.red("Erro na requisi√ß√£o √† API Unsplash:", errorMessage))
} else {
console.error(chalk.red("Erro desconhecido:", e.message))
}
reply("Ocorreu um erro ao tentar buscar a imagem. Tente novamente mais tarde.")
}
break;
		
case 'codificar':
if (!q) return enviar(`Coloque o texto para transformar em c√≥digo`)
reagir(from,`üîí`) 
try {
code = await fetchJson(`https://carisys.online/api/outros/codificar?query=${q}&apikey=cariflex`)
loli.sendMessage(from, {text: `${code.codificado}`}, {quoted: info})
} catch (error) {
console.log(e)
}
break;
 case 'decodificar':
if (!q) return enviar(`Coloque o c√≥digo codificado para transformar em texto`)
reagir(from,`üîì`) 
try {
code = await fetchJson(`https://carisys.online/api/outros/decodificar?query=${q}&apikey=cariflex`)
loli.sendMessage(from, {text: `${code.decodificado}`}, {quoted: info})
} catch (error) {
console.log(e)
}
break;
		
case 'vasco':
  if (!isPremium) return reply('[‚öôÔ∏èÔ∏è] Comando s√≥ para usu√°rios VIP');

  try {
    // Verifica se o texto (par√¢metros) foi fornecido
    if (!text) {
      return reply('üö® Por favor, forne√ßa os par√¢metros no formato: .vasco t√≠tulo/nome');
    }

    // Divide o texto em t√≠tulo e nome com base no '/'
    const [titulo, nome] = text.split('/').map(param => param.trim());
    
    // Verifica se ambos os par√¢metros foram fornecidos
    if (!titulo || !nome) {
      return reply('üö® Par√¢metros inv√°lidos. Use o formato: .vasco t√≠tulo/nome');
    }

    // Verifica se o usu√°rio marcou uma foto
    if (isQuotedImage) {
      console.log('Imagem marcada detectada.');

      // Obt√©m a imagem marcada
      const boij = JSON.parse(JSON.stringify(info).replace("quotedM", "m")).message.extendedTextMessage.contextInfo.message.imageMessage;

      const fetch = require('node-fetch');
      const FormData = require('form-data');

      // Fun√ß√£o para fazer upload da imagem para o Telegraph
      async function uploadImageToTelegraph(imageBuffer) {
        const form = new FormData();
        form.append('file', imageBuffer, { filename: 'image.jpg' });

        const response = await fetch('https://telegra.ph/upload', {
          method: 'POST',
          body: form,
        });

        const data = await response.json();
        if (data && data[0] && data[0].src) {
          return 'https://telegra.ph' + data[0].src;
        } else {
          throw new Error('Falha ao obter o URL da imagem.');
        }
      }

      // Obt√©m o buffer da imagem
      const owgi = await getFileBuffer(boij, 'image');
      const perfil = await uploadImageToTelegraph(owgi);
      console.log(`Perfil atualizado (imagem marcada): ${perfil}`);

      // Gera a imagem com o link da foto
      if (perfil && perfil.startsWith('http')) {
        const encodedTitulo = encodeURIComponent(titulo);
        const encodedNome = encodeURIComponent(nome);
        const encodedPerfil = encodeURIComponent(perfil);

        const apiUrl = `https://tohka.tech/api/canvas/vasco?titulo1=${encodedTitulo}&nome=${encodedNome}&perfil=${encodedPerfil}&apikey=gxhu6`;

        console.log(`URL da API: ${apiUrl}`);

        reply("üîÑ Gerando a imagem...");

        const response = await fetch(apiUrl);

        if (!response.ok) {
          throw new Error(`Erro na resposta da API: ${response.status} ${response.statusText}`);
        }

        const imageBuffer = await response.buffer();
        await loli.sendMessage(sender, { image: imageBuffer, caption: 'Imagem gerada com sucesso.' }, { quoted: info });

      } else {
        reply('üö® N√£o foi poss√≠vel obter a URL da imagem. Tente novamente.');
      }
    } else {
      reply('üö® Por favor, marque uma foto para gerar a imagem.');
    }
  } catch (error) {
    console.error("Erro ao processar a imagem:", error);
    reply("üö® N√£o foi poss√≠vel processar a imagem. Tente novamente mais tarde.");
  }
  break;
case 'photo':
  // Checa se o usu√°rio est√° aguardando uma foto
  if (userState[sender] && userState[sender].command === 'vasco') {
    const { titulo, nome } = userState[sender].params;
    const perfil = message.message.imageMessage?.url; // Obt√©m a URL da foto marcada

    if (!perfil) {
      return reply('üö® N√£o consegui obter a foto. Por favor, marque a foto novamente.');
    }


    const encodedTitulo = encodeURIComponent(titulo);
    const encodedNome = encodeURIComponent(nome);
    const encodedPerfil = encodeURIComponent(perfil);

    const apiUrl = `https://tohka.tech/api/canvas/vasco?titulo1=${encodedTitulo}&nome=${encodedNome}&perfil=${encodedPerfil}&apikey=gxhu6`;

    console.log(`URL da API: ${apiUrl}`);

    reply("üîÑ Gerando a imagem...");

    try {
      const response = await fetch(apiUrl);

      if (!response.ok) {
        throw new Error(`Erro na resposta da API: ${response.status} ${response.statusText}`);
      }

      const imageBuffer = await response.buffer();
      await loli.sendMessage(sender, { image: imageBuffer, caption: 'Imagem gerada com sucesso.' }, { quoted: info });

    } catch (error) {
      console.error("Erro ao obter a imagem:", error);
      reply("üö® N√£o foi poss√≠vel gerar a imagem. Tente novamente mais tarde.");
    }

    // Limpa o estado do usu√°rio
    delete userState[sender];
  } else {
    reply('üö® N√£o h√° um comando em espera para processar sua foto.');
  }
  break;
  case 'signo':
    if (!q) return loli.sendMessage(from, { text: '[‚öôÔ∏èÔ∏è] Por favor, forne√ßa o nome do signo que voc√™ deseja buscar. Exemplo: !signo touro' }, { quoted: info });

    const signo = encodeURIComponent(q.toLowerCase()); // Codifica a consulta para a URL
    const apiUrlSigno = `https://world-ecletix.onrender.com/api/horoscopo/${signo}`;

    try {
        // Requisi√ß√£o para a API de hor√≥scopo
        const response = await axios.get(apiUrlSigno);
        const data = response.data;

        // Verificar se a resposta cont√©m informa√ß√µes sobre o signo
        if (data && data.signo) {
            const { signo, horoscopo, palpite, cor, elemento, regente, flor, metal, pedra, amuletos, perfume, anjo, orixa, santoProtetor } = data;

            // Montar a mensagem com as informa√ß√µes do signo
            const message = `
                *Signo:* ${signo.charAt(0).toUpperCase() + signo.slice(1)}
                *Hor√≥scopo:* ${horoscopo}
                *Palpite:* ${palpite}
                *Cor:* ${cor}
                *Elemento:* ${elemento}
                *Regente:* ${regente}
                *Flor:* ${flor}
                *Metal:* ${metal}
                *Pedra:* ${pedra}
                *Amuletos:* ${amuletos}
                *Perfume:* ${perfume}
                *Anjo:* ${anjo}
                *Orix√°:* ${orixa}
                *Santo Protetor:* ${santoProtetor}
            `;

            // Enviar a mensagem com as informa√ß√µes do signo
            await loli.sendMessage(from, { text: message }, { quoted: info });
        } else {
            loli.sendMessage(from, { text: 'üö® N√£o foi poss√≠vel encontrar informa√ß√µes para o signo pesquisado.' }, { quoted: info });
        }
    } catch (error) {
        console.error('Erro ao fazer a requisi√ß√£o √† API de hor√≥scopo:', error);
        loli.sendMessage(from, { text: 'üö® Erro ao buscar informa√ß√µes sobre o signo.' }, { quoted: info });
    }
    break;
case 'flor':
    return reply(`
    ____________ üçÇ_üçÇ_ üçÇ_üçÇ
    ____________ üçÇ__üçÇ__ üçÇ__üçÇ
    ___________ üçÇ___üçÇ__ üçÇ___üçÇ
    __________ üçÇ____üçÇ __üçÇ____üçÇ
    _________ üçÇ_____üçÇ __üçÇ ____üçÇ
    _________ üçÇ_____üçÇ __üçÇ ____ üçÇ
    _________ üçÇ_____üçÇ __üçÇ ____ üçÇ
    __________ üçÇ____ üçÇ__üçÇ ___ üçÇ
    ____________ üçÇ___üçÇ__üçÇ __ üçÇ
    _____________ üçÇüçÇüçÇüçÇüçÇ
    ______üçÉüçÉ_______üå±üå±
    ____üçÉüçÉüçÉ_______üå±
    ___üçÉüçÉüçÉüçÉ_____üå±
    ______üçÉüçÉüçÉ_____üå±
    __________üçÉ_______üå±
    ______üçÉüçÉ_üçÉ____üå±
    ____üçÉüçÉüçÉ__üçÉ__üå±
    ___üçÉüçÉüçÉ_____üçÉüå±
    ____üçÉüçÉ__________üå±
    ____üçÉ_____________üå±
    ____________________üå±
    ____________________üå±
    ____________________üå±
    ________________‚ñà‚ñà‚ñà__‚ñà‚ñà
    ______________‚ñà‚ñà‚ñà___ ‚ñà‚ñà‚ñà
    ______________‚ñà‚ñà‚ñà_____‚ñà‚ñà‚ñà_‚ñà‚ñà
    ______________‚ñà‚ñà‚ñà______‚ñà‚ñà‚ñà_‚ñà‚ñà‚ñà
    _____________‚ñà‚ñà‚ñà______‚ñà‚ñà‚ñà__‚ñà‚ñà‚ñà
    ___________‚ñà‚ñà‚ñà‚ñà_____‚ñà‚ñà‚ñà‚ñà__‚ñà‚ñà‚ñà
    ___________‚ñà‚ñà‚ñà‚ñà___‚ñà‚ñà‚ñà‚ñà___‚ñà‚ñà‚ñà_‚ñà‚ñà
    ___________‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà___‚ñà‚ñà‚ñà_‚ñà‚ñà‚ñà
    _________‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà_‚ñà‚ñà‚ñà‚ñà_‚ñà‚ñà‚ñà
    _________‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà_‚ñà‚ñà‚ñà
    _________‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà_‚ñà‚ñà‚ñà‚ñà‚ñà
    ‚ñà‚ñà‚ñà‚ñà_‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà_‚ñà‚ñà‚ñà‚ñà
    ‚ñà‚ñà‚ñà‚ñà‚ñà_‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà_‚ñà‚ñà‚ñà‚ñà
    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà_‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà_‚ñà‚ñà‚ñà‚ñà
    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà_‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà_‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà_‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
    ---------------\numa flor para outra flor\nessa eu dedico a voc√™ ${pushname} my amoreü•∞üòò‚ù§Ô∏è`)
    break;

case 'stive':
    return reply(`
    üèøüèøüèøüèøüèøüèøüèøüèø
    üèøüèøüèΩüèΩüèΩüèΩüèøüèø
    üèΩüèΩüèΩüèΩüèΩüèΩüèΩüèΩ
    üèΩ‚¨ú‚¨õüèΩüèΩ‚¨õ‚¨úüèΩ
    üèΩüèΩüèΩüèøüèøüèΩüèΩüèΩ
    üèΩüèΩüèøüèΩüèΩüèøüèΩüèΩ
    üèΩüèΩüèøüèøüèøüèøüèΩüèΩ 
    `);
    break;

case 'playboy':
    return reply(`..¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂7‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶$¬∂¬∂¬∂¬∂¬∂$
    ‚Ä¶.¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬¢‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶¬∂¬∂¬∂¬∂¬∂¬∂¬∂$
    ‚Ä¶.√∏¬∂¬∂¬∂¬∂¬∂$¬∂¬∂¬∂¬∂‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶..¬¢¬∂¬∂¬∂¬∂¬∂¬∂¬∂$
    ‚Ä¶‚Ä¶¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶.¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂√∏
    ‚Ä¶‚Ä¶..¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬¢‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶.¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂o
    ‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂‚Ä¶‚Ä¶‚Ä¶‚Ä¶..¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂
    ‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶..¬¢¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂‚Ä¶‚Ä¶‚Ä¶‚Ä¶¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂
    ‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶¬∂¬∂¬∂¬∂¬∂$¬∂¬∂¬∂¬∂¬∂7‚Ä¶‚Ä¶o¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂7
    ‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶.7¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂‚Ä¶.o¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂
    ‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶.o¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂‚Ä¶.¬∂¬∂¬∂¬∂¬∂¬∂¬∂
    ‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶.$¬∂¬∂¬∂o¬∂¬∂¬∂¬∂¬∂¬∂
    ‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶.o¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂
    ‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶.¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂
    ‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂7
    ‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶.¬∂¬∂¬∂√∏‚Ä¶‚Ä¶¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂
    ‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶..¬∂¬∂¬∂¬∂‚Ä¶‚Ä¶‚Ä¶.¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂
    ‚Ä¶‚Ä¶‚Ä¶‚Ä¶.¬∂¬∂¬∂¬∂¬∂¬∂‚Ä¶‚Ä¶¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂
    ‚Ä¶‚Ä¶‚Ä¶‚Ä¶.¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂
    ‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶..¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂
    ‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂
    ‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶.7¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂
    ‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶o¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂
    ‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂¬∂1`);
    break;
case 'letra':
    if (!q) return loli.sendMessage(from, { text: '[‚öôÔ∏èÔ∏è] Por favor, forne√ßa o nome da m√∫sica que voc√™ deseja buscar. Exemplo: !letra matue 4tal' }, { quoted: info });

    const texto = encodeURIComponent(q); // Codifica a consulta para a URL
    const apiUrlLetra = `https://world-ecletix.onrender.com/api/letra?texto=${texto}`;

    try {
        // Requisi√ß√£o para a API de letra
        const response = await axios.get(apiUrlLetra);
        const data = response.data;

        // Verificar se a resposta cont√©m informa√ß√µes sobre a m√∫sica
        if (data && data.titulo) {
            const { titulo, artista, letra, imagem } = data;

            // Montar a mensagem com as informa√ß√µes da m√∫sica
            const message = `
                *T√≠tulo:* ${titulo}
                *Artista:* ${artista}
                *Letra:*
                
                ${letra}
            `;

            // Enviar a imagem e a mensagem com a letra da m√∫sica
            if (imagem) {
                const imageResponse = await axios.get(imagem, { responseType: 'arraybuffer' });
                const imageBuffer = Buffer.from(imageResponse.data, 'binary');

                await loli.sendMessage(from, { 
                    image: imageBuffer, 
                    caption: message 
                }, { quoted: info });
            } else {
                await loli.sendMessage(from, { text: message }, { quoted: info });
            }
        } else {
            loli.sendMessage(from, { text: 'üö® N√£o foi poss√≠vel encontrar a letra da m√∫sica pesquisada.' }, { quoted: info });
        }
    } catch (error) {
        console.error('Erro ao fazer a requisi√ß√£o √† API de letra:', error);
        loli.sendMessage(from, { text: 'üö® Erro ao buscar a letra da m√∫sica.' }, { quoted: info });
    }
    break;

case 'filme':
    if (!q) return loli.sendMessage(from, { text: '[‚öôÔ∏èÔ∏è] Por favor, forne√ßa o nome do filme que voc√™ deseja buscar. Exemplo: !filme Deadpool' }, { quoted: info });

    const queryFilme = encodeURIComponent(q); // Codifica a consulta para a URL
    const apiUrlFilme = `https://world-ecletix.onrender.com/api/filme?nome=${queryFilme}`;

    try {
        // Requisi√ß√£o para a API de filmes
        const response = await axios.get(apiUrlFilme);
        const data = response.data;

        // Verificar se a resposta cont√©m informa√ß√µes sobre o filme
        if (data.status === 'online' && data.imagem) {
            const { Nome, Lancamento, Avaliacoes, Popularidade, Classificacao_adulta, Linguagem_oficial, Sinopse, imagem } = data;

            // Montar a mensagem com as informa√ß√µes do filme
            const message = `
                *T√≠tulo:* ${Nome}
                *Lan√ßamento:* ${Lancamento}
                *Avalia√ß√µes:* ${Avaliacoes}
                *Popularidade:* ${Popularidade}
                *Classifica√ß√£o Adulta:* ${Classificacao_adulta}
                *Linguagem Oficial:* ${Linguagem_oficial}
                *Sinopse:* ${Sinopse}
            `;

            // Fun√ß√£o para baixar a imagem
            const getImageBuffer = async (url) => {
                try {
                    const { data } = await axios.get(url, { responseType: 'arraybuffer' });
                    return Buffer.from(data, 'binary');
                } catch (error) {
                    console.error('Erro ao baixar a imagem:', error);
                    return null;
                }
            };

            // Verifica se a URL da imagem √© acess√≠vel e obt√©m o buffer
            const imageBuffer = await getImageBuffer(imagem);

            if (imageBuffer && imageBuffer.length > 0) {
                // Envia a mensagem com a imagem
                await loli.sendMessage(
                    from,
                    {
                        image: imageBuffer,
                        caption: message, // Adiciona a mensagem como legenda
                    },
                    { quoted: info }
                );
            } else {
                // Se falhar ao baixar a imagem, envia apenas o texto
                await loli.sendMessage(
                    from,
                    {
                        text: `${message}\n\nN√£o foi poss√≠vel baixar a imagem.`,
                    },
                    { quoted: info }
                );
            }
        } else {
            loli.sendMessage(from, { text: 'üö® N√£o foi poss√≠vel encontrar informa√ß√µes para o filme pesquisado.' }, { quoted: info });
        }
    } catch (error) {
        console.error('Erro ao fazer a requisi√ß√£o √† API de filmes:', error);
        loli.sendMessage(from, { text: 'üö® Erro ao buscar informa√ß√µes sobre o filme.' }, { quoted: info });
    }
    break;

case 'serie':
    if (!q) return loli.sendMessage(from, { text: '[‚öôÔ∏èÔ∏è] Por favor, forne√ßa o nome da s√©rie que voc√™ deseja buscar. Exemplo: !serie The Boys' }, { quoted: info });

    const querySerie = encodeURIComponent(q); // Codifica a consulta para a URL
    const apiUrlSerie = `https://world-ecletix.onrender.com/api/serie?nome=${querySerie}`;

    try {
        // Requisi√ß√£o para a API de s√©ries
        const response = await axios.get(apiUrlSerie);
        const data = response.data;

        // Verificar se a resposta cont√©m informa√ß√µes sobre a s√©rie
        if (data.status === 'online' && data.imagem) {
            const { Nome, Lancamento, Avaliacoes, Popularidade, Classificacao_adulta, Linguagem_oficial, Sinopse, imagem } = data;

            // Montar a mensagem com as informa√ß√µes da s√©rie
            const message = `
                *T√≠tulo:* ${Nome}
                *Lan√ßamento:* ${Lancamento}
                *Avalia√ß√µes:* ${Avaliacoes}
                *Popularidade:* ${Popularidade}
                *Classifica√ß√£o Adulta:* ${Classificacao_adulta}
                *Linguagem Oficial:* ${Linguagem_oficial}
                *Sinopse:* ${Sinopse}
            `;

            // Fun√ß√£o para baixar a imagem
            const getImageBuffer = async (url) => {
                try {
                    const { data } = await axios.get(url, { responseType: 'arraybuffer' });
                    return Buffer.from(data, 'binary');
                } catch (error) {
                    console.error('Erro ao baixar a imagem:', error);
                    return null;
                }
            };

            // Verifica se a URL da imagem √© acess√≠vel e obt√©m o buffer
            const imageBuffer = await getImageBuffer(imagem);

            if (imageBuffer && imageBuffer.length > 0) {
                // Envia a mensagem com a imagem
                await loli.sendMessage(
                    from,
                    {
                        image: imageBuffer,
                        caption: message, // Adiciona a mensagem como legenda
                    },
                    { quoted: info }
                );
            } else {
                // Se falhar ao baixar a imagem, envia apenas o texto
                await loli.sendMessage(from,
                    {
                        text: `${message}\n\nN√£o foi poss√≠vel baixar a imagem.`,
                    },
                    { quoted: info }
                );
            }
        } else {
            loli.sendMessage(from, { text: 'üö® N√£o foi poss√≠vel encontrar informa√ß√µes para a s√©rie pesquisada.' }, { quoted: info });
        }
    } catch (error) {
        console.error('Erro ao fazer a requisi√ß√£o √† API de s√©ries:', error);
        loli.sendMessage(from, { text: 'üö® Erro ao buscar informa√ß√µes sobre a s√©rie.' }, { quoted: info });
    }
    break;
case 'blockads':
reagir(from, "üö´")
reply(`Bloquear anuncios by ladybug-bot

via dns

dns padr√£o: dns.adguard-dns.com
dns sem filtro: unfiltered.adguard-dns.com
dns fam√≠lia: family.adguard-dns.com

via ip 
servidor padr√£o
ipv4
94.140.14.14
94.140.15.15
ipv6
2a10:50c0::ad1:ff
2a10:50c0::ad2:ff

servidor sem filtro
ipv4
94.140.14.140
94.140.14.141
ipv6
2a10:50c0::1:ff
2a10:50c0::2:ff

servidor fam√≠lia
ipv4
94.140.14.14
94.140.14.15
ipv6
2a10:50c0::bad1:ff
2a10:50c0::bad2:ff


saber mais
https://adguard-dns.io/pt_br/public-dns.html
`)
break;
case 'pinterest':
    if (!q) return reply(`*_‚ùïColoque a busca que voc√™ deseja!_*\n- *üßë‚Äçüè´ Por exemplo:* ${prefix + command} goku`);

    const searchQueryPinterest = encodeURIComponent(q);
    const pinterestApiUrl = `https://world-ecletix.onrender.com/api/pinterest?termo=${searchQueryPinterest}`;

    reply("üîÑ Buscando imagens...");

    try {
        const response = await fetch(pinterestApiUrl);

        if (!response.ok) {
            throw new Error('Erro na resposta da API');
        }

        const urls = await response.json();

        if (!Array.isArray(urls) || urls.length === 0) {
            return reply("Nenhuma imagem encontrada para a pesquisa.");
        }

        const randomIndex = Math.floor(Math.random() * urls.length);
        const randomUrl = urls[randomIndex];

        // Faz a requisi√ß√£o da imagem
        const imageResponse = await fetch(randomUrl);
        if (!imageResponse.ok) {
            throw new Error('Erro ao buscar a imagem.');
        }

        const imageBuffer = await imageResponse.buffer();

        // Envia a imagem diretamente do buffer
        await loli.sendMessage(from, { image: imageBuffer, caption: `Aqui est√° a imagem: ${q}` });

    } catch (error) {
        console.error("Erro ao obter a imagem:", error);
        reply("üö® N√£o foi poss√≠vel buscar a imagem. Tente novamente mais tarde.");
    }
break;


case 'pinterest2':
    if (!q) return reply(`*_‚ùïColoque a busca que voc√™ deseja!_*\n- *üßë‚Äçüè´ Por exemplo:* ${prefix + command} anime icon`);

    const searchQueryPinterest2 = encodeURIComponent(q);
    const apiUrlPinterest2 = `https://tohka.tech/api/pesquisa/pinterest?nome=${searchQueryPinterest2}&apikey=gxhu6`;

    reply("üîÑ Buscando imagens...");

    try {
        const response = await fetch(apiUrlPinterest2);

        if (!response.ok) {
            throw new Error('Erro na resposta da API');
        }

        const urls = await response.json();

        if (!Array.isArray(urls) || urls.length === 0) {
            return reply("Nenhuma imagem encontrada para a pesquisa.");
        }

        const randomIndex = Math.floor(Math.random() * urls.length);
        const randomUrl = urls[randomIndex];

        // Faz a requisi√ß√£o da imagem
        const imageResponse = await fetch(randomUrl);
        if (!imageResponse.ok) {
            throw new Error('Erro ao buscar a imagem.');
        }

        const imageBuffer = await imageResponse.buffer();

        // Envia a imagem diretamente do buffer
        await loli.sendMessage(from, { image: imageBuffer, caption: `Aqui est√° a imagem: ${q}` });

    } catch (error) {
        console.error("Erro ao obter a imagem:", error);
        reply("üö® N√£o foi poss√≠vel buscar a imagem. Tente novamente mais tarde.");
    }
    break;
case 'imgpralink':
case 'gerarlink': 
try { 
    // essa porra foi criada por mim, entao deixe os cr√©ditos, by: ryuu
    if (isQuotedImage) {
        const boij = isQuotedImage 
        ? JSON.parse(JSON.stringify(info).replace("quotedM", "m")).message.extendedTextMessage.contextInfo.message.imageMessage 
        : info;

        const fetch = require('node-fetch');
        const FormData = require('form-data');

        // Fun√ß√£o para fazer upload da imagem no Imgur
        async function uploadImageToImgur(imageBuffer) {
            const form = new FormData();
            form.append('image', imageBuffer, { filename: 'image.jpg' });

            const response = await fetch('https://api.imgur.com/3/image', {
                method: 'POST',
                body: form,
                headers: {
                    'Authorization': 'Client-ID 6c10f331b789cbf'
                }
            });

            const data = await response.json();
            
            // Verifica se o upload foi bem-sucedido e se a URL foi retornada
            if (response.ok && data.data && data.data.link) {
                return data.data.link;
            } else {
                throw new Error('Falha ao obter o link da imagem a partir da resposta.');
            }
        }

        // Garante que a fun√ß√£o `getFileBuffer` est√° dispon√≠vel
        const owgi = await getFileBuffer(boij, "image");
        const imageUrl = await uploadImageToImgur(owgi);
        
        const ryuumods = `_*Link gerado com sucesso*_‚ö°Ô∏è\n\n${imageUrl}`;
        reply(ryuumods);

    } else {
        reply(`${pushname}, voc√™ tem que marcar a foto desejada.`);
    }
    
} catch (e) {
    console.log('Detalhes do erro:', e); 
    reply('Erro ao processar a imagem e gerar o link...');
} 
break;
case 'igstalk':
{
  if (!isPremium) {
    return loli.sendMessage(from, { text: '[‚öôÔ∏èÔ∏è] Comando s√≥ para usu√°rios VIP' }, { quoted: info });
  }

  // Verifica se o par√¢metro foi fornecido
  if (!text) {
    return loli.sendMessage(from, { text: 'üö® Por favor, forne√ßa o nome de usu√°rio do Instagram. Exemplo: !igstalk neymarjr' }, { quoted: info });
  }

  // Remove o comando do texto para obter apenas o nome de usu√°rio
  const username = text.replace('.igstalk ', '').trim();

  // Verifica se o nome de usu√°rio n√£o est√° vazio ap√≥s a limpeza
  if (!username) {
    return loli.sendMessage(from, { text: 'üö® Nome de usu√°rio inv√°lido. Por favor, tente novamente.' }, { quoted: info });
  }

  // Codifica o nome de usu√°rio para uso na URL da API
  const encodedUsername = encodeURIComponent(username);

  loli.sendMessage(from, { text: 'üîÑ Buscando informa√ß√µes do perfil...' }, { quoted: info });

  try {
    // Cria a URL para a requisi√ß√£o √† API
    const apiUrl = `https://api-aswin-sparky.koyeb.app/api/search/ig?search=${encodedUsername}`;

    console.log(`Requisi√ß√£o para a API: ${apiUrl}`); // Log da URL da API

    // Faz a requisi√ß√£o para a API do Instagram
    const response = await fetch(apiUrl);

    // Verifica se a resposta foi bem-sucedida
    if (!response.ok) {
      throw new Error('Erro na resposta da API');
    }

    // Converte a resposta em JSON
    const data = await response.json();

    console.log('Dados da API:', data); // Log dos dados retornados pela API

    if (!data || !data.data) {
      throw new Error('Nenhum dado encontrado para o nome de usu√°rio fornecido.');
    }

    // Obt√©m as informa√ß√µes do perfil
    const profile = data.data;

    // Cria uma mensagem com as informa√ß√µes do perfil
    const profileInfo = `
üë§ *Nome:* ${profile.name || 'N/A'}
üîó *Username:* ${profile.username || 'N/A'}
üì∏ *Posts:* ${profile.posts || 'N/A'}
üßë‚Äçü§ù‚Äçüßë *Seguidores:* ${profile.followers || 'N/A'}
üë• *Seguindo:* ${profile.following || 'N/A'}
üìñ *Descri√ß√£o:* ${profile.description || 'N/A'}
üîó *Link:* https://www.instagram.com/${profile.username || username}
    `;

    // Envia a mensagem com as informa√ß√µes do perfil, incluindo a imagem de avatar
    const avatarResponse = await fetch(profile.avatar);
    const avatarBuffer = await avatarResponse.buffer();

    await loli.sendMessage(from, { 
      image: avatarBuffer, 
      caption: profileInfo 
    }, { quoted: info });

  } catch (error) {
    // Mensagens detalhadas de erro
    let errorMessage;

    if (error.message.includes('Erro na resposta da API')) {
      errorMessage = 'üö® Erro ao acessar a API. Tente novamente mais tarde.';
    } else if (error.message.includes('Nenhum dado encontrado')) {
      errorMessage = 'üö® Nenhum dado encontrado para o nome de usu√°rio fornecido. Verifique o nome de usu√°rio e tente novamente.';
    } else {
      errorMessage = `üö® Ocorreu um erro inesperado: ${error.message}`;
    }

    console.error("Detalhes do erro:", error); // Log detalhado do erro
    loli.sendMessage(from, { text: errorMessage }, { quoted: info });
  }
}
break;

case 'namoro':
  if (!isPremium) return reply('[‚öôÔ∏èÔ∏è] Comando s√≥ para usu√°rios VIP');

  // Verifica se o comando possui o formato esperado
  if (args.length !== 1) {
    return reply('üö® Por favor, use o comando no formato: .namoro');
  }

  // URLs das fotos a serem usadas
  const avatar1 = 'https://telegra.ph/file/0b76683c820979a034779.png'; // Primeira foto
  const avatar2 = 'https://telegra.ph/file/052f6f77b86db20253256.png'; // Segunda foto
  const fundoUrl = 'https://telegra.ph/file/14c9a6ce9c4e3e43a8ee1.jpg'; // Fundo

  // Construa a URL da API com os par√¢metros fornecidos
  const namoroApiUrl = `https://tohka.tech/api/canvas/namoro?avatar1=${encodeURIComponent(avatar1)}&avatar2=${encodeURIComponent(avatar2)}&fundo=${encodeURIComponent(fundoUrl)}&apikey=gxhu6`;

  console.log(`URL da API: ${namoroApiUrl}`);

  reply("üîÑ Gerando a imagem...");

  try {
    // Faz a requisi√ß√£o para a API
    const response = await fetch(namoroApiUrl);

    if (!response.ok) {
      throw new Error(`Erro na resposta da API: ${response.status} ${response.statusText}`);
    }

    const imageBuffer = await response.buffer();  // Obt√©m a resposta como buffer

    // Envia a imagem ao usu√°rio
    await loli.sendMessage(sender, { image: imageBuffer, caption: 'Imagem gerada com sucesso.' }, { quoted: info });

  } catch (error) {
    console.error("Erro ao obter a imagem:", error);
    reply("üö® N√£o foi poss√≠vel gerar a imagem. Tente novamente mais tarde.");
  }
  break;
case 'editbranca':
  if (!isPremium) return reply('[‚öôÔ∏èÔ∏è] Comando s√≥ para usu√°rios VIP');

  // Verifica se o par√¢metro foi fornecido
  if (args.length < 2) {
    return reply('üö® Por favor, forne√ßa um nick. Exemplo: !editbranca Sayo Dev');
  }

  const nickBranca = encodeURIComponent(args[1]);

  reply("üîÑ Gerando a imagem...");

  try {
    const response = await fetch(`https://tohka.tech/api/canvas/editbranca?nick=${nickBranca}&img=https://i.pinimg.com/564x/96/70/98/967098685058d9b14f5b715fd43e88d1.jpg&apikey=gxhu6`);
    
    if (!response.ok) {
      throw new Error('Erro na resposta da API');
    }

    const imageBuffer = await response.buffer();

    await loli.sendMessage(sender, { image: imageBuffer, caption: `Imagem gerada com o nick: ${args[1]}.` });

  } catch (error) {
    console.error("Erro ao obter a imagem:", error);
    reply("üö® N√£o foi poss√≠vel gerar a imagem. Tente novamente mais tarde.");
  }
  break;

case 'editvermelha':
  if (!isPremium) return reply('[‚öôÔ∏èÔ∏è] Comando s√≥ para usu√°rios VIP');

  // Verifica se o par√¢metro foi fornecido
  if (args.length < 2) {
    return reply('üö® Por favor, forne√ßa um nick. Exemplo: !editvermelha Sexo');
  }

  const nickVermelha = encodeURIComponent(args[1]);

  reply("üîÑ Gerando a imagem...");

  try {
    const response = await fetch(`https://tohka.tech/api/canvas/editvermelha?nick=${nickVermelha}&img=https://telegra.ph/file/d3f32c55c57b738806acf.png&apikey=gxhu6`);

    if (!response.ok) {
      throw new Error('Erro na resposta da API');
    }

    const imageBuffer = await response.buffer();

    await loli.sendMessage(sender, { image: imageBuffer, caption: `Imagem gerada com o nick: ${args[1]}.` });

  } catch (error) {
    console.error("Erro ao obter a imagem:", error);
    reply("üö® N√£o foi poss√≠vel gerar a imagem. Tente novamente mais tarde.");
  }
  break;

case 'editroxo':
  if (!isPremium) return reply('[‚öôÔ∏èÔ∏è] Comando s√≥ para usu√°rios VIP');

  // Verifica se o par√¢metro foi fornecido
  if (args.length < 2) {
    return reply('üö® Por favor, forne√ßa um nick. Exemplo: !editroxo Sayo');
  }

  const nickRoxo = encodeURIComponent(args[1]);

  reply("üîÑ Gerando a imagem...");

  try {
    const response = await fetch(`https://tohka.tech/api/canvas/editroxo?nick=${nickRoxo}&img=https://telegra.ph/file/edd98b4aefa226c05e60d.jpg&apikey=gxhu6`);

    if (!response.ok) {
      throw new Error('Erro na resposta da API');
    }

    const imageBuffer = await response.buffer();

    await loli.sendMessage(sender, { image: imageBuffer, caption: `Imagem gerada com o nick: ${args[1]}.` });

  } catch (error) {
    console.error("Erro ao obter a imagem:", error);
    reply("üö® N√£o foi poss√≠vel gerar a imagem. Tente novamente mais tarde.");
  }
  break;

case 'matar':
case 'mata':
    if (!isModobn) return reply(`Este tipo de comando s√≥ pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se voc√™ for, apenas digite ${prefix}modobrincadeira 1`);
    if (!isGroup) return reply('Esse comando s√≥ pode ser utilizado em grupos.');

    let mentionIdMatar;
    if (budy.includes("@")) {
        mentionIdMatar = args.join(" ").replace("@", "") + "@s.whatsapp.net";
    } else {
        mentionIdMatar = sender;
    }

    const susp = `Voc√™ acabou de matar o(a) *@${mentionIdMatar.split('@')[0]}* üòàüëπ`;
    const jrpp = await getBuffer(`${matei}`);
    
    await loli.sendMessage(from, {
        video: jrpp, 
        gifPlayback: true, 
        caption: susp, 
        mentions: [mentionIdMatar]
    }, { quoted: info });
    break;
    case 'tapa':
    if (!isModobn) return reply(`Este tipo de comando s√≥ pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se voc√™ for, apenas digite ${prefix}modobrincadeira 1`);
    if (!isGroup) return reply('Esse comando s√≥ pode ser utilizado em grupos.');

    let mentionIdTapa;
    if (budy.includes("@")) {
        mentionIdTapa = args.join(" ").replace("@", "") + "@s.whatsapp.net";
    } else {
        mentionIdTapa = sender;
    }

    const suspTapa = `Voc√™ acabou de dar um tapa na raba de *@${mentionIdTapa.split('@')[0]}* üòèüî•`;
    const jrq = await getBuffer(`${tapinha}`);
    
    await loli.sendMessage(from, {
        video: jrq, 
        gifPlayback: true, 
        caption: suspTapa, 
        mentions: [mentionIdTapa]
    }, { quoted: info });
    break;
    case 'tapanacara': 
case 'tapa2': 
    // by albino mods
    if (!isGroup) return reply('Esse comando s√≥ pode ser usado em grupos.');
    
    // Verifica se foi mencionado algu√©m
    if (!budy.includes("@")) return reply('Marque a pessoa que vai receber os tapas com @.');
    
    // Extrai o ID do mencionado e usa a nova vari√°vel mentionIdTapa2
    let mentionIdTapa2 = args.join(" ").replace("@", "") + "@s.whatsapp.net";
    
    // Envia a mensagem com o v√≠deo e a men√ß√£o
    await boruto.sendMessage(from, {
        video: { url: 'https://telegra.ph/file/0876dc8aa28cc777dac43.mp4' },
        gifPlayback: true,
        caption: `*Ih ${pushname}, voc√™ acabou de meter um tapa na cara de @${mentionIdTapa2.split('@')[0]}*`,
        mentions: [mentionIdTapa2]
    }, { quoted: info });
    break;
case 'lavarlouca':
    if (!isGroup) return reply('Esse comando s√≥ pode ser usado em grupos.');
    if (!isModobn) return reply(`Este comando s√≥ pode ser utilizado com o modo brincadeira ativo. Fale com um adm ou, se voc√™ for, digite ${prefix}modobrincadeira 1`);

    // Definindo a vari√°vel para o usu√°rio mencionado ou o remetente
    let mentionIdLavarlouca = budy.includes("@") ? args.join(" ").replace("@", "") + "@s.whatsapp.net" : sender;
    
    await loli.sendMessage(from, {
        video: { url: 'https://telegra.ph/file/a8183876a89ee799541f5.mp4' },
        gifPlayback: true,
        caption: `Voc√™ acabou de botar a(o) *@${mentionIdLavarlouca.split('@')[0]}* pra lavar a lou√ßa`,
        mentions: [mentionIdLavarlouca]
    }, { quoted: info });
    break;

case 'capinarlote':
    if (!isGroup) return reply('Esse comando s√≥ pode ser usado em grupos.');
    if (!isModobn) return reply(`Este comando s√≥ pode ser utilizado com o modo brincadeira ativo. Fale com um adm ou, se voc√™ for, digite ${prefix}modobrincadeira 1`);

    // Definindo a vari√°vel para o usu√°rio mencionado ou o remetente
    let mentionIdCapinarlote = budy.includes("@") ? args.join(" ").replace("@", "") + "@s.whatsapp.net" : sender;
    
    await loli.sendMessage(from, {
        video: { url: 'https://telegra.ph/file/4682c1b474ce5dee3a48d.mp4' },
        gifPlayback: true,
        caption: `Voc√™ acabou de botar o(a) *@${mentionIdCapinarlote.split('@')[0]}* pra capinar um lote`,
        mentions: [mentionIdCapinarlote]
    }, { quoted: info });
    break;
case 'gay2':
    if (!isModobn) return reply(`Este tipo de comando s√≥ pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se voc√™ for, apenas digite ${prefix}modobrincadeira 1`);
    if (!isGroup) return reply('Esse comando s√≥ pode ser utilizado em grupos.');

    const rate = body.slice(7);
    let mentionIdGay2;
    if (budy.includes("@")) {
        mentionIdGay2 = args.join(" ").replace("@", "") + "@s.whatsapp.net";
    } else {
        mentionIdGay2 = sender;
    }

    const random = `${Math.floor(Math.random() * 110)}`;
    const random2 = `${Math.floor(Math.random() * 110)}`;
    
    await loli.sendMessage(from, {
        text: `‚ûÆ Pesquisando a ficha de ${comando} : *@${mentionIdGay2.split("@")[0]}*, aguarde...\n\n _Voc√™ √©: ‚ù∞ ${random}, ${random2}% ‚ù±  ${comando}_`, 
        mentions: [mentionIdGay2]
    });
    break;
    
    case 'foder':
case 'fuder': // by tzn modas
    if (!isGroup) return reply('Este comando s√≥ pode ser usado em grupos.');

    let mentionIdFoder;
    if (budy.includes("@")) {
        mentionIdFoder = args.join(" ").replace("@", "") + "@s.whatsapp.net";
    } else {
        mentionIdFoder = sender; 
    }

    const randomFoder = `${Math.floor(Math.random() * 100)}`;
    reagir(from, "üí¶");
    await loli.sendMessage(from, {
        video: { url: 'https://telegra.ph/file/121ed971b8a3472e8b673.mp4' },
        gifPlayback: true,
        caption: `*[üë§] Ol√°, ${pushname}. Voc√™ acabou de fuder o(a) @${mentionIdFoder.split('@')[0]} ü•µ*\n\n*[üí¶] Chance de voc√™ ter gozado no cuzinho do(a) @${mentionIdFoder.split('@')[0]} foi de:* _${randomFoder}%_`,
        mentions: [mentionIdFoder]
    }, { quoted: info });
    break;

case 'sexo':
case 'sex':
case 'Sexo':
    if (!isGroup) return reply('Este comando s√≥ pode ser usado em grupos.');

    let mentionIdSexo;
    if (budy.includes("@")) {
        mentionIdSexo = args.join(" ").replace("@", "") + "@s.whatsapp.net";
    } else {
        mentionIdSexo = sender; 
    }

    const randomSexo = `${Math.floor(Math.random() * 120)}`;
    const fioteh = `${Math.floor(Math.random() * 100)}`;
    reagir(from, "ü§±");
    await loli.sendMessage(from, {
        video: { url: 'https://telegra.ph/file/6060d62a642f78d9375d3.mp4' },
        gifPlayback: true,
        caption: `*[üë§] Ol√°, ${pushname}. Voc√™ acabou de fazer sexo com(a) @${mentionIdSexo.split('@')[0]} ü•µ*\n\n*[üí¶] Chance de voc√™ ter ejaculado dentro:* _${randomSexo}%_\n\n*[ü§±] Poss√≠veis chances do @${mentionIdSexo.split('@')[0]} ter engravidado √©:* _${fioteh}%_`,
        mentions: [mentionIdSexo]
    }, { quoted: info });
    break;
case 'bebado':
    if (!isModobn) return reply(`Este tipo de comando s√≥ pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se voc√™ for, apenas digite ${prefix}modobrincadeira 1`);  
    if (!isGroup) return reply('S√≥ pode ser utilizado este comando em grupo.');

    let mentionIdBebado;
    if (budy.includes("@")) {
        mentionIdBebado = args.join(" ").replace("@", "") + "@s.whatsapp.net";
    } else {
        mentionIdBebado = sender;
    }

    await loli.sendMessage(from, {
        text: `‚ù∞ Pesquisando a ficha de b√™bado : @${mentionIdBebado.split("@")[0]}, aguarde... ‚ù±`,
        mentions: [mentionIdBebado]
    });

    setTimeout(async () => {
        const wew = await getBuffer(`${bebin}`);
        const random = `${Math.floor(Math.random() * 110)}`;
        await loli.sendMessage(from, {
            image: wew,
            caption: `O quanto voc√™ √© b√™bado? \n\n„Äå @${mentionIdBebado.split("@")[0]} „ÄçVoc√™ √©: ‚ù∞ ${random}% ‚ù± B√™bado ü§¢ü•µü•¥`,
            mentions: [mentionIdBebado]
        }, { quoted: info });
    }, 7000);
    break;

case 'vesgo':
    if (!isModobn) return reply(`Este tipo de comando s√≥ pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se voc√™ for, apenas digite ${prefix}modobrincadeira 1.`);
    if (!isGroup) return reply('S√≥ pode ser utilizado este comando em grupos.');

    let mentionIdVesgo;
    if (budy.includes("@")) {
        mentionIdVesgo = args.join(" ").replace("@", "").trim() + "@s.whatsapp.net";
    } else {
        mentionIdVesgo = sender;
    }

    await loli.sendMessage(from, {
        text: `‚ù∞ Pesquisando a ficha de vesgo: @${mentionIdVesgo.split("@")[0]}, aguarde... ‚ù±`,
        mentions: [mentionIdVesgo]
    });

    setTimeout(async () => {
        const wew = await getBuffer(vesgin);
        const randomVesgo = `${Math.floor(Math.random() * 110)}`;
        await loli.sendMessage(from, {
            image: wew,
            caption: `O quanto voc√™ √© vesgo?\n\n„Äå @${mentionIdVesgo.split("@")[0]} „ÄçVoc√™ √©: ‚ù∞ ${randomVesgo}% ‚ù± Vesgo üôÑüòÜ`,
            mentions: [mentionIdVesgo]
        }, { quoted: info });
    }, 7000);
    break;
case 'clt':
    // by sd modz
    if (!isGroup) return reply(`Esse comando s√≥ pode ser usado em grupos.`);
    if (!isModobn) return reply(`Este tipo de comando s√≥ pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se voc√™ for, apenas digite ${prefix}modobrincadeira 1`);
    
    let mentionIdClt;
    if (budy.includes("@")) {
        mentionIdClt = args.join(" ").replace("@", "") + "@s.whatsapp.net";
    } else {
        mentionIdClt = sender; 
    }
    
    const targetUserId = mentionIdClt.split('@')[0]; 
    const messageCaption = `Ih, mano! O ${pushname} levou o @${targetUserId} pra virar CLT! ü•≤üí•`;
    
    await loli.sendMessage(from, {
        video: { url: 'https://raw.githubusercontent.com/floxcloud/uploadsFlox/main/videos/1728153313349.mp4' },
        gifPlayback: true,
        caption: messageCaption,
        mentions: [mentionIdClt]
    }, { quoted: info });
    break;
    
    
case 'pegarpau':
    if (!isGroup) return reply('Este comando s√≥ pode ser usado em grupos.');
    if (!isModobn) return reply(`Ative o modo brincadeira usando ${prefix}modobrincadeira 1`);

    let mentionIdPegarPau = budy.includes("@") ? args.join(" ").replace("@", "") + "@s.whatsapp.net" : sender;

    await loli.sendMessage(from, {
        video: { url: 'https://telegra.ph/file/5073ba8be6b099ed812a7.mp4' },
        gifPlayback: true,
        caption: `Voc√™ acabou de pegar no pau do(a) *@${mentionIdPegarPau.split('@')[0]}*`,
        mentions: [mentionIdPegarPau]
    }, { quoted: info }); // Alterado para usar 'info'
    break;

case 'matar2':
case 'mata2':
    if (!isGroup) return reply('Este comando s√≥ pode ser usado em grupos.');
    if (!isModobn) return reply(`Ative o modo brincadeira usando ${prefix}modobrincadeira 1`);

    let mentionIdMatar2 = budy.includes("@") ? args.join(" ").replace("@", "") + "@s.whatsapp.net" : sender;

    await loli.sendMessage(from, {
        video: { url: matarcmd }, // Certifique-se de que 'matarcmd' esteja definido
        gifPlayback: true,
        caption: `Voc√™ acabou de matar o(a) *@${mentionIdMatar2.split('@')[0]}*, seu... üòµ‚Äçüí´üíÖüèª`,
        mentions: [mentionIdMatar2]
    }, { quoted: info }); // Alterado para usar 'info'
    break;

case 'pegarbunda':
    if (!isGroup) return reply('Este comando s√≥ pode ser usado em grupos.');
    if (!isModobn) return reply(`Ative o modo brincadeira usando ${prefix}modobrincadeira 1`);

    let mentionIdPegarBunda = budy.includes("@") ? args.join(" ").replace("@", "") + "@s.whatsapp.net" : sender;

    await loli.sendMessage(from, {
        video: { url: 'https://telegra.ph/file/e62de1e6863c59d284b2e.mp4' },
        gifPlayback: true,
        caption: `Voc√™ acabou de pegar na bunda do(a) *@${mentionIdPegarBunda.split('@')[0]}*`,
        mentions: [mentionIdPegarBunda]
    }, { quoted: info }); // Alterado para usar 'info'
    break;

case 'pegarpeito':
    if (!isGroup) return reply('Este comando s√≥ pode ser usado em grupos.');
    if (!isModobn) return reply(`Ative o modo brincadeira usando ${prefix}modobrincadeira 1`);

    let mentionIdPegarPeito = budy.includes("@") ? args.join(" ").replace("@", "") + "@s.whatsapp.net" : sender;

    await loli.sendMessage(from, {
        video: { url: 'https://telegra.ph/file/52d46e2c58318b8cfcacc.mp4' },
        gifPlayback: true,
        caption: `Voc√™ acabou de pegar nos peitos do(a) *@${mentionIdPegarPeito.split('@')[0]}*`,
        mentions: [mentionIdPegarPeito]
    }, { quoted: info }); // Alterado para usar 'info'
    break;


case 'comer':
    if (!isGroup) return reply('Este comando s√≥ pode ser usado em grupos.');
    if (!isModobn) return reply(`Ative o modo brincadeira usando ${prefix}modobrincadeira 1`);

    let mentionIdComer = budy.includes("@") ? args.join(" ").replace("@", "") + "@s.whatsapp.net" : sender;

    const videoComer = await getBuffer('https://telegra.ph/file/d46ff5e2b8f4c5335e362.mp4'); // Carregando o v√≠deo
    if (!videoComer) {
        return reply("N√£o foi poss√≠vel carregar o v√≠deo.");
    }

    await loli.sendMessage(from, {
        video: videoComer,
        gifPlayback: true,
        caption: `Voc√™ acabou de comer a(o) *@${mentionIdComer.split('@')[0]}*`,
        mentions: [mentionIdComer]
    }, { quoted: info }); // Alterado para usar 'info'
    break;

case 'matar':
case 'mata':
    if (!isModobn) return reply(`Este tipo de comando s√≥ pode ser utilizado com o modo brincadeira ativo. Fale com um admin ou, se voc√™ for, digite ${prefix}modobrincadeira 1`);
    if (!isGroup) return reply('Este comando s√≥ pode ser usado em grupos.');

    let targetMatar = budy.includes("@") ? args.join(" ").replace("@", "") + "@s.whatsapp.net" : sender;
    let suspMatar = `Voc√™ acabou de matar o(a) @${targetMatar.split('@')[0]} üòàüëπ`;
    const jrppMatar = await getBuffer(`${matei}`); // Certifique-se de que `matei` esteja definido

    await loli.sendMessage(from, {
        video: jrppMatar,
        gifPlayback: true,
        caption: suspMatar,
        mentions: [targetMatar]
    }, { quoted: info });
    break;


case 'dar':
    if (!isGroup) return reply('Este comando s√≥ pode ser usado em grupos.');

    // Obter a men√ß√£o correta
    const mentionedDar = budy.includes("@") ? budy.match(/@\d+/g) : []; 
    let blamentionIdDar = mentionedDar.length > 0 ? mentionedDar[0].replace("@", "") + "@s.whatsapp.net" : sender;

    // Enviar mensagem com v√≠deo
    await loli.sendMessage(from, {
        video: { url: "https://telegra.ph/file/8d6c8af967fad0fe77ba8.mp4" },
        gifPlayback: true,
        caption: `Voc√™ deu com vontade na @${blamentionIdDar.split('@')[0]}, ela(e) at√© gozou.`,
        mentions: [blamentionIdDar]
    }, { quoted: info });
    break;
    
   case 'morder':
    if (!isGroup) return reply('Esse comando s√≥ pode ser usado em grupos.');
    if (!isModobn) return reply('Este comando s√≥ pode ser usado no modo brincadeira.');

    // Definindo a vari√°vel para o usu√°rio mencionado ou o remetente
    let mentionIdMorder = budy.includes("@") ? args.join(" ").replace("@", "") + "@s.whatsapp.net" : sender;
    
    await loli.sendMessage(from, {
        video: { url: 'https://telegra.ph/file/75e4c0273be625a2363ce.mp4' },
        gifPlayback: true,
        caption: `Voc√™ acabou de dar uma mordida no(a) *@${mentionIdMorder.split('@')[0]}*`,
        mentions: [mentionIdMorder]
    }, { quoted: info }); // Alterado de selo para info
    break;

case 'carinho':
    if (!isGroup) return reply('Esse comando s√≥ pode ser usado em grupos.');
    if (!isModobn) return reply('Este comando s√≥ pode ser usado no modo brincadeira.');

    // Definindo a vari√°vel para o usu√°rio mencionado ou o remetente
    let mentionIdCarinho = budy.includes("@") ? args.join(" ").replace("@", "") + "@s.whatsapp.net" : sender;
    
    await loli.sendMessage(from, {
        video: { url: 'https://telegra.ph/file/2b6b4f4e38214bd6164ce.mp4' },
        gifPlayback: true,
        caption: `Voc√™ acabou de dar um carinho no(a) *@${mentionIdCarinho.split('@')[0]}*`,
        mentions: [mentionIdCarinho]
    }, { quoted: info }); // Alterado de selo para info
    break;
    
case 'churrasco':
case 'a√ßougue':  //by: its morais
    let picanha = Math.floor(Math.random() * 19) + 10;
    let contrafl = Math.floor(Math.random() * 10) + 17;
    let frangoassa = Math.floor(Math.random() * 15) + 20;
    let migilhon = Math.floor(Math.random() * 40) + 60;
    let resultFinal = picanha + contrafl + frangoassa + migilhon;
    
    reply(`Aguarde 9 segundos para sair os resultados das pe√ßas de carnes vendidas!`);
    await delay(9000);
    
    const logochurras = "https://telegra.ph/file/96a9f0a48bb9f81b30ede.jpg";
    loli.sendMessage(from, {
        image: { url: `${logochurras}` }, 
        caption: mess.barbecueResult(picanha, contrafl, frangoassa, migilhon, resultFinal) 
    }, { quoted: sasah });
    
    AdicionarSaldo(sender, resultFinal);
    break;

case 'lavar':
    // by sd modz
    if (!isGroup) return reply(`Esse comando s√≥ pode ser usado em grupos.`);
    if (!isModobn) return reply(`Este tipo de comando s√≥ pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se voc√™ for, apenas digite ${prefix}modobrincadeira 1`);

    let mentionIdLavar;
    if (budy.includes("@")) {
        mentionIdLavar = args.join(" ").replace("@", "") + "@s.whatsapp.net";
    } else {
        mentionIdLavar = sender;
    }

    const lavaLoucaMessage = `Ih, mano! O ${pushname} mandou o @${mentionIdLavar.split('@')[0]} lavar a lou√ßa, esse(a) pregui√ßoso(a)! üò¨üí¶`;
    
    await loli.sendMessage(from, {
        video: { url: 'https://raw.githubusercontent.com/floxcloud/uploadsFlox/main/videos/1728153184856.mp4' },
        gifPlayback: true,
        caption: lavaLoucaMessage,
        mentions: [mentionIdLavar]
    }, { quoted: info });
    break;

case 'sentar':
    if (!isGroup) return reply(`Esse comando s√≥ pode ser usado em grupos.`);
    if (!isModobn) return reply(`Esse comando s√≥ pode ser usado no modo brincadeira. Use ${prefix}modobn`);
    
    let mentionIdSentar;
    if (budy.includes("@")) {
        mentionIdSentar = args.join(" ").replace("@", "") + "@s.whatsapp.net";
    } else {
        mentionIdSentar = sender;
    }

    await loli.sendMessage(from, {
        video: { url: `https://telegra.ph/file/d695e05443043ff9a254d.mp4` }, 
        gifPlayback: true, 
        caption: `Voc√™ acabou de dar uma sentadinha no(a) *@${mentionIdSentar.split('@')[0]}*`, 
        mentions: [mentionIdSentar]
    }, { quoted: info });
    break;

case 'tirarft':
    if (!isGroup) return reply(`Esse comando s√≥ pode ser usado em grupos.`);
    if (!isModobn) return reply(`Este tipo de comando s√≥ pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se voc√™ for, apenas digite ${prefix}modobrincadeira 1`);

    let mentionIdTirarFt;
    if (budy.includes("@")) {
        mentionIdTirarFt = args.join(" ").replace("@", "") + "@s.whatsapp.net";
    } else {
        mentionIdTirarFt = sender;
    }

    await loli.sendMessage(from, {
        video: { url: `https://telegra.ph/file/0b2c64f03b9b916c0e2cb.mp4` }, 
        gifPlayback: true, 
        caption: `Voc√™ acabou de tirar a foto do(a) *@${mentionIdTirarFt.split('@')[0]}*`, 
        mentions: [mentionIdTirarFt]
    }, { quoted: info });
    break;

case 'apaixonar':
    if (!isGroup) return reply(`Esse comando s√≥ pode ser usado em grupos.`);
    if (!isModobn) return reply(`Este tipo de comando s√≥ pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se voc√™ for, apenas digite ${prefix}modobrincadeira 1`);

    let mentionIdApaixonar;
    if (budy.includes("@")) {
        mentionIdApaixonar = args.join(" ").replace("@", "") + "@s.whatsapp.net";
    } else {
        mentionIdApaixonar = sender;
    }

    await loli.sendMessage(from, {
        video: { url: `https://telegra.ph/file/d60f260b845760d823cfd.mp4` }, 
        gifPlayback: true, 
        caption: `Voc√™ acabou de apaixonar o(a) *@${mentionIdApaixonar.split('@')[0]}*`, 
        mentions: [mentionIdApaixonar]
    }, { quoted: info });
    break;
case 'abra√ßar':
case 'abracar':
    if (!isGroup) return reply(`Esse comando s√≥ pode ser usado em grupos.`);
    if (!isModobn) return reply(`Este tipo de comando s√≥ pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se voc√™ for, apenas digite ${prefix}modobrincadeira 1`);

    let mentionIdAbracar;
    if (budy.includes("@")) {
        mentionIdAbracar = args.join(" ").replace("@", "") + "@s.whatsapp.net";
    } else {
        mentionIdAbracar = sender;
    }

    await loli.sendMessage(from, {
        video: { url: `https://telegra.ph/file/c0d47a2ecae1055526db0.mp4` }, 
        gifPlayback: true, 
        caption: `Voc√™ acabou de abra√ßar o(a) *@${mentionIdAbracar.split('@')[0]}*`, 
        mentions: [mentionIdAbracar]
    }, { quoted: info });
    break;

case 'beijar':
    if (!isGroup) return reply(`Esse comando s√≥ pode ser usado em grupos.`);
    if (!isModobn) return reply(`Este tipo de comando s√≥ pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se voc√™ for, apenas digite ${prefix}modobrincadeira 1`);

    let mentionIdBeijar;
    if (budy.includes("@")) {
        mentionIdBeijar = args.join(" ").replace("@", "") + "@s.whatsapp.net";
    } else {
        mentionIdBeijar = sender;
    }

    await loli.sendMessage(from, {
        video: { url: `https://telegra.ph/file/c9b5ed858237ebc9f7356.mp4` }, 
        gifPlayback: true, 
        caption: `Voc√™ acabou de beijar o(a) *@${mentionIdBeijar.split('@')[0]}*`, 
        mentions: [mentionIdBeijar]
    }, { quoted: info });
    break;
case 'ship':
case 'affect':
case 'mms':
case 'bobross':
case 'bolsonaro':
case 'comunismo':
case 'duelo':
case 'blur':
case 'circle':
case 'del':
case 'lgbt':
case 'beautiful':
case 'invert':
case 'facepalm':
case 'jail':
case 'rip':
case 'pixelate':
case 'sepia':
case 'trash':
case 'wanted':
case 'wasted':
  if (!isPremium) return reply('[‚öôÔ∏èÔ∏è] Comando s√≥ para usu√°rios VIP');

  try {
    if (isQuotedImage) {
      const boij = JSON.parse(JSON.stringify(info).replace("quotedM", "m")).message.extendedTextMessage.contextInfo.message.imageMessage;
      const fetch = require('node-fetch');
      const FormData = require('form-data');

      // Fun√ß√£o para fazer upload da imagem no Imgur
      async function uploadImageToImgur(imageBuffer) {
        const form = new FormData();
        form.append('image', imageBuffer, { filename: 'image.jpg' });

        const response = await fetch('https://api.imgur.com/3/image', {
          method: 'POST',
          body: form,
          headers: {
            'Authorization': 'Client-ID 6c10f331b789cbf'  // Substitua pelo seu Client-ID do Imgur
          }
        });

        const data = await response.json();
        
        // Verifica se o upload foi bem-sucedido e se a URL foi retornada
        if (response.ok && data.data && data.data.link) {
          return data.data.link;
        } else {
          throw new Error('Falha ao obter o link da imagem a partir da resposta.');
        }
      }

      // Garante que a fun√ß√£o `getFileBuffer` est√° dispon√≠vel
      const owgi = await getFileBuffer(boij, "image");
      const imageUrl = await uploadImageToImgur(owgi);

      // Define a URL da API para o comando atual usando o link do Imgur
      const url = `http://br2.bronxyshost.com:4109/api/canvas/${command}?link=${encodeURIComponent(imageUrl)}&apikey=dark_key:aGQ8xn0L&username=comefemea`;

      reply(`üîÑ Processando a imagem ${command}...`);

      // Envia a imagem para a API
      const res = await fetch(url, {
        method: 'GET',
        headers: {
          'Accept': 'image/png'  // Ajuste conforme o tipo de imagem retornado pela API
        }
      });

      if (!res.ok) throw new Error(`Erro na resposta da API ${command}`);
      const imageBuffer = await res.buffer();

      await loli.sendMessage(from, { image: imageBuffer, caption: `Imagem ${command} gerada com sucesso!` }, { quoted: info });

    } else {
      reply('üö® Por favor, marque uma foto para aplicar o efeito.');
    }
  } catch (error) {
    console.error(`Erro ao processar a imagem ${command}:`, error);
    reply("üö® N√£o foi poss√≠vel processar a imagem. Tente novamente mais tarde.");
  }
  break;		
case 'ship2':
case 'affect2':
case 'mms2':
case 'bobross2':
case 'bolsonaro2':
case 'comunismo2':
case 'duelo2':
case 'blur2':
case 'circle2':
case 'del2':
case 'lgbt2':
case 'beautiful2':
case 'invert2':
case 'facepalm2':
case 'jail2':
case 'rip2':
case 'pixelate2':
case 'sepia2':
case 'trash2':
case 'wanted2':
case 'wasted2':
  if (!isPremium) return reply('[‚öôÔ∏èÔ∏è] Comando s√≥ para usu√°rios VIP');

  try {
    if (isQuotedImage) {
      const boij = JSON.parse(JSON.stringify(info).replace("quotedM", "m")).message.extendedTextMessage.contextInfo.message.imageMessage;
      const fetch = require('node-fetch');
      const FormData = require('form-data');

      // Fun√ß√£o para fazer upload da imagem no Imgur
      async function uploadImageToImgur(imageBuffer) {
        const form = new FormData();
        form.append('image', imageBuffer, { filename: 'image.jpg' });

        const response = await fetch('https://api.imgur.com/3/image', {
          method: 'POST',
          body: form,
          headers: {
            'Authorization': 'Client-ID 6c10f331b789cbf'
          }
        });

        const data = await response.json();
        
        // Verifica se o upload foi bem-sucedido e se a URL foi retornada
        if (response.ok && data.data && data.data.link) {
          return data.data.link;
        } else {
          throw new Error('Falha ao obter o link da imagem a partir da resposta.');
        }
      }

      // Garante que a fun√ß√£o `getFileBuffer` est√° dispon√≠vel
      const owgi = await getFileBuffer(boij, "image");
      const imageUrl = await uploadImageToImgur(owgi);

      // Define a URL da API para o comando atual usando o link do Imgur
      const url = `http://br2.bronxyshost.com:4109/api/canvas/${command}?link=${encodeURIComponent(imageUrl)}&apikey=dark_key:aGQ8xn0L&username=comefemea`;

      reply(`üîÑ Processando a imagem ${command}...`);

      // Envia a imagem para a API
      const response = await fetch(url, {
        method: 'GET',
        headers: {
          'Accept': 'image/png'  // Ajuste conforme o tipo de imagem retornado pela API
        }
      });

      if (!response.ok) throw new Error(`Erro na resposta da API ${command}`);
      const imageBuffer = await response.buffer();

      await loli.sendMessage(from, { image: imageBuffer, caption: `Imagem ${command} gerada com sucesso!` }, { quoted: info });

    } else {
      reply('üö® Por favor, marque uma foto para aplicar o efeito.');
    }
  } catch (error) {
    console.error(`Erro ao processar a imagem ${command}:`, error);
    reply("üö® N√£o foi poss√≠vel processar a imagem. Tente novamente mais tarde.");
  }
  break;
case 'xvdownload': {
    try {
        if (!q.trim()) return reply(`- Exemplo: ${prefix}xvdownload link_do_video`);

        const response = await fetch(`https://tohka.tech/api/dl/xvideos?link=${encodeURIComponent(q)}&apikey=gxhu6`);
        if (!response.ok) return reply("Erro ao buscar os dados do Xvideos.");

        const data = await response.json();

        if (data.status !== 'operando') return reply("N√£o foi poss√≠vel processar o v√≠deo no momento.");

        const videoInfo = data.resultado[0];

        const message = `*T√≠tulo:* ${videoInfo.titulo}\n` +
                        `*Descri√ß√£o:* ${videoInfo.descricao}\n` +
                        `*Dura√ß√£o:* ${videoInfo.duracao}\n` +
                        `*Data de Publica√ß√£o:* ${new Date(videoInfo.dataDePublicacao).toLocaleDateString()}`;

        // Envia o v√≠deo com as informa√ß√µes
        await loli.sendMessage(from, { 
            video: { url: videoInfo.download }, 
            mimetype: "video/mp4", 
            caption: message 
        }, { quoted: info }).catch(e => {
            console.log('Erro ao enviar o v√≠deo:', e);
            return reply("Erro ao tentar baixar o v√≠deo.");
        });

    } catch (e) {
        console.log('Erro no bloco try:', e);
        return reply("N√£o foi poss√≠vel baixar ou encontrar esse v√≠deo no Xvideos.");
    }
}
break;

case 'xnxxdownload': {
    try {
        if (!q.trim()) return reply(`- Exemplo: ${prefix}xnxxdownload link_do_video`);

        const response = await fetch(`https://tohka.tech/api/dl/xnxx?link=${encodeURIComponent(q)}&apikey=gxhu6`);
        if (!response.ok) return reply("Erro ao buscar os dados do XNXX.");

        const data = await response.json();

        if (data.status !== 'operando') return reply("N√£o foi poss√≠vel processar o v√≠deo no momento.");

        const videoInfo = data.resultado[0];

        const message = `*T√≠tulo:* ${videoInfo.titulo}\n` +
                        `*Descri√ß√£o:* ${videoInfo.descricao}\n` +
                        `*Dura√ß√£o:* ${videoInfo.duracao}\n` +
                        `*Visualiza√ß√µes:* ${videoInfo.visualizacoes}\n` +
                        `*Data de Publica√ß√£o:* ${new Date(videoInfo.dataDePublicacao).toLocaleDateString()}`;

        // Envia o v√≠deo com as informa√ß√µes e o thumbnail
        await loli.sendMessage(from, { 
            video: { url: videoInfo.urlDoVideo }, 
            mimetype: "video/mp4", 
            caption: message, 
            thumbnail: { url: videoInfo.thumbnail }
        }, { quoted: info }).catch(e => {
            console.log('Erro ao enviar o v√≠deo:', e);
            return reply("Erro ao tentar baixar o v√≠deo.");
        });

    } catch (e) {
        console.log('Erro no bloco try:', e);
        return reply("N√£o foi poss√≠vel baixar ou encontrar esse v√≠deo no XNXX.");
    }
}
break;

  case 'xvideos':
  if (!isPremium) return reply('[‚öôÔ∏èÔ∏è] Comando s√≥ para usu√°rios VIP');

  const urlXvideos = 'http://tohka.tech/api/pesquisa/xvideos?nome=ia&apikey=gxhu6';
  reply("üîÑ Realizando a pesquisa no Xvideos...");

  try {
    const responseXvideos = await fetch(urlXvideos);
    if (!responseXvideos.ok) throw new Error('Erro na resposta da API Xvideos');
    const resultXvideos = await responseXvideos.json();

    let messageXvideos = 'üîç Resultados da pesquisa no Xvideos:\n\n';
    if (Array.isArray(resultXvideos) && resultXvideos.length) {
      resultXvideos.forEach(item => {
        messageXvideos += `- T√≠tulo: ${item.titulo || 'Sem t√≠tulo'}\n`;
        messageXvideos += `  URL: ${item.link || 'N√£o dispon√≠vel'}\n`;
        messageXvideos += `  Capa: ${item.capa || 'N√£o dispon√≠vel'}\n`;
        messageXvideos += `  Qualidade: ${item.qualidade || 'N√£o dispon√≠vel'}\n`;
        messageXvideos += `  Canal: ${item.canal || 'N√£o dispon√≠vel'}\n\n`;
      });
    } else {
      messageXvideos += 'Nenhum resultado encontrado.\n';
    }

    await loli.sendMessage(sender, { text: messageXvideos }, { quoted: info });

  } catch (error) {
    console.error("Erro ao realizar a pesquisa no Xvideos:", error);
    reply("üö® N√£o foi poss√≠vel realizar a pesquisa. Tente novamente mais tarde.");
  }
  break;

case 'pornogratis':
  if (!isPremium) return reply('[‚öôÔ∏èÔ∏è] Comando s√≥ para usu√°rios VIP');

  const urlPornogratis = 'https://tohka.tech/api/pesquisa/pornogratis?nome=orgasm&apikey=gxhu6';
  reply("üîÑ Realizando a pesquisa no Pornogratis...");

  try {
    const responsePornogratis = await fetch(urlPornogratis);
    if (!responsePornogratis.ok) throw new Error('Erro na resposta da API Pornogratis');
    const resultPornogratis = await responsePornogratis.json();

    let messagePornogratis = 'üîç Resultados da pesquisa no Pornogratis:\n\n';
    if (Array.isArray(resultPornogratis) && resultPornogratis.length) {
      resultPornogratis.forEach(item => {
        messagePornogratis += `- Nome: ${item.nome || 'Sem t√≠tulo'}\n`;
        messagePornogratis += `  URL: ${item.link || 'N√£o dispon√≠vel'}\n`;
        messagePornogratis += `  Imagem: ${item.img || 'N√£o dispon√≠vel'}\n\n`;
      });
    } else {
      messagePornogratis += 'Nenhum resultado encontrado.\n';
    }

    await loli.sendMessage(sender, { text: messagePornogratis }, { quoted: info });

  } catch (error) {
    console.error("Erro ao realizar a pesquisa no Pornogratis:", error);
    reply("üö® N√£o foi poss√≠vel realizar a pesquisa. Tente novamente mais tarde.");
  }
  break;

case 'pornohub':
  if (!isPremium) return reply('[‚öôÔ∏èÔ∏è] Comando s√≥ para usu√°rios VIP');

  const urlPornhubsrc = 'https://tohka.tech/api/pesquisa/pornhubsrc?nome=orgasm&apikey=gxhu6';
  reply("üîÑ Realizando a pesquisa no Pornhubsrc...");

  try {
    const responsePornhubsrc = await fetch(urlPornhubsrc);
    if (!responsePornhubsrc.ok) throw new Error('Erro na resposta da API Pornhubsrc');
    const resultPornhubsrc = await responsePornhubsrc.json();

    let messagePornhubsrc = 'üîç Resultados da pesquisa no Pornhubsrc:\n\n';
    if (Array.isArray(resultPornhubsrc) && resultPornhubsrc.length) {
      resultPornhubsrc.forEach(item => {
        messagePornhubsrc += `- T√≠tulo: ${item.titulo || 'Sem t√≠tulo'}\n`;
        messagePornhubsrc += `  Dura√ß√£o: ${item.dura√ß√£o || 'N√£o dispon√≠vel'}\n`;
        messagePornhubsrc += `  Canal: ${item.canal || 'N√£o dispon√≠vel'}\n`;
        messagePornhubsrc += `  Visualiza√ß√µes: ${item.visualiza√ß√µes || 'N√£o dispon√≠vel'}\n`;
        messagePornhubsrc += `  Likes: ${item.likes || 'N√£o dispon√≠vel'}\n`;
        messagePornhubsrc += `  URL: ${item.link2 || 'N√£o dispon√≠vel'}\n`;
        messagePornhubsrc += `  Imagem: ${item.img || 'N√£o dispon√≠vel'}\n\n`;
      });
    } else {
      messagePornhubsrc += 'Nenhum resultado encontrado.\n';
    }

    await loli.sendMessage(sender, { text: messagePornhubsrc }, { quoted: info });

  } catch (error) {
    console.error("Erro ao realizar a pesquisa no Pornhubsrc:", error);
    reply("üö® N√£o foi poss√≠vel realizar a pesquisa. Tente novamente mais tarde.");
  }
  break;

case 'assistirhentai':
  if (!isPremium) return reply('[‚öôÔ∏èÔ∏è] Comando s√≥ para usu√°rios VIP');

  const urlAssistirhentai = 'https://tohka.tech/api/pesquisa/assistirhentai?nome=neko&apikey=gxhu6';
  reply("üîÑ Realizando a pesquisa no Assistir Hentai...");

  try {
    const responseAssistirhentai = await fetch(urlAssistirhentai);
    if (!responseAssistirhentai.ok) throw new Error('Erro na resposta da API Assistir Hentai');
    const resultAssistirhentai = await responseAssistirhentai.json();

    let messageAssistirhentai = 'üîç Resultados da pesquisa no Assistir Hentai:\n\n';
    if (Array.isArray(resultAssistirhentai) && resultAssistirhentai.length) {
      resultAssistirhentai.forEach(item => {
        messageAssistirhentai += `- Nome: ${item.nome || 'Sem t√≠tulo'}\n`;
        messageAssistirhentai += `  Tipo: ${item.tipo || 'N√£o dispon√≠vel'}\n`;
        messageAssistirhentai += `  Total de Epis√≥dios: ${item.total_ep || 'N√£o dispon√≠vel'}\n`;
        messageAssistirhentai += `  Data de Publica√ß√£o: ${item.data_up.trim() || 'N√£o dispon√≠vel'}\n`;
        messageAssistirhentai += `  URL: ${item.link || 'N√£o dispon√≠vel'}\n`;
        messageAssistirhentai += `  Imagem: ${item.img || 'N√£o dispon√≠vel'}\n\n`;
      });
    } else {
      messageAssistirhentai += 'Nenhum resultado encontrado.\n';
    }

    await loli.sendMessage(sender, { text: messageAssistirhentai }, { quoted: info });

  } catch (error) {
    console.error("Erro ao realizar a pesquisa no Assistir Hentai:", error);
    reply("üö® N√£o foi poss√≠vel realizar a pesquisa. Tente novamente mais tarde.");
  }
  break;

case 'hentaistuber':
  if (!isPremium) return reply('[‚öôÔ∏èÔ∏è] Comando s√≥ para usu√°rios VIP');

  const urlHentaistuber = 'https://tohka.tech/api/pesquisa/hentaistuber?nome=neko&apikey=gxhu6';
  reply("üîÑ Realizando a pesquisa no Hentaistuber...");

  try {
    const responseHentaistuber = await fetch(urlHentaistuber);
    if (!responseHentaistuber.ok) throw new Error('Erro na resposta da API Hentaistuber');
    const resultHentaistuber = await responseHentaistuber.json();

    let messageHentaistuber = 'üîç Resultados da pesquisa no Hentaistuber:\n\n';
    if (Array.isArray(resultHentaistuber) && resultHentaistuber.length) {
      resultHentaistuber.forEach(item => {
        messageHentaistuber += `- T√≠tulo: ${item.titulo || 'Sem t√≠tulo'}\n`;
        messageHentaistuber += `  Imagem: ${item.img || 'N√£o dispon√≠vel'}\n`;
        messageHentaistuber += `  Link: ${item.link || 'N√£o dispon√≠vel'}\n\n`;
      });
    } else {
      messageHentaistuber += 'Nenhum resultado encontrado.\n';
    }

    await loli.sendMessage(sender, { text: messageHentaistuber }, { quoted: info });

  } catch (error) {
    console.error("Erro ao realizar a pesquisa no Hentaistuber:", error);
    reply("üö® N√£o foi poss√≠vel realizar a pesquisa. Tente novamente mais tarde.");
  }
  break;
case 'hentaiword':
  if (!isPremium) return reply('[‚öôÔ∏èÔ∏è] Comando s√≥ para usu√°rios VIP');

  const urlHentaiword = 'https://tohka.tech/api/hentai/hentaiword?nome=hentai&apikey=gxhu6';
  reply("üîÑ Realizando a pesquisa no Hentaiword...");

  try {
    const responseHentaiword = await fetch(urlHentaiword);
    if (!responseHentaiword.ok) throw new Error('Erro na resposta da API Hentaiword');
    const resultHentaiword = await responseHentaiword.json();

    let messageHentaiword = 'üîç Resultados da pesquisa no Hentaiword:\n\n';
    if (Array.isArray(resultHentaiword) && resultHentaiword.length) {
      resultHentaiword.forEach(item => {
        messageHentaiword += `- T√≠tulo: ${item.titulo || 'Sem t√≠tulo'}\n`;
        messageHentaiword += `  Imagem: ${item.imagem ? `https:${item.imagem}` : 'N√£o dispon√≠vel'}\n`;
        messageHentaiword += `  Likes: ${item.likes || 'N√£o dispon√≠vel'}\n`;
        messageHentaiword += `  Ameis: ${item.ameis || 'N√£o dispon√≠vel'}\n\n`;
      });
    } else {
      messageHentaiword += 'Nenhum resultado encontrado.\n';
    }

    await loli.sendMessage(sender, { text: messageHentaiword }, { quoted: info });

  } catch (error) {
    console.error("Erro ao realizar a pesquisa no Hentaiword:", error);
    reply("üö® N√£o foi poss√≠vel realizar a pesquisa. Tente novamente mais tarde.");
  }
  break;
case "play5":
case "ytbemp3":
{
  if (!text) {
    return loli.sendMessage(
      from,
      { text: `Por favor, forne√ßa o link do v√≠deo do YouTube. Exemplo: ${prefix}ytbmp3 link_do_video` },
      { quoted: info }
    );
  }

  try {
    // Solicitar o √°udio diretamente da API
    const response = await axios.get(`https://tohka.tech/api/dl/ytmp3v2?link=${encodeURIComponent(text)}&apikey=gxhu6`, { responseType: 'arraybuffer' });
    const audioBuffer = response.data.resultado.audio;

    // Verificar se o buffer de √°udio est√° correto
    if (!audioBuffer || audioBuffer.length === 0) {
      return loli.sendMessage(from, { text: "N√£o foi poss√≠vel obter o √°udio solicitado." }, { quoted: info });
    }

    // Enviar o √°udio baixado
    await loli.sendMessage(
      from,
      {
        audio: Buffer.from(audioBuffer),  // Certifique-se de que o √°udio est√° sendo enviado como Buffer
        mimetype: 'audio/mpeg',  // Use o tipo MIME correto para MP3
        fileName: `audio.mp3`,
        ptt: true
      },
      { quoted: info }
    );

  } catch (error) {
    console.error('Erro ao baixar e enviar o √°udio:', error);
    loli.sendMessage(from, { text: "Ocorreu um erro ao processar a solicita√ß√£o." }, { quoted: info });
  }
}
break;
case "play4":
case "ytbemp4":
{
  if (!text) {
    return loli.sendMessage(
      from,
      { text: `Por favor, forne√ßa o link do v√≠deo do YouTube. Exemplo: ${prefix}ytbmp4 link_do_video` },
      { quoted: info }
    );
  }

  try {
    // Solicitar o v√≠deo diretamente da API
    const response = await axios.get(`https://tohka.tech/api/dl/ytmp4v2?link=${encodeURIComponent(text)}&apikey=gxhu6`, { responseType: 'arraybuffer' });
    const videoBuffer = response.data.resultado.video;

    // Verificar se o buffer de v√≠deo est√° correto
    if (!videoBuffer || videoBuffer.length === 0) {
      return loli.sendMessage(from, { text: "N√£o foi poss√≠vel obter o v√≠deo solicitado." }, { quoted: info });
    }

    // Enviar o v√≠deo baixado
    await loli.sendMessage(
      from,
      {
        video: Buffer.from(videoBuffer),  // Certifique-se de que o v√≠deo est√° sendo enviado como Buffer
        mimetype: 'video/mp4',
        fileName: `video.mp4`
      },
      { quoted: info }
    );

  } catch (error) {
    console.error('Erro ao baixar e enviar o v√≠deo:', error);
    loli.sendMessage(from, { text: "Ocorreu um erro ao processar a solicita√ß√£o." }, { quoted: info });
  }
}
break;

case "play2": case "play_audio":
{
  if (!text) {
    return loli.sendMessage(
      from,
      { text: `Por favor, forne√ßa o nome da m√∫sica. Exemplo: ${prefix}play_rapido nome_da_musica` },
      { quoted: info }
    );
  }

  try {
    // Solicitar o √°udio diretamente da API
    const response = await axios.get(`https://tohka.tech/api/dl/play2?nome=${encodeURIComponent(text)}&apikey=gxhu6`, { responseType: 'arraybuffer' });
    const audioBuffer = response.data;

    // Verificar se o buffer de √°udio est√° correto
    if (!audioBuffer || audioBuffer.length === 0) {
      return loli.sendMessage(from, { text: "N√£o foi poss√≠vel obter o √°udio solicitado." }, { quoted: info });
    }

    // Enviar o √°udio baixado
    await loli.sendMessage(
      from,
      {
        audio: Buffer.from(audioBuffer),  // Certifique-se de que o √°udio est√° sendo enviado como Buffer
        mimetype: 'audio/mpeg',  // Use o tipo MIME correto para MP3
        fileName: `${text}.mp3`,
        ptt: true
      },
      { quoted: info }
    );

  } catch (error) {
    console.error('Erro ao baixar e enviar o √°udio:', error);
    loli.sendMessage(from, { text: "Ocorreu um erro ao processar a solicita√ß√£o." }, { quoted: info });
  }
}
break;
case "play_video":
case "play3":
{
  if (!text) {
    return loli.sendMessage(
      from,
      { text: `Por favor, forne√ßa o nome do v√≠deo. Exemplo: ${prefix}playvid nome_do_video` },
      { quoted: info }
    );
  }

  try {
    // Solicitar o v√≠deo diretamente da API
    const response = await axios.get(`https://tohka.tech/api/dl/playv2?nome=${encodeURIComponent(text)}&qualidade=360p&apikey=gxhu6`, { responseType: 'arraybuffer' });
    const videoBuffer = response.data;

    // Verificar se o buffer de v√≠deo est√° correto
    if (!videoBuffer || videoBuffer.length === 0) {
      return loli.sendMessage(from, { text: "N√£o foi poss√≠vel obter o v√≠deo solicitado." }, { quoted: info });
    }

    // Enviar o v√≠deo baixado
    await loli.sendMessage(
      from,
      {
        video: Buffer.from(videoBuffer),  // Certifique-se de que o v√≠deo est√° sendo enviado como Buffer
        mimetype: 'video/mp4',
        fileName: `${text}.mp4`
      },
      { quoted: info }
    );

  } catch (error) {
    console.error('Erro ao baixar e enviar o v√≠deo:', error);
    loli.sendMessage(from, { text: "Ocorreu um erro ao processar a solicita√ß√£o." }, { quoted: info });
  }
}
break;
case 'frases': {
    try {
        if (!q.trim()) return reply(`- Exemplo: ${prefix}frases luz`);

        const response = await fetch(`https://world-ecletix.onrender.com/api/pensador?nome=${encodeURIComponent(q)}`);
        if (!response.ok) return reply("Erro ao buscar as frases.");

        const data = await response.json();

        if (!data.length) return reply("Nenhuma frase encontrada.");

        let message = `*Frases sobre ${q}:*\n\n`;

        data.forEach((fraseInfo) => {
            message += `*Frase:* ${fraseInfo.frase}\n` +
                       `*Compartilhamentos:* ${fraseInfo.compartilhamentos}\n` +
                       `*Imagem:* ${fraseInfo.image}\n\n`;
        });

        return reply(message.trim());

    } catch (e) {
        console.log('Erro no bloco try:', e);
        return reply("Erro ao tentar buscar as frases.");
    }
}
break;
case 'pensador': {
    try {
        const response = await fetch(`https://world-ecletix.onrender.com/api/frasespensador`);
        if (!response.ok) return reply("Erro ao buscar as frases.");

        const data = await response.json();

        if (!data.length) return reply("Nenhuma frase encontrada.");

        let message = "*Frases Inspiradoras:*\n\n";

        data.forEach((frase, index) => {
            message += `*${index + 1}.* ${frase}\n\n`;
        });

        return reply(message.trim());

    } catch (e) {
        console.log('Erro no bloco try:', e);
        return reply("Erro ao tentar buscar as frases.");
    }
}
break;
case 'biblia': case 'b√≠blia': case 'B√≠blia': case 'Biblia':{
    try {
        if (!q.trim()) return reply(`- Exemplo: ${prefix}biblia salmo 91`);

        const response = await fetch(`https://tohka.tech/api/pesquisa/biblia?versiculo=${encodeURIComponent(q)}&apikey=gxhu6`);
        if (!response.ok) return reply("Erro ao buscar os vers√≠culos da B√≠blia.");

        const data = await response.json();

        if (!data.length) return reply("Nenhum vers√≠culo encontrado.");

        const versiculoInfo = data[0];

        const message = `*B√≠blia:* ${versiculoInfo.bible_name}\n` +
                        `*Vers√≠culo:* ${versiculoInfo.versiculo.replace(/\u0003|\u0002/g, '')}`;

        return reply(message);

    } catch (e) {
        console.log('Erro no bloco try:', e);
        return reply("Erro ao tentar buscar o vers√≠culo b√≠blico.");
    }
}
break;
  case 'twitter':
  if (!q) return reply("Voc√™ precisa fornecer o link do post do Twitter.");
  try {
    const { data } = await axios.get(`http://tohka.tech/api/dl/twitter?link=${encodeURIComponent(q)}&apikey=gxhu6`);
    const { url } = data;
    if (!url) {
      return reply("N√£o foi poss√≠vel baixar a postagem do Twitter.");
    }
    conn.sendMessage(from, { image: { url: url } }, {quoted: info});
  } catch (error) {
    console.error("Erro ao baixar postagem do Twitter:", error);
    return reply("Ocorreu um erro ao processar a solicita√ß√£o.");
  }
  break;
  case 'soundcloud':
  if (!q) return reply("Voc√™ precisa fornecer o nome da m√∫sica ou o link do SoundCloud.");
  try {
    const { data } = await axios.get(`https://tohka.tech/api/dl/sound?link=${encodeURIComponent(q)}&apikey=gxhu6`);
    const { url } = data;
    if (!url) {
      return reply("N√£o foi poss√≠vel baixar a m√∫sica do SoundCloud.");
    }
    conn.sendMessage(from, { audio: { url: url }, mimetype: 'audio/mp4', ptt:true}, {quoted: info});
  } catch (error) {
    console.error("Erro ao baixar m√∫sica do SoundCloud:", error);
    return reply("Ocorreu um erro ao processar a solicita√ß√£o.");
  }
  break;
  case 'mediafire_link':
  if (!q) return reply("Voc√™ precisa fornecer o link do arquivo do Mediafire.");
  try {
    const { data } = await axios.get(`https://tohka.tech/api/dl/mediafire?link=${encodeURIComponent(q)}&apikey=gxhu6`);
    const { url } = data;
    if (!url) {
      return reply("N√£o foi poss√≠vel baixar o arquivo do Mediafire.");
    }
    if (mediaType === "video") {
      loli.sendMessage(from, { video: { url: url }, caption: `TOME! ${mediaType.toUpperCase()}` }, { quoted: info });
    } else if (mediaType === "image") {
      loli.sendMessage(from, { image: { url: url }, caption: `TOME! ${mediaType.toUpperCase()}` }, { quoted: info });
    }
  } catch (error) {
    console.error("Erro ao baixar arquivo do Mediafire:", error);
    return reply("Ocorreu um erro ao processar a solicita√ß√£o.");
  }
  break;
 
case 'hentai_neko':
  if (!isPremium) return reply('[‚öôÔ∏èÔ∏è] Comando s√≥ para usu√°rios VIP');

  // Envia uma mensagem informando que a imagem est√° sendo gerada
  reply("üîÑ Gerando a imagem...");

  try {
    // Faz a requisi√ß√£o para a API e obt√©m a imagem como um buffer
    const response = await fetch('https://tohka.tech/api/hentai/random?categoria=neko&apikey=gxhu6');

    // Verifica se a resposta foi bem-sucedida
    if (!response.ok) {
      throw new Error(`Erro na resposta da API: ${response.status} ${response.statusText}`);
    }

    // Obt√©m a imagem diretamente da resposta
    const imageBuffer = await response.buffer();

    // Envia a imagem ao usu√°rio
    loli.sendMessage(sender, { image: imageBuffer, caption: 'Aqui est√° a imagem que voc√™ pediu!' }, { quoted: info });

  } catch (error) {
    console.error("Erro ao obter a imagem:", error);
    reply("üö® N√£o foi poss√≠vel gerar a imagem. Tente novamente mais tarde.");
  }
  break;
case 'hentai_ass':
  if (!isPremium) return reply('[‚öôÔ∏èÔ∏è] Comando s√≥ para usu√°rios VIP');

  // Envia uma mensagem informando que a imagem est√° sendo gerada
  reply("üîÑ Gerando a imagem...");

  try {
    // Faz a requisi√ß√£o para a API e obt√©m a imagem como um buffer
    const response = await fetch('https://tohka.tech/api/hentai/ass?apikey=gxhu6');

    // Verifica se a resposta foi bem-sucedida
    if (!response.ok) {
      throw new Error(`Erro na resposta da API: ${response.status} ${response.statusText}`);
    }

    // Obt√©m a imagem diretamente da resposta
    const imageBuffer = await response.buffer();

    // Envia a imagem ao usu√°rio
    loli.sendMessage(sender, { image: imageBuffer, caption: 'Aqui est√° a imagem que voc√™ pediu!' }, { quoted: info });

  } catch (error) {
    console.error("Erro ao obter a imagem:", error);
    reply("üö® N√£o foi poss√≠vel gerar a imagem. Tente novamente mais tarde.");
  }
  break;
  case 'hentaizinho':
  if (!isPremium) return reply('[‚öôÔ∏èÔ∏è] Comando s√≥ para usu√°rios VIP');

  // Envia uma mensagem informando que a imagem est√° sendo gerada
  reply("üîÑ Gerando a imagem...");

  try {
    // Faz a requisi√ß√£o para a API e obt√©m a imagem como um buffer
    const response = await fetch('https://tohka.tech/api/hentai/hentai?apikey=gxhu6');

    // Verifica se a resposta foi bem-sucedida
    if (!response.ok) {
      throw new Error(`Erro na resposta da API: ${response.status} ${response.statusText}`);
    }

    // Obt√©m a imagem diretamente da resposta
    const imageBuffer = await response.buffer();

    // Envia a imagem ao usu√°rio
    loli.sendMessage(sender, { image: imageBuffer, caption: 'Aqui est√° a imagem que voc√™ pediu!' }, { quoted: info });

  } catch (error) {
    console.error("Erro ao obter a imagem:", error);
    reply("üö® N√£o foi poss√≠vel gerar a imagem. Tente novamente mais tarde.");
  }
  break;
  case 'hentai_milf':
  if (!isPremium) return reply('[‚öôÔ∏èÔ∏è] Comando s√≥ para usu√°rios VIP');

  // Envia uma mensagem informando que a imagem est√° sendo gerada
  reply("üîÑ Gerando a imagem...");

  try {
    // Faz a requisi√ß√£o para a API e obt√©m a imagem como um buffer
    const response = await fetch('https://tohka.tech/api/hentai/milf?apikey=gxhu6');

    // Verifica se a resposta foi bem-sucedida
    if (!response.ok) {
      throw new Error(`Erro na resposta da API: ${response.status} ${response.statusText}`);
    }

    // Obt√©m a imagem diretamente da resposta
    const imageBuffer = await response.buffer();

    // Envia a imagem ao usu√°rio
    loli.sendMessage(sender, { image: imageBuffer, caption: 'Aqui est√° a imagem que voc√™ pediu!' }, { quoted: info });

  } catch (error) {
    console.error("Erro ao obter a imagem:", error);
    reply("üö® N√£o foi poss√≠vel gerar a imagem. Tente novamente mais tarde.");
  }
  break;
  case 'hentai_oral':
  if (!isPremium) return reply('[‚öôÔ∏èÔ∏è] Comando s√≥ para usu√°rios VIP');

  // Envia uma mensagem informando que a imagem est√° sendo gerada
  reply("üîÑ Gerando a imagem...");

  try {
    // Faz a requisi√ß√£o para a API e obt√©m a imagem como um buffer
    const response = await fetch('https://tohka.tech/api/hentai/oral?apikey=gxhu6');

    // Verifica se a resposta foi bem-sucedida
    if (!response.ok) {
      throw new Error(`Erro na resposta da API: ${response.status} ${response.statusText}`);
    }

    // Obt√©m a imagem diretamente da resposta
    const imageBuffer = await response.buffer();

    // Envia a imagem ao usu√°rio
    loli.sendMessage(sender, { image: imageBuffer, caption: 'Aqui est√° a imagem que voc√™ pediu!' }, { quoted: info });

  } catch (error) {
    console.error("Erro ao obter a imagem:", error);
    reply("üö® N√£o foi poss√≠vel gerar a imagem. Tente novamente mais tarde.");
  }
  break;
  case 'hentai_aleatorio':
  if (!isPremium) return reply('[‚öôÔ∏èÔ∏è] Comando s√≥ para usu√°rios VIP');

  // Envia uma mensagem informando que a imagem est√° sendo gerada
  reply("üîÑ Gerando a imagem...");

  try {
    // Faz a requisi√ß√£o para a API e obt√©m a imagem como um buffer
    const response = await fetch('https://tohka.tech/api/hentai/random?categoria=neko&apikey=gxhu6');

    // Verifica se a resposta foi bem-sucedida
    if (!response.ok) {
      throw new Error(`Erro na resposta da API: ${response.status} ${response.statusText}`);
    }

    // Obt√©m a imagem diretamente da resposta
    const imageBuffer = await response.buffer();

    // Envia a imagem ao usu√°rio
    loli.sendMessage(sender, { image: imageBuffer, caption: 'Aqui est√° a imagem que voc√™ pediu!' }, { quoted: info });

  } catch (error) {
    console.error("Erro ao obter a imagem:", error);
    reply("üö® N√£o foi poss√≠vel gerar a imagem. Tente novamente mais tarde.");
  }
  break;
  case 'hentai_paizuri':
  if (!isPremium) return reply('[‚öôÔ∏èÔ∏è] Comando s√≥ para usu√°rios VIP');

  // Envia uma mensagem informando que a imagem est√° sendo gerada
  reply("üîÑ Gerando a imagem...");

  try {
    // Faz a requisi√ß√£o para a API e obt√©m a imagem como um buffer
    const response = await fetch('https://tohka.tech/api/hentai/paizuri?apikey=gxhu6');

    // Verifica se a resposta foi bem-sucedida
    if (!response.ok) {
      throw new Error(`Erro na resposta da API: ${response.status} ${response.statusText}`);
    }

    // Obt√©m a imagem diretamente da resposta
    const imageBuffer = await response.buffer();

    // Envia a imagem ao usu√°rio
    loli.sendMessage(sender, { image: imageBuffer, caption: 'Aqui est√° a imagem que voc√™ pediu!' }, { quoted: info });

  } catch (error) {
    console.error("Erro ao obter a imagem:", error);
    reply("üö® N√£o foi poss√≠vel gerar a imagem. Tente novamente mais tarde.");
  }
  break;
  case 'hentai_ecchi':
  if (!isPremium) return reply('[‚öôÔ∏èÔ∏è] Comando s√≥ para usu√°rios VIP');

  // Envia uma mensagem informando que a imagem est√° sendo gerada
  reply("üîÑ Gerando a imagem...");

  try {
    // Faz a requisi√ß√£o para a API e obt√©m a imagem como um buffer
    const response = await fetch('https://tohka.tech/api/hentai/ecchi?apikey=gxhu6');

    // Verifica se a resposta foi bem-sucedida
    if (!response.ok) {
      throw new Error(`Erro na resposta da API: ${response.status} ${response.statusText}`);
    }

    // Obt√©m a imagem diretamente da resposta
    const imageBuffer = await response.buffer();

    // Envia a imagem ao usu√°rio
    loli.sendMessage(sender, { image: imageBuffer, caption: 'Aqui est√° a imagem que voc√™ pediu!' }, { quoted: info });

  } catch (error) {
    console.error("Erro ao obter a imagem:", error);
    reply("üö® N√£o foi poss√≠vel gerar a imagem. Tente novamente mais tarde.");
  }
  break;
  case 'hentai_ero':
  if (!isPremium) return reply('[‚öôÔ∏èÔ∏è] Comando s√≥ para usu√°rios VIP');

  // Envia uma mensagem informando que a imagem est√° sendo gerada
  reply("üîÑ Gerando a imagem...");

  try {
    // Faz a requisi√ß√£o para a API e obt√©m a imagem como um buffer
    const response = await fetch('https://tohka.tech/api/hentai/ero?apikey=gxhu6');

    // Verifica se a resposta foi bem-sucedida
    if (!response.ok) {
      throw new Error(`Erro na resposta da API: ${response.status} ${response.statusText}`);
    }

    // Obt√©m a imagem diretamente da resposta
    const imageBuffer = await response.buffer();

    // Envia a imagem ao usu√°rio
    loli.sendMessage(sender, { image: imageBuffer, caption: 'Aqui est√° a imagem que voc√™ pediu!' }, { quoted: info });

  } catch (error) {
    console.error("Erro ao obter a imagem:", error);
    reply("üö® N√£o foi poss√≠vel gerar a imagem. Tente novamente mais tarde.");
  }
  break;
                case "cosplay":
                case "waifu":
                case "waifu2":
                case "shota":
                case "loli":
                case "yotsuba":
                case "shinomiya":
                case "yumeko":
                case "tejina":
                case "chiho":
                case "shizuka":
                case "boruto":
                case "kagori":
                case "kaga":
                case "kotori":
                case "mikasa":
                case "akiyama":
                case "hinata":
                case "minato":
                case "naruto":
                case "nezuko":
                case "yuki":
                case "hestia":
                case "emilia":
                case "itachi":
                case "elaina":
                case "madara":
                case "sasuke":
                case "deidara":
                case "sakura":
                case "tsunade":
  // Envia uma mensagem inicial informando que a busca est√° sendo processada
  loli.sendMessage(sender, { text: `üîÑ Processando sua solicita√ß√£o, ${pushname}. Por favor, aguarde um momento...` });

  try {
    // Envia uma rea√ß√£o para indicar que o processamento est√° em andamento
    loli.sendMessage(sender, { react: { text: 'üïö', key: info.key } });

    fetch(encodeURI(`https://clover-t-bot-r0wt.onrender.com/nime/${command}?username=comefemea&key=768934`))
      .then(response => {
        if (!response.ok) {
          throw new Error(`Network response was not ok: ${response.statusText}`);
        }
        return response.json();
      })
      .then(data => {
        console.log("API Response:", data); // Log da resposta da API para depura√ß√£o
        var resultado = data.url;
        if (!resultado) {
          throw new Error("URL da imagem n√£o encontrada na resposta da API");
        }

        // Configura√ß√£o da mensagem com a imagem
        let buttonMessage4 = {
          image: { url: resultado },
          caption: `üèï Ol√° ${pushname}, aqui est√° sua imagem üé≤`,
          footer: '',
          headerType: 4
        };

        // Envia a mensagem com a imagem
        loli.sendMessage(sender, buttonMessage4, { quoted: info })
          .catch(err => {
            console.error("Erro ao enviar a mensagem:", err); // Adiciona log de erro ao enviar mensagem
            loli.sendMessage(sender, { text: "üö® N√£o foi poss√≠vel enviar a imagem. Tente novamente mais tarde." });
          });
      })
      .catch(err => {
        console.error("Erro ao buscar a imagem:", err); // Adiciona log de erro ao buscar imagem
        loli.sendMessage(sender, { text: "üö® N√£o foi poss√≠vel encontrar a imagem. Tente novamente mais tarde." });
      });
  } catch (e) {
    console.error("Erro no bloco try:", e); // Adiciona log de erro no bloco try
    loli.sendMessage(sender, { text: "üö® N√£o foi poss√≠vel encontrar a foto. Tente novamente mais tarde." });
  }
  break;
                case 'ahegao':
                case 'ass':
                case 'bdsm':
                case 'blowjob':
                case 'cuckold':
                case 'cum':
                case 'ero':
                case 'kasedaiki':
                case 'femdom':
                case 'foot':
                case 'gangbang':
                case 'glasses':
                case 'jahy':
                case 'manga':
                case 'masturbation':
                case 'neko':
                case 'orgy':
                case 'panties':
                case 'pussy':
                case 'neko2':
                case "neko":
                case 'tentacles':
                case 'thighs':
                case 'yuri':
                case 'zettai':
  // Envia uma mensagem inicial informando que a busca est√° sendo processada
  loli.sendMessage(sender, { text: `üîÑ Processando sua solicita√ß√£o, ${pushname}. Por favor, aguarde um momento...` });

  try {
    // Envia uma rea√ß√£o para indicar que o processamento est√° em andamento
    loli.sendMessage(sender, { react: { text: 'üïö', key: info.key } });

    fetch(encodeURI(`https://clover-t-bot-r0wt.onrender.com/nsfw/${command}?username=comefemea&key=768934`))
      .then(response => {
        if (!response.ok) {
          throw new Error(`Network response was not ok: ${response.statusText}`);
        }
        return response.json();
      })
      .then(data => {
        console.log("API Response:", data); // Log da resposta da API para depura√ß√£o
        var resultado = data.url;
        if (!resultado) {
          throw new Error("URL da imagem n√£o encontrada na resposta da API");
        }

        // Configura√ß√£o da mensagem com a imagem
        let buttonMessage4 = {
          image: { url: resultado },
          caption: `üèï Ol√° ${pushname}, aqui est√° sua imagem üé≤`,
          footer: '',
          headerType: 4
        };

        // Envia a mensagem com a imagem
        loli.sendMessage(sender, buttonMessage4, { quoted: info })
          .catch(err => {
            console.error("Erro ao enviar a mensagem:", err); // Adiciona log de erro ao enviar mensagem
            loli.sendMessage(sender, { text: "üö® N√£o foi poss√≠vel enviar a imagem. Tente novamente mais tarde." });
          });
      })
      .catch(err => {
        console.error("Erro ao buscar a imagem:", err); // Adiciona log de erro ao buscar imagem
        loli.sendMessage(sender, { text: "üö® N√£o foi poss√≠vel encontrar a imagem. Tente novamente mais tarde." });
      });
  } catch (e) {
    console.error("Erro no bloco try:", e); // Adiciona log de erro no bloco try
    loli.sendMessage(sender, { text: "üö® N√£o foi poss√≠vel encontrar a foto. Tente novamente mais tarde." });
  }
  break;
case "tiktok_audio":
{
  if (!text) {
    return loli.sendMessage(
      from,
      { text: `Por favor, forne√ßa o link do v√≠deo TikTok. Exemplo: ${prefix}tiktok_audio https://www.tiktok.com/@granitayt/video/7383381752024272133` },
      { quoted: info }
    );
  }

  try {
    // Solicitar o √°udio diretamente da API
    const response = await axios.get(`https://world-ecletix.onrender.com/api/tiktok?query=${encodeURIComponent(text)}`);
    const result = response.data;

    // Verificar se a resposta cont√©m a URL do √°udio
    if (!result || !result.audio) {
      return loli.sendMessage(from, { text: "N√£o foi poss√≠vel obter o √°udio do TikTok." }, { quoted: info });
    }

    // Extrair a URL do √°udio
    const audioUrl = result.audio;

    // Baixar o √°udio do link
    const { data: audioBuffer } = await axios.get(audioUrl, { responseType: 'arraybuffer' });

    // Enviar o √°udio baixado
    await loli.sendMessage(
      from,
      {
        audio: Buffer.from(audioBuffer),  // Certifique-se de que o √°udio est√° sendo enviado como Buffer
        mimetype: 'audio/mpeg',
        fileName: `audio.mp3`,
        ptt: true
      },
      { quoted: info }
    );

  } catch (error) {
    console.error('Erro ao baixar e enviar o √°udio:', error);
    loli.sendMessage(from, { text: "Ocorreu um erro ao processar a solicita√ß√£o." }, { quoted: info });
  }
}
break;

case "tiktok_video":
{
  if (!text) {
    return loli.sendMessage(
      from,
      { text: `Por favor, forne√ßa o link do v√≠deo TikTok. Exemplo: ${prefix}tiktok_video https://www.tiktok.com/@granitayt/video/7383381752024272133` },
      { quoted: info }
    );
  }

  try {
    // Solicitar o v√≠deo diretamente da API
    const response = await axios.get(`https://world-ecletix.onrender.com/api/tiktok?query=${encodeURIComponent(text)}`);
    const result = response.data;

    // Verificar se a resposta cont√©m a URL do v√≠deo
    if (!result || !result.videoOriginal) {
      return loli.sendMessage(from, { text: "N√£o foi poss√≠vel obter o v√≠deo do TikTok." }, { quoted: info });
    }

    // Extrair a URL do v√≠deo
    const videoUrl = result.videoOriginal;

    // Baixar o v√≠deo do link
    const { data: videoBuffer } = await axios.get(videoUrl, { responseType: 'arraybuffer' });

    // Enviar o v√≠deo baixado
    await loli.sendMessage(
      from,
      {
        video: Buffer.from(videoBuffer),  // Certifique-se de que o v√≠deo est√° sendo enviado como Buffer
        mimetype: 'video/mp4',
        fileName: `video.mp4`
      },
      { quoted: info }
    );

  } catch (error) {
    console.error('Erro ao baixar e enviar o v√≠deo:', error);
    loli.sendMessage(from, { text: "Ocorreu um erro ao processar a solicita√ß√£o." }, { quoted: info });
  }
}
break;
case "tiktokvd": {
    if (q.length < 1) return reply("Por favor, coloque o link do v√≠deo ap√≥s o comando.");
    const url = q;
    const apiUrl = `https://clover-t-bot-r0wt.onrender.com/download/tiktok?url=${url}&key=768934&username=comefemea`;
    fetch(apiUrl)
      .then(response => response.json())
      .then(data => {
        if (data.videoSemWt) {
          loli.sendMessage(from, {
            video: { url: data.videoSemWt },
            mimetype: 'video/mp4'
          });
        } else {
          return reply("N√£o foi poss√≠vel obter o v√≠deo. Verifique o link e tente novamente.");
        }
      })
      .catch(error => {
        console.error(error);
        return reply("Ocorreu um erro ao processar o pedido. Tente novamente mais tarde.");
      });
} 
break;
case 'wallpaper1': 
  if (!isPremium) return reply('[‚öôÔ∏èÔ∏è]comando so pra usu√°rios vip');
  reply("„Äåüê∏„Äçja to enviando no teu pv"); 
  google = await fetchJson(`https://clover-t-bot-r0wt.onrender.com/wallpaper/satanic?key=768934&username=comefemea`);
  loli.sendMessage(sender, { image: { url: google.url }}, { quoted: info });
  break;

case 'wallpaper2': 
  if (!isPremium) return reply('[‚öôÔ∏èÔ∏è]comando so pra usu√°rios vip');
  reply("„Äåüê∏„Äçja to enviando no teu pv"); 
  google = await fetchJson(`https://clover-t-bot-r0wt.onrender.com/wallpaper/cyberspace?key=768934&username=comefemea`);
  loli.sendMessage(sender, { image: { url: google.url }}, { quoted: info });
  break;

case 'wallpaper3': 
  if (!isPremium) return reply('[‚öôÔ∏èÔ∏è]comando so pra usu√°rios vip');
  reply("„Äåüê∏„Äçja to enviando no teu pv"); 
  google = await fetchJson(`https://clover-t-bot-r0wt.onrender.com/wallpaper/gaming?key=768934&username=comefemea`);
  loli.sendMessage(sender, { image: { url: google.url }}, { quoted: info });
  break;

case 'wallpaper4': 
  if (!isPremium) return reply('[‚öôÔ∏èÔ∏è]comando so pra usu√°rios vip');
  reply("„Äåüê∏„Äçja to enviando no teu pv"); 
  google = await fetchJson(`https://clover-t-bot-r0wt.onrender.com/wallpaper/wallpapertec?key=768934&username=comefemea`);
  loli.sendMessage(sender, { image: { url: google.url }}, { quoted: info });
  break;

case 'wallpaper5': 
  if (!isPremium) return reply('[‚öôÔ∏èÔ∏è]comando so pra usu√°rios vip');
  reply("„Äåüê∏„Äçja to enviando no teu pv"); 
  google = await fetchJson(`http://clover-t-bot-r0wt.onrender.com/wallpaper/wallpapertec?key=768934&username=comefemea`);
  loli.sendMessage(sender, { image: { url: google.url }}, { quoted: info });
  break;

case 'wallpaper6': 
  if (!isPremium) return reply('[‚öôÔ∏èÔ∏è]comando so pra usu√°rios vip');
  reply("„Äåüê∏„Äçja to enviando no teu pv"); 
  google = await fetchJson(`https://clover-t-bot-r0wt.onrender.com/wallpaper/pubg?key=768934&username=comefemea`);
  loli.sendMessage(sender, { image: { url: google.url }}, { quoted: info });
  break;

case 'wallpaper7':
  if (!isPremium) return reply('[‚öôÔ∏èÔ∏è]comando so pra usu√°rios vip');
  reply("„Äåüê∏„Äçja to enviando no teu pv"); 
  google = await fetchJson(`https://clover-t-bot-r0wt.onrender.com/wallpaper/aesthetic?key=768934&username=comefemea`);
  loli.sendMessage(sender, { image: { url: google.url }}, { quoted: info });
  break;

case 'wallpaper8': 
  if (!isPremium) return reply('[‚öôÔ∏èÔ∏è]comando so pra usu√°rios vip');
  reply("„Äåüê∏„Äçja to enviando no teu pv"); 
  google = await fetchJson(`http://clover-t-bot-r0wt.onrender.com/wallpaper/ppcouple?key=768934&username=comefemea`);
  loli.sendMessage(sender, { image: { url: google.url }}, { quoted: info });
  break;
  case 'wallpaper9': 
  if (!isPremium) return reply('[‚öôÔ∏èÔ∏è]comando so pra usu√°rios vip');
  reply("„Äåüê∏„Äçja to enviando no teu pv"); 
  google = await fetchJson(`https://clover-t-bot-r0wt.onrender.com/nime/anime?key=768934&username=comefemea`);
  loli.sendMessage(sender, { image: { url: google.url }}, { quoted: info });
  break;
  
case "tiktokad": {
    if (q.length < 1) return reply("Por favor, coloque o link do v√≠deo ap√≥s o comando.");
    const url = q;
    const apiUrl = `https://clover-t-bot-r0wt.onrender.com/download/tiktok?url=${url}&key=768934&username=comefemea`;
    fetch(apiUrl)
      .then(response => response.json())
      .then(data => {
        if (data.videoSemWt) {
          loli.sendMessage(from, {
            audio: { url: data.audio },
            mimetype: 'audio/mpeg'
          });
        } else {
          reply("N√£o foi poss√≠vel obter o v√≠deo. Verifique o link e tente novamente.");
        }
      })
      .catch(error => {
        console.error(error);
        return reply("Ocorreu um erro ao processar o pedido. Tente novamente mais tarde.");
      });
} 
break;
  
case "play110":
  if (!q) return reply('Coloque o nome da m√∫sica tamb√©m');
  reply("„Äåüçâ„ÄçCalmo a√≠, estou procurando..."); 
  fetch(`https://clover-t-bot-r0wt.onrender.com/yt/playmp4?query=${q}&key=768934&username=comefemea`).then(response => response.json()).then(ytbr => {

    loli.sendMessage(from, { image: { url: ytbr.thumb }, caption: `„Äåüë§„ÄçNome: ${ytbr.title}\n„Äåüì∫„ÄçCanal: ${ytbr.channel}\n„Äåüìà„ÄçVisualiza√ß√µes: ${ytbr.views}` });
    loli.sendMessage(from, { audio: { url: ytbr.url }, mimetype: 'audio/mpeg' });

  });
  break;
case "story":
{
  if (!text) {
    return reply("Voc√™ precisa fornecer o URL da hist√≥ria do Instagram.");
  }

  try {
    const res = await fetchJson(`https://api-aswin-sparky.koyeb.app/api/downloader/story?url=${text}`);
    //by luan

    if (!res || !res.data) {
      return reply("Nenhuma hist√≥ria encontrada ou resposta inv√°lida da API.");
    }

    const mediaArray = res.data;
    for (const mediaData of mediaArray) {
      const mediaType = mediaData.type;
      const mediaURL = mediaData.url;
      let cap = `Aqui est√° o story do Instagram! ${mediaType.toUpperCase()}`;

      if (mediaType === "video") {
        await loli.sendMessage(from, { video: { url: mediaURL }, caption: cap }, { quoted: m });
      } else if (mediaType === "image") {
        await loli.sendMessage(from, { image: { url: mediaURL }, caption: cap }, { quoted: m });
      }
    }
  } catch (error) {
    console.error(error);
    return reply("Ocorreu um erro ao processar a solicita√ß√£o.");
  }
}
break;
case "audio":
{
    if (!text) {
        await loli.sendMessage(
            from,
            { audio: { url: './assets/voz/aguarde.mp3' }, mimetype: 'audio/mp4' }, // Envio da mensagem de √°udio "aguarde"
            { quoted: info }
        );
        return loli.sendMessage(
            from,
            { text: `Por favor, forne√ßa o termo de busca. Exemplo: ${prefix}audio termo_da_busca` },
            { quoted: info }
        );
    }

    try {
        // Fazer a solicita√ß√£o √† API de √°udio
        const response = await axios.get(`https://world-ecletix.onrender.com/api/audiomeme?query=${encodeURIComponent(text)}`);
        const result = response.data;

        // Verificar se a resposta cont√©m as informa√ß√µes necess√°rias
        if (!result || !result.status || !result.results || result.results.length === 0) {
            await loli.sendMessage(from, { audio: { url: './assets/voz/algodeuerrado.mp3' }, mimetype: 'audio/mp4' }, { quoted: info });
            return loli.sendMessage(from, { text: "N√£o foram encontrados resultados para o termo fornecido." }, { quoted: info });
        }

        // Pegar a primeira op√ß√£o de √°udio da lista
        const firstAudio = result.results[0];
        const audioUrl = firstAudio.audio;
        const title = firstAudio.title;
        console.log(`[AUDIO] Primeiro √°udio encontrado: ${title}, URL: ${audioUrl}`);

        // Baixar o √°udio do link como um buffer
        const audioResponse = await axios.get(audioUrl, { responseType: 'arraybuffer' });

        // Verificar se o buffer de √°udio n√£o est√° vazio
        if (!audioResponse.data || audioResponse.data.length === 0) {
            throw new Error('√Åudio n√£o foi baixado corretamente.');
        }

        // Enviar o √°udio baixado ao usu√°rio
        await loli.sendMessage(
            from,
            {
                audio: Buffer.from(audioResponse.data),  // Usar o buffer diretamente
                mimetype: 'audio/mpeg',  // Use o tipo MIME correto para MP3
                fileName: `${title}.mp3`,  // Nome do arquivo
                ptt: true  // Enviar como mensagem de voz se desejado
            },
            { quoted: info }
        );

    } catch (error) {
        console.error('Erro ao processar a solicita√ß√£o:', error);
        await loli.sendMessage(from, { audio: { url: './assets/voz/algodeuerrado.mp3' }, mimetype: 'audio/mp4' }, { quoted: info });
        loli.sendMessage(from, { text: "Ocorreu um erro ao processar a solicita√ß√£o." }, { quoted: info });
    }
}
break;
case "audiomeme":
{
    if (!text) {
        return reply("Voc√™ precisa fornecer um termo de busca para consulta.");
    }

    try {
        // Extrair o termo de busca da mensagem de texto
        const query = text.trim();
        if (query.length === 0) {
            return reply("Por favor, forne√ßa um termo v√°lido para a busca.");
        }

        // Fazer a solicita√ß√£o √† API com o termo de busca din√¢mico
        const res = await fetchJson(`https://world-ecletix.onrender.com/api/audiomeme?query=${encodeURIComponent(query)}`);
        //by luan

        // Verificar se a resposta da API est√° no formato correto e cont√©m resultados
        if (!res || !res.status || !res.results || res.results.length === 0) {
            return reply("Nenhum dado encontrado para o termo de busca fornecido.");
        }

        // Montar a mensagem com os resultados
        let message = `**Resultados para a busca "${query}":**\n\n`;
        res.results.forEach((item, index) => {
            message += `${index + 1}. *${item.title}*\nüîä ${item.audio}\n\n`;
        });

        // Enviar a mensagem formatada com os resultados
        reply(message);
    } catch (error) {
        console.error(error);
        return reply("Ocorreu um erro ao processar a solicita√ß√£o.");
    }
}
break;
case 'volei': 
    try {
        const { data: nunuvoleicudataxw } = await axios.get('https://webvolei.com.br/')
        const nunuvoleicuhtmlkl = cheerio.load(nunuvoleicudataxw)
        let nunuvoleiculistgp = []
        nunuvoleicuhtmlkl('li.articles-box-item').each((index, nunuvoleicuelementovb) => {
            const nunuvoleicutitulorb = nunuvoleicuhtmlkl(nunuvoleicuelementovb).find('h3.article-title a').text().trim()
            const nunuvoleicudescxv = nunuvoleicuhtmlkl(nunuvoleicuelementovb).find('.article-meta-info .date').text().trim()
            const nunuvoleiculinkbw = nunuvoleicuhtmlkl(nunuvoleicuelementovb).find('h3.article-title a').attr('href')
            const nunuvoleicuimgmr = nunuvoleicuhtmlkl(nunuvoleicuelementovb).find('.article-thumb img').attr('src')

            if (nunuvoleicutitulorb && nunuvoleiculinkbw) {
                nunuvoleiculistgp.push({
                    nunuvoleicutitulorb,
                    nunuvoleicudescxv,
                    nunuvoleiculinkbw: `${nunuvoleiculinkbw}`,
                    nunuvoleicuimgmr
                })
            }
        })

        nunuvoleiculistgp = nunuvoleiculistgp.slice(0, 5)
        
        let nunuvoleicumsgqk = 'üèê *√öltimas Not√≠cias do V√¥lei:*\n\n'
        nunuvoleiculistgp.forEach((nunuvoleicunoticiasbx, index) => {
            nunuvoleicumsgqk += `*${index + 1}. ${nunuvoleicunoticiasbx.nunuvoleicutitulorb}*\n` +
                            `üìÖ ${nunuvoleicunoticiasbx.nunuvoleicudescxv}\n` +
                            `üîó ${nunuvoleicunoticiasbx.nunuvoleiculinkbw}\n`
            nunuvoleicumsgqk += '\n'
        })
        if (nunuvoleiculistgp.length > 0 && nunuvoleiculistgp[0].nunuvoleicuimgmr) {
            await loli.sendMessage(from, { 
                image: { url: nunuvoleiculistgp[0].nunuvoleicuimgmr }, 
                caption: nunuvoleicumsgqk 
            }, { quoted: info })
        } else {
            await loli.sendMessage(from, { text: nunuvoleicumsgqk }, { quoted: info })
        }
    } catch (nunuvoleicuerrordk) {
        console.error('Erro ao buscar not√≠cias de V√¥lei:', nunuvoleicuerrordk)
        reply('‚ö†Ô∏è N√£o foi poss√≠vel buscar as not√≠cias de V√¥lei no momento')
    }
    break
 case 'basquetenews': 
    try {
        const { data: nunucubasquetehtmlakjs } = await axios.get('https://noticiasdebasquete.com.br/noticias-basquete/')
        const nunucubasqueteparserzzx = cheerio.load(nunucubasquetehtmlakjs)
        let nunucubasquetenoticiasqfj = []
        
        nunucubasqueteparserzzx('.listing-item').each((index, nunucubasquetenoticiaxfz) => {
            const nunucubasquetetitlezby = nunucubasqueteparserzzx(nunucubasquetenoticiaxfz).find('.post-title').text().trim()
            const nunucubasquetesummaryczx = nunucubasqueteparserzzx(nunucubasquetenoticiaxfz).find('.post-summary').text().trim()
            const nunucubasquetelinkqvf = nunucubasqueteparserzzx(nunucubasquetenoticiaxfz).find('a').attr('href')
            const nunucubasqueteimagecss = nunucubasqueteparserzzx(nunucubasquetenoticiaxfz).find('.img-holder').css('background-image')

            let nunucubasqueteimagecbv = ''
            if (nunucubasqueteimagecss && nunucubasqueteimagecss.match(/urlÓÄÅ(.*?)ÓÄÅ/)) {
                nunucubasqueteimagecbv = nunucubasqueteimagecss.match(/urlÓÄÅ(.*?)ÓÄÅ/)[1]
            }

            if (nunucubasquetetitlezby && nunucubasquetelinkqvf) {
                nunucubasquetenoticiasqfj.push({
                    nunucubasquetetitlezby,
                    nunucubasquetesummaryczx,
                    nunucubasquetelinkqvf: `${nunucubasquetelinkqvf}`,
                    nunucubasqueteimagecbv
                })
            }
        })

        nunucubasquetenoticiasqfj = nunucubasquetenoticiasqfj.slice(0, 5)
        
        let nunucubasquetemensagemazw = 'üèÄ *√öltimas Not√≠cias do Basquete:*\n\n'
        nunucubasquetenoticiasqfj.forEach((nunucubasqueteitemwby, index) => {
            nunucubasquetemensagemazw += `*${index + 1}. ${nunucubasqueteitemwby.nunucubasquetetitlezby}*\n` +
                            `üîó ${nunucubasqueteitemwby.nunucubasquetelinkqvf}\n\n`
        })

        if (nunucubasquetenoticiasqfj.length > 0 && nunucubasquetenoticiasqfj[0].nunucubasqueteimagecbv) {
            await loli.sendMessage(from, { 
                image: { url: nunucubasquetenoticiasqfj[0].nunucubasqueteimagecbv }, 
                caption: nunucubasquetemensagemazw 
            }, { quoted: info })
        } else {
            await loli.sendMessage(from, { text: nunucubasquetemensagemazw }, { quoted: info })
        }
    } catch (nunucubasqueteerroqwe) {
        console.error('Erro ao buscar not√≠cias do Basquete:', nunucubasqueteerroqwe)
        reply('‚ö†Ô∏è N√£o foi poss√≠vel buscar as not√≠cias de basquete no momento.')
    }
    break;
    
case 'significado':
    if (args.length == 0) return await reply('Cad√™ o nome o qual voc√™ deseja ver o significado?');
    
    const nome = encodeURIComponent(args.join(' ')); // Nome formatado para a URL
    try {
        const response = await axios.get(`https://world-ecletix.onrender.com/api/significadodonome?nome=${nome}`);
        const res = response.data;

        if (!res.significado) {
            return await reply('Nenhum significado encontrado para o nome fornecido.');
        }

        const { significado, origem, genero, imageUrl } = res;

        // Baixa a imagem do nome como buffer
        const fotoNome = await axios.get(imageUrl, { responseType: 'arraybuffer' });
        const imageBuffer = Buffer.from(fotoNome.data, 'binary');

        // Formata a mensagem com as informa√ß√µes do nome
        const message = `*Nome:* ${nome}\n` +
                        `*Significado:* ${significado}\n` +
                        `*Origem:* ${origem}\n` +
                        `*G√™nero:* ${genero || 'N√£o especificado'}\n`;

        // Envia a imagem com a legenda formatada
        await loli.sendMessage(from, { image: imageBuffer, caption: message }).catch((e) => {
            console.log(e);
            return reply('Ocorreu um erro ao enviar a imagem ou as informa√ß√µes.');
        });
    } catch (error) {
        console.error(error);
        return reply('Ocorreu um erro ao processar a solicita√ß√£o.');
    }
break;

//consultas by world ecletix & lady-botv4 
case "telefone": {
    if (!text) {
        return reply("Voc√™ precisa fornecer um n√∫mero de telefone para consulta.");
    }

    try {
        const telefone = text.replace(/\D/g, '');
        if (telefone.length < 10 || telefone.length > 11) {
            return reply("Por favor, forne√ßa um n√∫mero de telefone v√°lido com 10 ou 11 d√≠gitos.");
        }

        const res = await fetchJson(`https://world-ecletix.onrender.com/api/consultas?type=telefone&query=${telefone}`);
        
        if (!res || !res.status || !res.resultado) {
            return reply("Nenhum dado encontrado para o telefone fornecido.");
        }

        // Extraindo informa√ß√µes da resposta da API
        const { telefone: telefoneInfo, nome, operadora, "cpf/cnpj": cpfInfo } = res.resultado;

        // Montando a mensagem de resposta
        const message = `**Informa√ß√µes do Telefone ${telefoneInfo}:**\n` +
                        `- Nome: ${nome}\n` +
                        `- CPF/CNPJ: ${cpfInfo}\n` +
                        `- Operadora: ${operadora || "Desconhecida"}\n` + 
                        `- Usu√°rio: ${pushname || "Desconhecido"}\n` +
                        `- Bot: ${botName || "Desconhecido"}`;

        reply(message);
    } catch (error) {
        console.error("Erro ao processar a solicita√ß√£o:", error);
        return reply("Ocorreu um erro ao processar a solicita√ß√£o. Por favor, tente novamente mais tarde.");
    }
}
break;
case "nome": {
    if (!text) {
        return reply("Voc√™ precisa fornecer um nome para consulta.");
    }

    try {
        const nome = text.trim();
        const res = await fetchJson(`https://world-ecletix.onrender.com/api/consultas?type=nome&query=${encodeURIComponent(nome)}`);
        
        if (!res || !res.status || !res.resultado) {
            return reply("Nenhum dado encontrado para o nome fornecido.");
        }

        // Extraindo informa√ß√µes da resposta da API
        const { cpf, nome: nomeCompleto, sexo, nascimento } = res.resultado;

        // Montando a mensagem de resposta
        const message = `**Informa√ß√µes sobre o nome ${nomeCompleto}:**\n` +
                        `- CPF: ${cpf || "N√£o dispon√≠vel"}\n` +
                        `- Data de Nascimento: ${nascimento || "N√£o dispon√≠vel"}\n` +
                        `- Sexo: ${sexo || "N√£o especificado"}\n` +
                        `- Usu√°rio: ${pushname || "Desconhecido"}\n` +
                        `- Bot: ${botName || "Desconhecido"}`;

        reply(message);
    } catch (error) {
        console.error("Erro ao processar a solicita√ß√£o:", error);
        return reply("Ocorreu um erro ao processar a solicita√ß√£o. Por favor, tente novamente mais tarde.");
    }
}
break;
case "ip":
{
    if (!text) {
        return reply("Voc√™ precisa fornecer um IP para consulta.");
    }

    try {
        const ip = text.trim();
        const res = await fetchJson(`https://ipwhois.app/json/${ip}`);
        //by luan

        if (!res || !res.success) {
            return reply("Nenhum dado encontrado para o IP fornecido.");
        }

        const { ip: ipInfo, continent, country, country_code, country_flag, region, city, latitude, longitude, asn, org, isp, timezone, currency, currency_code, currency_symbol, usuario, bot } = res;

        const message = `**Informa√ß√µes do IP ${ipInfo}:**\n` +
                        `- Continente: ${continent}\n` +
                        `- Pa√≠s: ${country} (${country_code})\n` +
                        `- Regi√£o: ${region}\n` +
                        `- Cidade: ${city}\n` +
                        `- Latitude: ${latitude}\n` +
                        `- Longitude: ${longitude}\n` +
                        `- ASN: ${asn}\n` +
                        `- Organiza√ß√£o: ${org}\n` +
                        `- ISP: ${isp}\n` +
                        `- Fuso Hor√°rio: ${timezone}\n` +
                        `- Moeda: ${currency} (${currency_code})\n` +
                        `- S√≠mbolo da Moeda: ${currency_symbol}\n` +
                        `- Usu√°rio: ${pushname}\n` +
                        `- Bot: ${botName}`;

        reply(message);
    } catch (error) {
        console.error(error);
        return reply("Ocorreu um erro ao processar a solicita√ß√£o.");
    }
}
break;
case "cnpj":
{
    if (!text) {
        return reply("Voc√™ precisa fornecer um CNPJ para consulta.");
    }

    try {
        const cnpj = text.replace(/\D/g, '');
        if (cnpj.length !== 14) {
            return reply("Por favor, forne√ßa um CNPJ v√°lido com 14 d√≠gitos.");
        }

        const res = await fetchJson(`https://brasilapi.com.br/api/cnpj/v1/${cnpj}`);
        //by luan

        if (!res || !res.cnpj) {
            return reply("Nenhum dado encontrado para o CNPJ fornecido.");
        }

        const { razao_social, nome_fantasia, cnpj: cnpjResult, logradouro, numero, bairro, municipio, uf, cep, ddd_telefone_1, email, capital_social, natureza_juridica, descricao_situacao_cadastral, qsa, usuario, bot } = res;

        let sociosInfo = qsa.map(socio => `- Nome do s√≥cio: ${socio.nome_socio}\n  Qualifica√ß√£o: ${socio.qualificacao_socio}`).join('\n');

        const message = `**Informa√ß√µes do CNPJ ${cnpjResult}:**\n` +
                        `- Raz√£o Social: ${razao_social}\n` +
                        `- Nome Fantasia: ${nome_fantasia || "N√£o informado"}\n` +
                        `- Logradouro: ${logradouro}, ${numero}\n` +
                        `- Bairro: ${bairro}\n` +
                        `- Cidade: ${municipio} - ${uf}\n` +
                        `- CEP: ${cep}\n` +
                        `- Telefone: ${ddd_telefone_1}\n` +
                        `- Email: ${email || "N√£o informado"}\n` +
                        `- Capital Social: R$ ${capital_social.toFixed(2)}\n` +
                        `- Natureza Jur√≠dica: ${natureza_juridica}\n` +
                        `- Situa√ß√£o Cadastral: ${descricao_situacao_cadastral}\n\n` +
                        `**Quadro Societ√°rio:**\n${sociosInfo}\n` +
                        `- Usu√°rio: ${pushname}\n` +
                        `- Bot: ${botName}`;

        reply(message);
    } catch (error) {
        console.error(error);
        return reply("Ocorreu um erro ao processar a solicita√ß√£o.");
    }
}
break;
case "cpf":
{
    if (!text) {
        return reply("Voc√™ precisa fornecer um CPF para consulta.");
    }

    try {
        // Remove caracteres n√£o num√©ricos do CPF fornecido
        const cpf = text.replace(/\D/g, '');
        if (cpf.length !== 11) {
            return reply("Por favor, forne√ßa um CPF v√°lido com 11 d√≠gitos.");
        }

        // Faz a requisi√ß√£o para a API de consulta por CPF
        const res = await fetchJson(`https://world-ecletix.onrender.com/api/consultas?type=cpf&query=${cpf}`);
        //by luan

        // Verifica se a resposta cont√©m dados esperados
        if (!res || !res.status) {
            return reply("Nenhum dado encontrado para o CPF fornecido.");
        }

        // Extrai as informa√ß√µes da resposta
        const { "üßë‚Äçüíº nome": nome, "üöª sexo": sexo, "üéÇ nascimento": nascimento, "üë©‚Äçüëß m√£e": mae, "üÜî cpf": cpfFormatado } = res.resultado;

        // Prepara a mensagem com as informa√ß√µes do CPF
        const message = `**Informa√ß√µes do CPF ${cpfFormatado}:**\n` +
                        `- Nome: ${nome}\n` +
                        `- Sexo: ${sexo}\n` +
                        `- Nascimento: ${nascimento}\n` +
                        `- M√£e: ${mae}\n` +
                        `- CPF: ${cpfFormatado}`;

        reply(message);
    } catch (error) {
        console.error(error);
        return reply("Ocorreu um erro ao processar a solicita√ß√£o.");
    }
}
break;
case "ddd":
{
    if (!text) {
        return reply("Voc√™ precisa fornecer um DDD para consulta.");
    }

    try {
        const ddd = text.replace(/\D/g, '');
        if (ddd.length !== 2) {
            return reply("Por favor, forne√ßa um DDD v√°lido com 2 d√≠gitos.");
        }

        const res = await fetchJson(`https://brasilapi.com.br/api/ddd/v1/${ddd}`);
        //by luan

        if (!res || !res.state) {
            return reply("Nenhum dado encontrado para o DDD fornecido.");
        }

        const { state, cities } = res;

        const message = `**Informa√ß√µes do DDD ${ddd}:**\n` +
                        `- Estado: ${state}\n` +
                        `- Cidades:\n${cities.join(', ')}`;

        reply(message);
    } catch (error) {
        console.error(error);
        return reply("Ocorreu um erro ao processar a solicita√ß√£o.");
    }
}
break;
case "cep":
{
    if (!text) {
        return reply("Voc√™ precisa fornecer um CEP para consulta.");
    }

    try {
        // Remove caracteres n√£o num√©ricos do CEP fornecido
        const cepInput = text.replace(/\D/g, '');
        if (cepInput.length !== 8) {
            return reply("Por favor, forne√ßa um CEP v√°lido com 8 d√≠gitos.");
        }

        const res = await fetchJson(`https://brasilapi.com.br/api/cep/v2/${cepInput}`);
        //by luan

        // Verifica se a resposta cont√©m dados esperados
        if (!res || !res.cep) {
            return reply("Nenhum dado encontrado para o CEP fornecido.");
        }

        // Extrai as informa√ß√µes da resposta
        const { cep: cepResult, street, neighborhood, city, state } = res;

        // Prepara a mensagem com as informa√ß√µes do CEP
        const message = `**Informa√ß√µes do CEP ${cepResult}:**\n` +
                        `- Rua: ${street}\n` +
                        `- Bairro: ${neighborhood}\n` +
                        `- Cidade: ${city}\n` +
                        `- Estado: ${state}`;

        reply(message);
    } catch (error) {
        console.error(error);
        return reply("Ocorreu um erro ao processar a solicita√ß√£o.");
    }
}
break;
		
case 'cep2': {
    if (!q) return reply('Por favor, forne√ßa um CEP para consulta. Exemplo: !cep 01001000');

    const cep = q.trim();

    try {
        const apiUrl = `https://viacep.com.br/ws/${cep}/json/`;
        const response = await fetch(apiUrl);
        const data = await response.json();

        if (data.erro) {
            return reply('CEP n√£o encontrado. Verifique o n√∫mero e tente novamente.');
        }

        const result = `
            *üîçConsulta de CEPüîé*
            
            CEP: ${data.cep}
            Logradouro: ${data.logradouro}
            Complemento: ${data.complemento}
            Bairro: ${data.bairro}
            Cidade: ${data.localidade}
            Estado: ${data.uf}
        `;
        
        return reply(result);
    } catch (error) {
        console.log(error);
        return reply('Ocorreu um erro ao consultar o CEP. Tente novamente mais tarde.');
    }
}
break; 
case "placa":
{
    if (!text) {
        return reply("Voc√™ precisa fornecer uma placa para consulta.");
    }

    try {
        const placa = text.toUpperCase().replace(/\s+/g, ''); // Normaliza o formato da placa
        if (placa.length !== 7) {
            return reply("Por favor, forne√ßa uma placa v√°lida com 7 caracteres.");
        }

        const res = await fetchJson(`https://world-ecletix.onrender.com/api/consultas?type=placa&query=${placa}`);
        //by luan

        if (!res || !res.status) {
            return reply("Nenhum dado encontrado para a placa fornecida.");
        }

        const {
            "- placa": placaInfo,
            "- marca": marcaInfo,
            "- modelo": modeloInfo,
            "- ano": anoInfo,
            "- cor": corInfo,
            "- chassi": chassiInfo,
            "- munic√≠pio": municipioInfo,
            "- uf": ufInfo,
            "- combust√≠vel": combustivelInfo,
            "- cilindradas": cilindradasInfo,
            "- segmento": segmentoInfo
        } = res.resultado;

        // Monta a mensagem excluindo dados irrelevantes
        const message = `**Informa√ß√µes do Ve√≠culo - Placa ${placaInfo}:**\n` +
                        `- Marca: ${marcaInfo}\n` +
                        `- Modelo: ${modeloInfo}\n` +
                        `- Ano: ${anoInfo}\n` +
                        `- Cor: ${corInfo}\n` +
                        `- Chassi: ${chassiInfo}\n` +
                        `- Munic√≠pio: ${municipioInfo}\n` +
                        `- UF: ${ufInfo}\n` +
                        `- Combust√≠vel: ${combustivelInfo}\n` +
                        `- Cilindradas: ${cilindradasInfo}\n` +
                        `- Segmento: ${segmentoInfo}\n\n` +
                        `- Usu√°rio: ${pushname}\n` +
                        `- Bot: ${botName}`;

        reply(message);
    } catch (error) {
        console.error("Erro ao consultar a placa:", error);
        return reply("Ocorreu um erro ao processar a solicita√ß√£o.");
    }
}
break;
case "operadora":
{
    if (!text) {
        return reply("Voc√™ precisa fornecer um n√∫mero de telefone para consulta.");
    }

    try {
        const telefone = text.replace(/\D/g, ''); // Remove caracteres n√£o num√©ricos
        if (telefone.length < 10 || telefone.length > 11) {
            return reply("Por favor, forne√ßa um n√∫mero de telefone v√°lido com 10 ou 11 d√≠gitos.");
        }

        const res = await fetchJson(`https://api.zero-two.online/api/operadora?numero=55${telefone}&apikey=alucard`);
        //by luan

        if (!res || res.status !== 200) {
            return reply("Nenhum dado encontrado para o telefone fornecido.");
        }

        const { telefone: telefoneInfo, operadora: operadoraInfo, dispositivo: dispositivoInfo, estado: estadoInfo } = res.resultado;

        const message = `**Informa√ß√µes do Telefone ${telefoneInfo}:**\n` +
                        `- Operadora: ${operadoraInfo}\n` +
                        `- Dispositivo: ${dispositivoInfo}\n` +
                        `- Estado: ${estadoInfo}\n\n` +
                        `- Usu√°rio: ${pushname}\n` +
                        `- Bot: ${botName}`;

        reply(message);
    } catch (error) {
        console.error("Erro ao consultar a operadora:", error);
        return reply("Ocorreu um erro ao processar a solicita√ß√£o.");
    }
}
break;
case "instagram2":
case "igvideo":
case "igvid":
case "ig2":
{
    if (!text) {
        return reply("Voc√™ precisa fornecer o URL de qualquer v√≠deo, postagem, rolo ou imagem do Instagram.");
    }
    
    try {
        const res = await fetchJson(`https://world-ecletix.onrender.com/api/insta?url=${text}`);
        //by luan
        
        // Verifica se a resposta cont√©m dados e se 'data' √© um array
        if (!res || !res.data || !Array.isArray(res.data.data)) {
            return reply("Nenhum v√≠deo ou imagem encontrado ou resposta inv√°lida da API.");
        }
        
        const mediaArray = res.data.data;

        // Verifica se h√° pelo menos um item no array
        if (mediaArray.length < 1) {
            return reply("N√£o h√° v√≠deo dispon√≠vel para esta postagem.");
        }

        // Pega o primeiro item (√≠ndice 0) para a URL do v√≠deo
        const videoData = mediaArray[0];
        const mediaURL = videoData.url;

        // Envia o v√≠deo usando a URL
        const cap = "aqui seu video";
        loli.sendMessage(from, { video: { url: mediaURL }, caption: cap }, { quoted: m });
    } catch (error) {
        console.error(error);
        return reply("Ocorreu um erro ao processar a solicita√ß√£o.");
    }
}
break;
case "instagram":
case "igimage":
case "igimg":
case "ig":
{
    if (!text) {
        return reply("Voc√™ precisa fornecer o URL de qualquer v√≠deo, postagem, rolo ou imagem do Instagram.");
    }
    
    try {
        const res = await fetchJson(`https://world-ecletix.onrender.com/api/insta?url=${text}`);
        //by luan
        
        // Verifica se a resposta cont√©m dados e se 'data' √© um array
        if (!res || !res.data || !Array.isArray(res.data.data)) {
            return reply("Nenhum v√≠deo ou imagem encontrado ou resposta inv√°lida da API.");
        }
        
        const mediaArray = res.data.data;

        // Itera sobre cada item no array de m√≠dias
        for (const mediaData of mediaArray) {
            const mediaType = mediaData.url.endsWith('.mp4') ? 'video' : 'image'; // Determina o tipo com base na URL
            const mediaURL = mediaData.url;
            let cap = `aqui sua foto! ${mediaType.toUpperCase()}`;
            
            if (mediaType === "video") {
                loli.sendMessage(from, { video: { url: mediaURL }, caption: cap }, { quoted: m });
            } else if (mediaType === "image") {
                loli.sendMessage(from, { image: { url: mediaURL }, caption: cap }, { quoted: m });
            }
        }
    } catch (error) {
        console.error(error);
        return reply("Ocorreu um erro ao processar a solicita√ß√£o.");
    }
}
break;
case "pinterest_video":
{
    if (!text) {
        return reply("Voc√™ precisa fornecer o URL de qualquer v√≠deo do Pinterest.");
    }

    try {
        const res = await fetchJson(`https://api-pinterest-y7jx.onrender.com/api/vid2?url=${text}`);
        //by luan

        if (!res || !res.video_url) {
            return reply("Nenhum v√≠deo encontrado ou resposta inv√°lida da API.");
        }

        const videoURL = res.video_url;
        let cap = `aqui est√°!!!`;
        loli.sendMessage(from, { video: { url: videoURL }, caption: cap }, { quoted: m });
    } catch (error) {
        console.error(error);
        return reply("Ocorreu um erro ao processar a solicita√ß√£o.");
    }
}
break;

case "pinterest_foto":
{
    if (!text) {
        return reply("Voc√™ precisa fornecer o URL de qualquer foto do Pinterest.");
    }

    try {
        const res = await fetchJson(`https://api-pinterest-y7jx.onrender.com/api/img2?url=${text}`);
        //by luan

        if (!res || !res.image_url) {
            return reply("Nenhuma foto encontrada ou resposta inv√°lida da API.");
        }

        const imageURL = res.image_url;
        let cap = `aqui est√°!!!`;
        loli.sendMessage(from, { image: { url: imageURL }, caption: cap }, { quoted: m });
    } catch (error) {
        console.error(error);
        return reply("Ocorreu um erro ao processar a solicita√ß√£o.");
    }
}
break;

case "song":
{
  if (!text) {
    return loli.reply(
      `Example : ${prefix + command} anime whatsapp status`
    );
  }

  try {
    const ytdl = require("./lib/ytdl"); // Importa a classe YT
    const searchResults = await ytdl.searchTrack(text); // Faz uma busca no YouTube Music usando o texto fornecido

    console.log('searchResults:', searchResults); // Adicione este log

    if (!searchResults || searchResults.length === 0) {
      return loli.reply(`No results found for "${text}"`);
    }

    const topResult = searchResults[0]; // Pega o primeiro resultado da busca

    if (!topResult || !topResult.url) {
      return loli.reply("No valid search result found.");
    }

    const music = await ytdl.downloadMusic(topResult.url); // Baixa a m√∫sica do YouTube

    loli.sendMessage(
  m.chat,
  {
    audio: fs.readFileSync(music.path),
    fileName: topResult.title + ".mp3",
    mimetype: "audio/mp4",
    ptt: true,
  },
  { quoted: m }
);

    await fs.unlinkSync(music.path); // Remove o arquivo de m√∫sica baixado ap√≥s o envio
  } catch (error) {
    console.error('Failed to download music:', error); // Adicione este log
    loli.reply("Algo deu errado ao processar a solicita√ß√£o.");
  }
}
break;
case "video":

{
  if (!text) {
    return loli.sendMessage(
      from,
      { text: `‚ö†Ô∏è Exemplo de uso:\n\n${prefix + command} Vale do reginaldo` },
      { quoted: info }
    );
  }

  try {
    const ytdl = require("ytdl-core");
    const yts = require("yt-search");
    const fs = require('fs');
    const path = require('path');

    // Verifique se o diret√≥rio de downloads existe, caso contr√°rio, crie-o
    const downloadDir = path.resolve('./downloads');
    if (!fs.existsSync(downloadDir)) {
      fs.mkdirSync(downloadDir);
    }

    const searchResults = await yts(text);
    const topResult = searchResults.videos[0];

    console.log('searchResults:', searchResults); // Adicione este log

    if (!searchResults || searchResults.length === 0) {
      return loli.sendMessage(from, { text: `No results found for "${text}"` }, { quoted: info });
    }

    const videoURL = topResult.url;

    if (!videoURL) {
      return loli.sendMessage(from, { text: "No valid search result found." }, { quoted: info });
    }

    const videoPath = path.join(downloadDir, `${topResult.videoId}.mp4`);

    const videoStream = ytdl(videoURL, { quality: 'highest' })
      .pipe(fs.createWriteStream(videoPath));

    videoStream.on('finish', async () => {
      await loli.sendMessage(
        from,
        {
          video: fs.readFileSync(videoPath),
          fileName: topResult.title + ".mp4",
          mimetype: "video/mp4"
        },
        { quoted: info }
      );

      fs.unlinkSync(videoPath); // Remove o arquivo de v√≠deo baixado ap√≥s o envio
    });

    videoStream.on('error', (error) => {
      console.error('Failed to download video:', error);
      loli.sendMessage(from, { text: "Algo deu errado ao processar a solicita√ß√£o." }, { quoted: info });
    });
  } catch (error) {
    console.error('Failed to download video:', error); // Adicione este log
    loli.sendMessage(from, { text: "Algo deu errado ao processar a solicita√ß√£o." }, { quoted: info });
  }
}
break;
case"linkmp3":

{
  if (!text) {
    return loli.sendMessage(
      from,
      { text: `‚ö†Ô∏è Exemplo de uso:\n\n${prefix + command} <link do YouTube>` },
      { quoted: info }
    );
  }

  try {
    const ytdl = require("ytdl-core");
    const fs = require('fs');
    const path = require('path');

    // Verifique se o diret√≥rio de downloads existe, caso contr√°rio, crie-o
    const downloadDir = path.resolve('./downloads');
    if (!fs.existsSync(downloadDir)) {
      fs.mkdirSync(downloadDir);
    }

    const videoURL = text;
    const videoId = ytdl.getURLVideoID(videoURL);
    const videoInfo = await ytdl.getInfo(videoURL);
    const audioPath = path.join(downloadDir, `${videoId}.mp3`);

    const audioStream = ytdl(videoURL, { quality: 'highestaudio' })
      .pipe(fs.createWriteStream(audioPath));

    audioStream.on('finish', async () => {
      await loli.sendMessage(
        from,
        {
          audio: fs.readFileSync(audioPath),
          fileName: videoInfo.videoDetails.title + ".mp3",
          mimetype: "audio/mp4",
          ptt: true,
        },
        { quoted: info }
      );

      fs.unlinkSync(audioPath); // Remove o arquivo de √°udio baixado ap√≥s o envio
    });

    audioStream.on('error', (error) => {
      console.error('Failed to download audio:', error);
      loli.sendMessage(from, { text: "Algo deu errado ao processar a solicita√ß√£o." }, { quoted: info });
    });
  } catch (error) {
    console.error('Failed to download audio:', error); // Adicione este log
    loli.sendMessage(from, { text: "Algo deu errado ao processar a solicita√ß√£o." }, { quoted: info });
  }
}
break;

case "linkmp4":
{
  if (!text) {
    return loli.sendMessage(
      from,
      { text: `‚ö†Ô∏è Exemplo de uso:\n\n${prefix + command} <link do YouTube>` },
      { quoted: info }
    );
  }

  try {
    const ytdl = require("ytdl-core");
    const fs = require('fs');
    const path = require('path');

    // Verifique se o diret√≥rio de downloads existe, caso contr√°rio, crie-o
    const downloadDir = path.resolve('./downloads');
    if (!fs.existsSync(downloadDir)) {
      fs.mkdirSync(downloadDir);
    }

    const videoURL = text;
    const videoId = ytdl.getURLVideoID(videoURL);
    const videoInfo = await ytdl.getInfo(videoURL);
    const videoPath = path.join(downloadDir, `${videoId}.mp4`);

    const videoStream = ytdl(videoURL, { quality: 'highest' })
      .pipe(fs.createWriteStream(videoPath));

    videoStream.on('finish', async () => {
      await loli.sendMessage(
        from,
        {
          video: fs.readFileSync(videoPath),
          fileName: videoInfo.videoDetails.title + ".mp4",
          mimetype: "video/mp4",
        },
        { quoted: info }
      );

      fs.unlinkSync(videoPath); // Remove o arquivo de v√≠deo baixado ap√≥s o envio
    });

    videoStream.on('error', (error) => {
      console.error('Failed to download video:', error);
      loli.sendMessage(from, { text: "Algo deu errado ao processar a solicita√ß√£o." }, { quoted: info });
    });
  } catch (error) {
    console.error('Failed to download video:', error); // Adicione este log
    loli.sendMessage(from, { text: "Algo deu errado ao processar a solicita√ß√£o." }, { quoted: info });
  }
}
break;
case 'play55': case 'tocar': {
                if (!text) return reply(`Asim que usa:\n\n${prefix + comando} Amar amei gosta gostei`)
                try {
                    let dataa = await fetchJson(`http://sabapi.tech:8090/api/ytsrc/videos?q=${text}&apikey=MrRootsFree`)
                    ytbrt = `‚îÅ„Äå PLAY AUDIO „Äç
  ü•Ç‚àÜùêÅùêÑùêå‚ú∞ùêïùêàùêçùêÉùêé‚àÜü•Ç     ‚ô¨
‚∏∫ÕüÕûÍ™∂${pushname}      ‚ô™  
  
‚û§Õ°Õú€ú€ú€£üìå ùöÉùöíÃÅùöùùöûùöïùöò: ${dataa.resultado[0].title}
‚û§Õ°Õú€ú€ú€£üéØ Tempo‚ßΩ${dataa.resultado[0].timestamp}
‚û§Õ°Õú€ú€ú€£ü¶ä Descri√ß√£o‚ßΩ ${dataa.resultado[0].description}

 0:35 ‚îÅ‚ùç‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ -5:32 ‚Üª ‚ä≤ ‚Ö° ‚ä≥ ‚Ü∫ VOLUME: ‚ñÅ‚ñÇ‚ñÉ‚ñÑ‚ñÖ‚ñÜ‚ñá 100%

Bom diaaü§ôüèª
ƒ±lƒ±.lƒ±llƒ±lƒ±.ƒ±llƒ±..ƒ±lƒ±.lƒ±llƒ±lƒ±.ƒ±llƒ±\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`
                    loli.sendMessage(from, { image: { url: `${dataa.resultado[0].image}` }, caption: ytbrt }, { quoted: info })
                    loli.sendMessage(from, { audio: { url: `http://sabapi.tech:8090/api/dl/ytaudio?url=${dataa.resultado[0].url}&apikey=MrRootsFree` }, mimetype: "audio/mpeg", fileName: `${dataa.resultado[0].title}.mp4` }, { quoted: info })
                } catch (err) {
                    reply('‚ùå ùô¥ùöõùöõùöò ùöäùöò ùöòùöãùöùùöéùöõ ùöíùöóùöèùöòùöõùöñùöäùöåÃßùöòÃÉùöéùöú!')
                    console.log(err)
                }
            }
                break
                
                
case 'play99':
if (!q) return reply(`${pushname} Cad√™ o nome da m√∫sica?\nExemplo: ${prefix}${command} Mc paiva`);
try {
data = await fetchJson(`http://45.126.210.24:5056/api/ytsrc/videos?q=${q}&apikey=`+API_KEY_YURI)
loli.sendMessage(from,{image: {url: `${data.resultado[0].image}`}, caption: mess.playResult(data)}, {quoted:info})
loli.sendMessage(from, {audio: {url: `http://45.126.210.24:5056/api/dl/ytaudio?url=${data.resultado[0].url}&apikey=`+API_KEY_YURI}, fileName: data.resultado[0].title+'.mp3', mimetype: "audio/mpeg"}, {quoted: info}).catch(e => {
return reply(mess.error())
})
} catch(error) {
reply("Seja mais espec√≠fico, n√£o deu pra encontrar com apenas isto...");
}
break
case 'sandro': case 'simi':
if(!isGroup) return reply(msg.grupo)
try {
datasimi = await fetchJson(`https://api.simsimi.vn/v1/simtalk`, {method: 'POST',
headers: {'content-type': "application/x-www-form-urlencoded"},
body: "text="+q+"&lc=pt"})
return reply(datasimi.message)
} catch (e){
return reply("Resposta n√£o encontrada..")
}
break
case 'gerarimagem':
    loli.sendMessage(from, { react: { text: `üé®`, key: info.key } });
    
    if (args.length < 1) return reply('Por favor, forne√ßa uma descri√ß√£o para gerar a imagem.');
    
    // Concatena a descri√ß√£o a partir dos argumentos
    const descricaoImagem = args.slice(1).join(' '); 

    try {
        const response = await fetch('https://api.openai.com/v1/images/generations', {
            method: 'POST',
            headers: {
                'Authorization': `Bearer sk-Atggpn9XIGDvppZVat0NQGV1Lw1b0lqcYwbX52Ah6GT3BlbkFJXsYEr0ZDJHHkTWK4Ub9IFuIMfaqhXf_8r2A59ARqMA`, // Substitua pela sua chave
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                prompt: descricaoImagem,
                n: 1,
                size: "1024x1024" // Voc√™ pode alterar o tamanho se necess√°rio
            })
        });

        const data = await response.json();
        
        if (data.data && data.data.length > 0) {
            const urlImagem = data.data[0].url;
            await loli.sendMessage(from, { image: { url: urlImagem }, caption: 'Aqui est√° sua imagem gerada!' }, { quoted: info });
        } else {
            reply("üö® N√£o consegui gerar a imagem. Tente novamente mais tarde.");
        }
    } catch (error) {
        console.error("Erro ao gerar imagem:", error);
        reply("üö® N√£o foi poss√≠vel gerar a imagem. Tente novamente mais tarde.");
    }
    break;

case 'imagine2':
if (!q) return reply(`O que voc√™ deseja criar?\nExemplo: ${prefix+command} Macaco voando`);
reply(`*Criando imagem sobre _~${q.toUpperCase()}~_*\n*Aguarde...*`);
try {
const response = await fetchJson(`https://hercai.onrender.com/v3/text2image?prompt=${encodeURIComponent(q)}`);
const imageUrl = response.url;
const imageBuffer = await getBuffer(imageUrl);
loli.sendMessage(from, { image: imageBuffer, caption: `*Resultado para: _~${q.toUpperCase()}~_*` });
} catch (error) {
console.log(error);
reply(`erro`);
}
break;

case 'videocontrario2':
case 'reversevid2':
if((isMedia && info.message.videoMessage || !isQuotedImage) && !q.length <= 1) { 
reply(mess.wait())
encmedia = isQuotedVideo ? info.message.extendedTextMessage.contextInfo.quotedMessage.videoMessage : info.message.videoMessage
rane = getRandom('.'+await getExtension(encmedia.mimetype))
buffimg = await getFileBuffer(encmedia, 'video')
fs.writeFileSync(rane, buffimg)
media = rane
ran = getRandom('.mp4')
exec(`ffmpeg -i ${media} -vf reverse -af areverse ${ran}`, async(err) => {
await DLT_FL(media)
if(err) return reply(`Err: ${err}`)
buffer453 = fs.readFileSync(ran)
await loli.sendMessage(from, {video: buffer453, mimetype: 'video/mp4'}, {quoted: info})
DLT_FL(ran)
})
} else {
reply("Marque um v√≠deo..")
}
break 

case 'videolento2':
case 'slowvid2':  
if((isMedia && info.message.videoMessage || !isQuotedImage) && !q.length <= 1) {
reply(mess.wait()) 
encmedia = isQuotedVideo ? info.message.extendedTextMessage.contextInfo.quotedMessage.videoMessage : info.message.videoMessage
rane = getRandom('.'+await getExtension(encmedia.mimetype))
buffimg = await getFileBuffer(encmedia, 'video')
fs.writeFileSync(rane, buffimg)
media = rane
ran = getRandom('.mp4')
exec(`ffmpeg -i ${media} -filter_complex "[0:v]setpts=2*PTS[v];[0:a]atempo=0.5[a]" -map "[v]" -map "[a]" ${ran}`, async(err) => {
await DLT_FL(media)
if(err) return reply(`Error: ${err}`)
buffer453 = fs.readFileSync(ran)
await loli.sendMessage(from, {video: buffer453, mimetype: 'video/mp4'}, {quoted: info})
await DLT_FL(ran)
})
} else {
reply("Marque um v√≠deo..")
}
break

case 'videorapido2':
case 'fastvid2':  
if((isMedia && info.message.videoMessage || !isQuotedImage) && !q.length <= 1) {
reply(mess.wait())
encmedia = isQuotedVideo ? info.message.extendedTextMessage.contextInfo.quotedMessage.videoMessage : info.message.videoMessage
rane = getRandom('.'+await getExtension(encmedia.mimetype))
buffimg = await getFileBuffer(encmedia, 'video')
fs.writeFileSync(rane, buffimg)
media = rane
ran = getRandom('.mp4')
exec(`ffmpeg -i ${media} -filter_complex "[0:v]setpts=0.5*PTS[v];[0:a]atempo=2[a]" -map "[v]" -map "[a]" ${ran}`, async(err) => {
await DLT_FL(media)
if(err) return reply(`Err: ${err}`)
buffer453 = fs.readFileSync(ran)
await loli.sendMessage(from, {video: buffer453, mimetype: 'video/mp4'}, {quoted: info })
await DLT_FL(ran)
})	
} else {
reply("Marque o v√≠deo..")
}
break

case 'grave3':
if((isMedia && !info.message.imageMessage && !info.message.videoMessage || isQuotedAudio)) {
reply(mess.wait())
muk = isQuotedAudio ? info.message.extendedTextMessage.contextInfo.quotedMessage.audioMessage : info.message.audioMessage
rane = getRandom('.'+await getExtension(muk.mimetype))
buffimg = await getFileBuffer(muk, 'audio')
fs.writeFileSync(rane, buffimg)
gem = rane
ran = getRandom('.mp3')
exec(`ffmpeg -i ${gem} -filter:a "atempo=1.6,asetrate=22100" ${ran}`, async(err, stderr, stdout) => {
await DLT_FL(gem)
if(err) return reply('Ocorreu um erro ao adicionar o *efeito sonoro* no √°udio.')
hah = fs.readFileSync(ran)
await akame.sendMessage(from, {audio: hah, mimetype: 'audio/mpeg', ptt:true}, {quoted: info})
await DLT_FL(ran)
})
} else {
reply("Marque o √°udio..")
}
break

case 'grave4':
if((isMedia && !info.message.imageMessage && !info.message.videoMessage || isQuotedAudio)) {
reply(mess.wait())
muk = isQuotedAudio ? info.message.extendedTextMessage.contextInfo.quotedMessage.audioMessage : info.message.audioMessage
rane = getRandom('.'+await getExtension(muk.mimetype))
buffimg = await getFileBuffer(muk, 'audio')
fs.writeFileSync(rane, buffimg)
gem = rane
ran = getRandom('.mp3')
exec(`ffmpeg -i ${gem} -filter:a "atempo=0.9,asetrate=44100" ${ran}`, async(err, stderr, stdout) => {
await DLT_FL(gem)
if(err) return reply('Ocorreu um erro ao adicionar o *efeito sonoro* no √°udio.')
hah = fs.readFileSync(ran)
await loli.sendMessage(from, {audio: hah, mimetype: 'audio/mpeg', ptt:true}, {quoted: info})
await DLT_FL(ran)
})
} else {
reply("Marque o √°udio..");
}
break

case 'adolesc2':
case 'vozmenino2':  
if((isMedia && !info.message.imageMessage && !info.message.videoMessage || isQuotedAudio)) {
reply(mess.wait())
muk = isQuotedAudio ? info.message.extendedTextMessage.contextInfo.quotedMessage.audioMessage : info.message.audioMessage
rane = getRandom('.'+await getExtension(muk.mimetype))
buffimg = await getFileBuffer(muk, 'audio')
fs.writeFileSync(rane, buffimg)
gem = rane
ran = getRandom('.mp3')
exec(`ffmpeg -i ${gem} -filter:a atempo=1.06,asetrate=44100*1.25 ${ran}`, async(err, stderr, stdout) => {
await DLT_FL(gem)
if(err) return reply('Ocorreu um erro ao adicionar o *efeito sonoro* no √°udio.');
hah = fs.readFileSync(ran)
await loli.sendMessage(from, {audio: hah, mimetype: 'audio/mpeg', ptt:true}, {quoted: info})
await DLT_FL(ran)
})
} else {
reply("Marque o √°udio..")
}
break  

case 'tomp3':
if((isMedia && !info.message.imageMessage || isQuotedVideo)) {
post = isQuotedImage ? JSON.parse(JSON.stringify(info).replace('quotedM','m')).message.extendedTextMessage.contextInfo.message.imageMessage : info.message.videoMessage
reply(mess.wait())
encmedia = isQuotedVideo ? info.message.extendedTextMessage.contextInfo.quotedMessage.videoMessage : info.message.videoMessage
rane = getRandom('.'+await getExtension(encmedia.mimetype))
buffimg = await getFileBuffer(encmedia, 'video')
fs.writeFileSync(rane, buffimg)
media = rane 
ran = getRandom('.mp4')
exec(`ffmpeg -i ${media} ${ran}`, async(err) => { 
await DLT_FL(media)
if(err) return reply('Ocorreu uma falha ao fazer a convers√£o do v√≠deo para mp3.')
buffer = fs.readFileSync(ran)
await loli.sendMessage(from, {audio: buffer, mimetype: 'audio/mpeg'}, {quoted: info})
await DLT_FL(ran)
})
} else {
reply("Marque o v√≠deo para transformar em √°udio por favor...")
}
break

case 'bass5':
if((isMedia && !info.message.imageMessage && !info.message.videoMessage || isQuotedAudio)) {
reply(mess.wait())
muk = isQuotedAudio ? info.message.extendedTextMessage.contextInfo.quotedMessage.audioMessage : info.message.audioMessage
rane = getRandom('.'+await getExtension(muk.mimetype))
buffimg = await getFileBuffer(muk, 'audio')
fs.writeFileSync(rane, buffimg)
gem = rane
ran = getRandom('.mp3')
exec(`ffmpeg -i ${gem} -af equalizer=f=20:width_type=o:width=2:g=15 ${ran}`, async(err, stderr, stdout) => {
await DLT_FL(gem)
if(err) return reply('Ocorreu um erro ao adicionar o *efeito sonoro* no √°udio.')
hah = fs.readFileSync(ran)
await loli.sendMessage(from, {audio: hah, mimetype: 'audio/mpeg', ptt:true}, {quoted: info})
await DLT_FL(ran)
})
} else {
reply("Marque o √°udio..")
}
break
case 'eco': //Guxtakkkj
if((isMedia && !info.message.imageMessage && !info.message.videoMessage || isQuotedAudio)) {
reply('Adicionando o efeito eco...')
const delay = 500
const decay = 0.5
muk = isQuotedAudio ? info.message.extendedTextMessage.contextInfo.quotedMessage.audioMessage : info.message.audioMessage
rane = getRandom('.'+await getExtension(muk.mimetype))
buffimg = await getFileBuffer(muk, 'audio')
fs.writeFileSync(rane, buffimg)
gem = rane
ran = getRandom('.mp3')
exec(`ffmpeg -i ${gem} -af "aecho=0.8:0.9:${delay}:${decay}" ${ran}`, (err, stderr, stdout) => {
DLT_FL(gem)
if(err) return reply('Ocorreu um erro ao adicionar o *efeito sonoro* no √°udio.')
hah = fs.readFileSync(ran)
loli.sendMessage(from, {audio: hah, mimetype: 'audio/mpeg', ptt:true}, {quoted: selo})
DLT_FL(ran)
})
} else {
reply("Marque o √°udio..")
}
break 
case 'bass3': 
if((isMedia && !info.message.imageMessage && !info.message.videoMessage || isQuotedAudio)) {
reply(mess.wait())
muk = isQuotedAudio ? info.message.extendedTextMessage.contextInfo.quotedMessage.audioMessage : info.message.audioMessage
rane = getRandom('.'+await getExtension(muk.mimetype))
buffimg = await getFileBuffer(muk, 'audio')
fs.writeFileSync(rane, buffimg)
gem = rane
ran = getRandom('.mp3')
exec(`ffmpeg -i ${gem} -af equalizer=f=20:width_type=o:width=2:g=15 ${ran}`, async(err, stderr, stdout) => {
await DLT_FL(gem)
if(err) return reply('Ocorreu um erro ao adicionar o *efeito sonoro* no √°udio.')
hah = fs.readFileSync(ran)
await akame.sendMessage(from, {audio: hah, mimetype: 'audio/mpeg', ptt:true}, {quoted: info})
await DLT_FL(ran)
})
} else {
reply("Marque o √°udio...")
}
break

case 'bass4': 
if((isMedia && !info.message.imageMessage && !info.message.videoMessage || isQuotedAudio)) {
reply(mess.wait())
muk = isQuotedAudio ? info.message.extendedTextMessage.contextInfo.quotedMessage.audioMessage : info.message.audioMessage
rane = getRandom('.'+await getExtension(muk.mimetype))
buffimg = await getFileBuffer(muk, 'audio')
fs.writeFileSync(rane, buffimg)
gem = rane
ran = getRandom('.mp3')
exec(`ffmpeg -i ${gem} -af equalizer=f=94:width_type=o:width=2:g=30 ${ran}`, async(err, stderr, stdout) => {
await DLT_FL(gem)
if(err) return reply('Ocorreu um erro ao adicionar o *efeito sonoro* no √°udio.')
hah = fs.readFileSync(ran)
await loli.sendMessage(from, {audio: hah, mimetype: 'audio/mpeg', ptt:true}, {quoted: info})
await DLT_FL(ran)
})
} else {
reply("Marque o √°udio..")
}
break

case 'estourar2': 
if((isMedia && !info.message.imageMessage && !info.message.videoMessage || isQuotedAudio)) {
reply(mess.wait());
muk = isQuotedAudio ? info.message.extendedTextMessage.contextInfo.quotedMessage.audioMessage : info.message.audioMessage
rane = getRandom('.'+await getExtension(muk.mimetype))
buffimg = await getFileBuffer(muk, 'audio')
fs.writeFileSync(rane, buffimg)
gem = rane
ran = getRandom('.mp3')
exec(`ffmpeg -i ${gem} -af equalizer=f=90:width_type=o:width=2:g=30 ${ran}`, async(err, stderr, stdout) => {
await DLT_FL(gem)
if(err) return reply('Ocorreu um erro ao adicionar o *efeito sonoro* no √°udio.')
hah = fs.readFileSync(ran)
await loli.sendMessage(from, {audio: hah, mimetype: 'audio/mpeg', ptt:true}, {quoted: info})
await DLT_FL(ran)
})
} else {
reply("Marque o √°udio..")
}
break

case 'fast2':
case 'audiorapido2':  
if((isMedia && !info.message.imageMessage && !info.message.videoMessage || isQuotedAudio)) {
reply(mess.wait())
muk = isQuotedAudio ? info.message.extendedTextMessage.contextInfo.quotedMessage.audioMessage : info.message.audioMessage
rane = getRandom('.'+await getExtension(muk.mimetype))
buffimg = await getFileBuffer(muk, 'audio')
fs.writeFileSync(rane, buffimg)
gem = rane
ran = getRandom('.mp3')
exec(`ffmpeg -i ${gem} -filter:a "atempo=0.9,asetrate=95100" ${ran}`, async(err, stderr, stdout) => {
await DLT_FL(gem)
if(err) return reply('Ocorreu um erro ao adicionar o *efeito sonoro* no √°udio.')
hah = fs.readFileSync(ran)
await loli.sendMessage(from, {audio: hah, mimetype: 'audio/mpeg', ptt:true}, {quoted: info})
await DLT_FL(ran)
})
} else {
reply("Marque o √°udio...");
}
break

case 'esquilo2':
if((isMedia && !info.message.imageMessage && !info.message.videoMessage || isQuotedAudio)) {
reply(mess.wait())
muk = isQuotedAudio ? info.message.extendedTextMessage.contextInfo.quotedMessage.audioMessage : info.message.audioMessage
rane = getRandom('.'+await getExtension(muk.mimetype))
buffimg = await getFileBuffer(muk, 'audio')
fs.writeFileSync(rane, buffimg)
gem = rane
ran = getRandom('.mp3')
exec(`ffmpeg -i ${gem} -filter:a "atempo=0.7,asetrate=65100" ${ran}`, async(err, stderr, stdout) => {
DLT_FL(gem)
if(err) return reply('Ocorreu um erro ao adicionar o *efeito sonoro* no √°udio.')
hah = fs.readFileSync(ran)
await loli.sendMessage(from, {audio: hah, mimetype: 'audio/mpeg', ptt:true}, {quoted: info})
await DLT_FL(ran)
})
} else {
reply("Marque o √°udio...");
}
break

case 'audiolento2': 
case 'slow2':
if((isMedia && !info.message.imageMessage && !info.message.videoMessage || isQuotedAudio)) {
reply(mess.wait());
muk = isQuotedAudio ? info.message.extendedTextMessage.contextInfo.quotedMessage.audioMessage : info.message.audioMessage
rane = getRandom('.'+await getExtension(muk.mimetype))
buffimg = await getFileBuffer(muk, 'audio')
fs.writeFileSync(rane, buffimg)
gem = rane
ran = getRandom('.mp3')
exec(`ffmpeg -i ${gem} -filter:a "atempo=0.9,asetrate=44100" ${ran}`, async(err, stderr, stdout) => {
DLT_FL(gem)
if(err) return reply('Ocorreu um erro ao adicionar o *efeito sonoro* no √°udio.');
hah = fs.readFileSync(ran)
await loli.sendMessage(from, {audio: hah, mimetype: 'audio/mpeg', ptt:true}, {quoted: info})
await DLT_FL(ran)
})
} else {
reply("Marque o √°udio..")
}
break
case 'plaq17': 
if(!isGroup)
if (args.length < 1) return reply('‚ùïEi humano, cad√™ o texto?')
if (q.length > 25) return reply('‚ùóO texto √© longo, o m√°ximo √© 25 caracteres.')
reagir(from, "üïí")
buffer = await getBuffer(`https://raptibef.sirv.com/images%20(3).jpeg?text.0.text=${q}&text.0.position.gravity=center&text.0.position.x=19%25&text.0.size=45&text.0.color=000000&text.0.opacity=55&text.0.font.family=Crimson%20Text&text.0.font.weight=300&text.0.font.style=italic&text.0.outline.opacity=21`)
sendMsg = loli.sendMessage(sender, {image: buffer}, {quoted: info}),
reply(`Eai, ${pushname}, preparado(a)? Enviando agora verifique seu pv... üòàüî•`)
break

case 'plaq8':
if(!isGroup)
if (args.length < 1) return reply('‚ùïEi humano, cad√™ o texto?')
if (q.length > 25) return reply('‚ùóO texto √© longo, o m√°ximo √© 25 caracteres.')
reagir(from, "üïí")
buffer = await getBuffer(`https://raptibef.sirv.com/images%20(1).jpeg?profile=Zanga%202.0&text.0.text=${q}`)
sendMsg = loli.sendMessage(sender, {image: buffer}, {quoted: info}),
reply(`Eai, ${pushname}, preparado(a)? Enviando agora verifique seu pv... üòàüî•`)
break

case 'plaq9':
if(!isGroup)
if (args.length < 1) return reply('‚ùïEi humano, cad√™ o texto?')
if (q.length > 25) return reply('‚ùóO texto √© longo, o m√°ximo √© 25 caracteres.')
reagir(from, "üïí")
buffer = await getBuffer(`https://raptibef.sirv.com/images.jpeg?profile=Zanga%203.0&text.0.text=${q}&text.0.outline.blur=63`)
sendMsg = loli.sendMessage(sender, {image: buffer}, {quoted: info}),
reply(`Eai, ${pushname}, preparado(a)? Enviando agora verifique seu pv... üòàüî•`)
break

case 'plaq10':
if(!isGroup)
if (args.length < 1) return reply('‚ùïEi humano, cad√™ o texto?')
if (q.length > 25) return reply('‚ùóO texto √© longo, o m√°ximo √© 25 caracteres.')
reagir(from, "üïí")
buffer = await getBuffer(`https://umethroo.sirv.com/Torcedora-da-sele%C3%A7%C3%A3o-brasileira-nua-mostrando-a-bunda-236x300.jpg?text.0.text=${q}&text.0.position.x=-64%25&text.0.position.y=-39%25&text.0.size=25&text.0.color=1b1a1a&text.0.font.family=Architects%20Daughter`) //api
plaq = ` *Plaquinha feita ‚úì* `
sendMsg = loli.sendMessage(sender, {image: buffer}, {quoted: info}),
reply(`Eai, ${pushname}, preparado(a)? Enviando agora verifique seu pv... üòàüî•`)
break

case 'plaq11':
if(!isGroup)
if (args.length < 1) return reply('‚ùïEi humano, cad√™ o texto?')
if (q.length > 25) return reply('‚ùóO texto √© longo, o m√°ximo √© 25 caracteres.')
reagir(from, "üïí")
buffer = await getBuffer(`https://umethroo.sirv.com/peito1.jpg?text.0.text=${q}&text.0.position.x=-4%25&text.0.position.y=-6%25&text.0.size=14&text.0.color=000000&text.0.font.family=Shadows%20Into%20Light&text.0.font.weight=700`)
sendMsg = loli.sendMessage(sender, {image: buffer}, {quoted: info}),
reply(`Eai, ${pushname}, preparado(a)? Enviando agora verifique seu pv... üòàüî•`)
break

case 'plaq12':
if(!isGroup)
if (args.length < 1) return reply('‚ùïEi humano, cad√™ o texto?')
if (q.length > 25) return reply('‚ùóO texto √© longo, o m√°ximo √© 25 caracteres.')
buffer = await getBuffer(`https://lerrewor.sirv.com/Teste/images%20(1)%20(6).jpeg?text.0.text=${q}&text.0.position.x=-17%25&text.0.position.y=-20%25&text.0.size=41&text.0.color=000000&text.0.opacity=59&text.0.font.family=PT%20Mono&text.0.outline.blur=10" width="463" height="662" alt="" />`,`https://lerrewor.sirv.com/Teste/images%20(1)%20(12).jpeg?text.0.text=${q}&text.0.position.x=-20%25&text.0.position.y=-35%25&text.0.size=41&text.0.color=000000&text.0.font.family=Playball&text.0.background.opacity=16&text.0.outline.color=ff0000&text.0.outline.blur=24" width="225" height="225" alt="" />`)
sendMsg = loli.sendMessage(sender, {image: buffer}, {quoted: info}),
reply(`Eai, ${pushname}, preparado(a)? Enviando agora verifique seu pv... üòàüî•`)
break

case 'plaq13':
if(!isGroup)
if (args.length < 1) return reply('‚ùïEi humano, cad√™ o texto?')
if (q.length > 25) return reply('‚ùóO texto √© longo, o m√°ximo √© 25 caracteres.')
buffer = await getBuffer(`https://lerrewor.sirv.com/Teste/images%20(1)%20(5).jpeg?text.0.text=${q}&text.0.position.x=-45%25&text.0.position.y=-29%25&text.0.size=36&text.0.color=000000&text.0.opacity=65&text.0.font.family=PT%20Sans%20Narrow" width="479" height="640" alt="" />`)
sendMsg = loli.sendMessage(sender, {image: buffer}, {quoted: info}),
reply(`Eai, ${pushname}, preparado(a)? Enviando agora verifique seu pv... üòàüî•`)
break

case 'plaq14':
if(!isGroup)
if (args.length < 1) return reply('‚ùïEi humano, cad√™ o texto?')
if (q.length > 25) return reply('‚ùóO texto √© longo, o m√°ximo √© 25 caracteres.')
buffer = await getBuffer(`https://lerrewor.sirv.com/Teste/images%20(1)%20(10).jpeg?text.0.text=${q}&text.0.position.y=-25%25&text.0.size=41&text.0.color=000000&text.0.font.family=Vollkorn&text.0.background.opacity=100" width="193" height="261" alt="" />`)
sendMsg = loli.sendMessage(sender, {image: buffer}, {quoted: info}),
reply(`Eai, ${pushname}, preparado(a)? Enviando agora verifique seu pv... üòàüî•`)
break

case 'plaq15':
if(!isGroup)
if (args.length < 1) return reply('‚ùïEi humano, cad√™ o texto?')
if (q.length > 25) return reply('‚ùóO texto √© longo, o m√°ximo √© 25 caracteres.')
buffer = await getBuffer(`https://lerrewor.sirv.com/Teste/images%20(1)%20(9).jpeg?text.0.text=${q}&text.0.position.x=-49%25&text.0.position.y=-19%25&text.0.size=45&text.0.color=000000&text.0.opacity=97&text.0.font.family=Patrick%20Hand" width="250" height="333" alt="" />`)
sendMsg = loli.sendMessage(sender, {image: buffer}, {quoted: info}),
reply(`Eai, ${pushname}, preparado(a)? Enviando agora verifique seu pv... üòàüî•`)
break

case 'plaq16': 
if(!isGroup)
if (args.length < 1) return reply('‚ùïEi humano, cad√™ o texto?')
if (q.length > 25) return reply('‚ùóO texto √© longo, o m√°ximo √© 25 caracteres.')
buffer = await getBuffer(`https://lerrewor.sirv.com/Teste/images%20(1)%20(8).jpeg?text.0.text=${q}&text.0.position.x=-28%25&text.0.position.y=-41%25&text.0.size=41&text.0.color=000000&text.0.opacity=99&text.0.font.family=Signika" width="225" height="225" alt="" />`)
sendMsg = loli.sendMessage(sender, {image: buffer}, {quoted: info}),
reply(`Eai, ${pushname}, preparado(a)? Enviando agora verifique seu pv... üòàüî•`)
break
case 'ping2': 
const os = require("os");
{
loli.sendMessage(from, { react: { text: `‚ö°`, key: info.key }})
r = (Date.now() / 1000) - info.messageTimestamp
uptime = process.uptime()
var getGroups = await asuna.groupFetchAllParticipating()
var groups = Object.entries(getGroups).slice(0).map(entry => entry[1])
const ingfoo = groups.map(v => v)
respon = `‚ö° *Velocidade:* ${String(r.toFixed(3))} _ms_\n‚è±Ô∏è *Uptime:* ${kyun(uptime)}\nüíª *Sistema:* ${os.type()}\nüìÅ *Vers√£o:* ${os.release()}\n‚ÑπÔ∏è *Total de Grupos:* ${ingfoo.length}\nüíæ *Memoria RAM total:* ${(os.totalmem()/Math.pow(1024, 3)).toFixed(2)}GB\nüíæ *RAM dispon√≠vel:* ${(os.freemem()/Math.pow(1024, 3)).toFixed(2)}GB\nüìâ *Uso de mem√≥ria RAM:* ${((os.totalmem() - os.freemem()) / os.totalmem() * 100).toFixed(2)}%\nüìà *Uso da CPU (atual):* ${os.loadavg()[0].toFixed(2)}%`.trim()
await loli.sendMessage(from, { image: { url: `https://oillater.sirv.com/Picsart_23-12-03_22-49-09-032.jpg?text.0.text=${String(r.toFixed(3))}&text.0.position.gravity=northwest&text.0.position.x=12%25&text.0.position.y=65%25&text.0.size=29&text.0.color=ffffff&text.0.font.family=Teko&text.0.font.weight=600&text.0.background.opacity=100` }, caption: respon}, {quoted: info}) 
}
break
case 'filme2':
if (args.length == 0) return await reply(`Cad√™ o nome do filme o qual voc√™ deseja ver informa√ß√µes?`)
movieInfo = await axios.get(`https://api.themoviedb.org/3/search/movie?api_key=ddfcb99fae93e4723232e4de755d2423&query=${encodeURIComponent(q)}&language=pt`);
var ImageMovieLink = `https://image.tmdb.org/t/p/original${movieInfo.data.results[0].backdrop_path}`;
var fotoFilme = await getBuffer(ImageMovieLink)
loli.sendMessage(from, {image: fotoFilme, caption: `*Nome do Filme:* ${movieInfo.data.results[0].title}\n*Nome original:* ${movieInfo.data.results[0].original_title}\n*Data de Lan√ßamento:* ${movieInfo.data.results[0].release_date}\n*Avalia√ß√µes:* ${movieInfo.data.results[0].vote_average} - (${movieInfo.data.results[0].vote_count} Votos)\n*Popularidade:* ${movieInfo.data.results[0].popularity.toFixed(1)}%\n*Classifica√ß√£o adulta?* ${movieInfo.data.results[0].adult ? 'Sim.' : 'N√£o.'}\n*Linguagem oficial:* ${movieInfo.data.results[0].original_language}\n\n*Sinopse:* ${movieInfo.data.results[0].overview}`}).catch((e) => {
console.log(e)
return reply(msg_erro)
})
break;

case 'serie2':
if (args.length == 0) return await reply(`Cad√™ o nome da serie o qual voc√™ deseja ver informa√ß√µes?`)
serieInfo = await axios.get(`https://api.themoviedb.org/3/search/tv?api_key=ddfcb99fae93e4723232e4de755d2423&query=${encodeURIComponent(q)}&language=pt`);
var ImageSerieLink = `https://image.tmdb.org/t/p/original${serieInfo.data.results[0].backdrop_path}`;
var fotoSerie = await getBuffer(ImageSerieLink)
loli.sendMessage(from, {image: fotoSerie, caption: `*Nome da S√©rie:* ${serieInfo.data.results[0].name}\n*Nome original:* ${serieInfo.data.results[0].original_name}\n*Data de Lan√ßamento:* ${serieInfo.data.results[0].first_air_date}\n*Avalia√ß√µes:* ${serieInfo.data.results[0].vote_average} - (${serieInfo.data.results[0].vote_count} Votos)\n*Popularidade:* ${serieInfo.data.results[0].popularity.toFixed(1)}%\n*Classifica√ß√£o adulta?* ${serieInfo.data.results[0].adult ? 'Sim.' : 'N√£o.'}\n*Linguagem oficial:* ${serieInfo.data.results[0].original_language}\n\n*Sinopse:* ${serieInfo.data.results[0].overview}`}).catch((e) => {
console.log(e)
return reply(msg_erro)
})
break;

case 'noticias2': 
try {
if (!q) return reply(`Informe um tema para realizar a pesquisa de suas not√≠cias!`)
theNews = await axios.get(`https://newsapi.org/v2/everything?q=${encodeURIComponent(q)}&sortBy=publishedAt&language=pt&apiKey=9dc1dde158804756ae9b33dd8d71f7a1`);
newsSends = theNews.data.articles.map(d => `${d.publishedAt.split('T').join(' - ').split('Z')[0]}\n\n${d.title} - ${d.author} [${d.source.name}]\n\n${d.description}\n\n${d.url}\n\n${d.content}\n\n--------------------------- * ---------------------------\n\n`).join('');
reply(newsSends).catch(() => {
return console.log(e)
})
} catch (e) {
return console.log(e)
}
break
case 'marcar2':
try {
if(!isGroup) return reply(Res_SoGrupo)
if(!isGroupAdmins) return reply(Res_SoAdm)  
if(q.includes(`${prefix}`)) return reply("N√£o pode utilizar comandos nesse comando")
members_id = []
teks = (args.length > 1) ? body.slice(8).trim() : ''
teks += '\n\n'
for (let mem of groupMembers) {
teks += `‚ï†‚û• @${mem.id.split('@')[0]}\n`
members_id.push(mem.id)
}
reply(teks)
} catch {
reply('ERROR!!')
}
break
case 'roleta':
case 'roletarussa':
if (!SoDono) return reply(`so o dono pode usar`)
jds = []
 A2 = groupMembers
 B2 = groupMembers
 TAMBOR = ["na perna.","na cabe√ßa.","no pesco√ßo.","no peito.","no olho.","no est√¥mago.","na boca.","na perna.","na testa.","no bra√ßo."]
  C2 = A2[Math.floor(Math.random() * A2.length)]
if(C2 === sender || C2 === botNumber+"@s.whatsapp.net") {
return reply(`*Escolhi* @${C2.id.split('@')[0]} mas infelizmente correu de covardia...*`)
}
 tpa = TAMBOR[Math.floor(Math.random() * (TAMBOR.length))]	 		
 reply(`A escolha √© minha! 1 membro ir√° morrer, que os jogos comecem...`)
 setTimeout( () => {
D1 = `Que pena... voc√™ n√£o sobreviveu ao meu jogo *@${C2.id.split('@')[0]}*, hora de enterrar o cad√°ver, infelizmente morreu com tiro *${tpa}*`             			
mentions(D1, jds, true)
}, 5000)
 jds.push(C2.id)				  
setTimeout( () => {
jds.push(C2.id)
conn.groupParticipantsUpdate(from, [C2.id], "remove")
}, 6000) 
break
 case 'antiflood': // Akila dev
    if (!isGroup) return reply(Res_SoGrupo);
    if (!isGroupAdmins) return reply(Res_SoAdm);
    if (!isBotGroupAdmins) return reply(Res_BotADM);
    
    let intervalo = 10, maxMensagem = 10, estadoNovo = !dataGp[0].antiflood.status;

    if (args.length == 2) [maxMensagem, intervalo] = args.map(Number);
    else if (args.length == 1) [maxMensagem] = args.map(Number);

    // Filtro - intervalo
    if (isNaN(intervalo) || intervalo < 10 || intervalo > 60) {
        return reply('[‚ùó] Escolha um valor entre 10-60 segundos para o intervalo do anti-flood.');
    }
    
    // Filtro - maxMensagem
    if (isNaN(maxMensagem) || maxMensagem < 5 || maxMensagem > 20) {
        return reply('[‚ùó] Escolha um valor entre 5-20 mensagens para o anti-flood.');
    }

    if (estadoNovo) {
        dataGp[0].antiflood = { status: true, maxMensagem, intervalo };
        setGp(dataGp);
        reply(`‚úÖ O recurso de ANTI-FLOOD foi ativado para *${maxMensagem}* mensagens a cada *${intervalo}* segundos.`);
    } else {
        dataGp[0].antiflood.status = false;
        setGp(dataGp);
        reply('‚úÖ O recurso de ANTI-FLOOD foi desativado com sucesso.');
    }
    break;

if (dataGp[0].antiflood.status && isGroup && !isGroupAdmins) {
    let flood = await this.tratarMensagemAntiFlood(dataGp[0].antiflood, sender);
    if (flood) {
        await conn.groupParticipantsUpdate(from, [sender], 'remove');
        return reply('Flooda na casa do crl.');
    }
} 

case 'anoschegar': {//Yuki ü´Ç
    if (!q) {
        return reply('por favor, forne√ßa a data no formato dd/mm/aaaa. exemplo: anoschegar 25/09/2025');
    }
    const targetDate = moment(q, 'DD/MM/YYYY');
    const now = moment();   
    if (!targetDate.isValid()) {
        return reply('data inv√°lida. Por favor, use o formato dd/mm/aaaa.');
    }
    const diffDays = targetDate.diff(now, 'days');
    const diffWeeks = targetDate.diff(now, 'weeks');
    const diffMonths = targetDate.diff(now, 'months');
    const diffSeconds = targetDate.diff(now, 'seconds');
    const diffHours = targetDate.diff(now, 'hours');
    const diffMinutes = targetDate.diff(now, 'minutes');
    const daysEmoji = 'üìÖ';
    const weeksEmoji = 'üìÜ';//Yuki mods
    const monthsEmoji = 'üóìÔ∏è';
    const secondsEmoji = '‚è±Ô∏è';
    const hoursEmoji = '‚è∞';
    const minutesEmoji = '‚åõ';
    const replyMessage = ` 
        ‚è≥ *tempo at√© a data ${targetDate.format('DD/MM/YYYY')}*:

        ${daysEmoji} *Dias restantes:* ${diffDays} dia(s) 
        ${weeksEmoji} *Semanas restantes:* ${diffWeeks} semana(s)
        ${monthsEmoji} *Meses restantes:* ${diffMonths} m√™s(es)
        ${hoursEmoji} *Horas restantes:* ${diffHours} hora(s)
        ${minutesEmoji} *Minutos restantes:* ${diffMinutes} minuto(s)
        ${secondsEmoji} *Segundos restantes:* ${diffSeconds} segundo(s)
    `;
    reply(replyMessage);
    break;
}

case 'gostoso2':
if(!isGroup) return enviar(`vamos ver`)
reagir("üòè")
 setTimeout(async() => {
random = `${Math.floor(Math.random() * 110)}`
gostosotext = `‡πõ *_O quanto voc√™ √© gostoso @${sender_ou_n.split("@")[0]} ? üòè_*\n-\n*„ÄåVoc√™ √©:„Äò ${random}% „Äôgostoso„Äçüòù*`
gostosoimg = `https://telegra.ph/file/4c0d54ce0f396036db110.jpg`
mencionarIMG(gostosotext, gostosoimg)
}, 100)
break 

case 'gostosa2':
if(!isGroup) return enviar(`vou ver`)
reagir("üòã")
setTimeout(async() => {
random = `${Math.floor(Math.random() * 110)}`
gostosatext = `‡πõ *_O quanto voc√™ √© gostosa @${sender_ou_n.split("@")[0]} ? üòè_*\n-\n*„ÄåVoc√™ √©:„Äò ${random}% „Äôgostosa„Äçüò≥*`
gostosaimg = `https://telegra.ph/file/4f4d3c5b3bcce85f8bfe7.jpg`
mencionarIMG(gostosatext, gostosaimg)
}, 2000)
break
case 'invocar':
    if (!isGroup) return reply(`so pode ser usado por adms`);
    if (!isGroupAdmins) return reply(`so pode ser usado por adms`);

    const summonType = q.length > 1 ? q.trim() : 'monstro gen√©rico';
    const summonMessage = `üîÆ **Invoca√ß√£o!** üîÆ\nVoc√™ invocou um ${summonType}! Prepare-se para a batalha!`;
    
    await loli.sendMessage(from, { text: summonMessage, contextInfo: { forwardingScore: 50000, isForwarded: true } });
    
    break;



case 'feiti√ßo':
    if (!isGroup) return reply(`sopode ser usado em grupos`);
    if (!isGroupAdmins) return reply(`so pode ser usado por adms`);

    const spellName = q.length > 1 ? q.trim() : 'feiti√ßo poderoso';
    const spellMessage = `‚ú® **Feiti√ßo Lan√ßado!** ‚ú®\nVoc√™ lan√ßou o feiti√ßo: ${spellName}! Resultados m√°gicos a caminho...`;
    
    await loli.sendMessage(from, { text: spellMessage, contextInfo: { forwardingScore: 50000, isForwarded: true } });
    break;



case 'teletransportar':
    if (!isGroup) return reply(`sopode ser usado em grupos`);
    if (!isGroupAdmins) return reply(`so pode ser usado por adms`);

    const destination = q.length > 1 ? q.trim() : 'local desconhecido';
    const teleportMessage = `üöÄ **Teletransporte!** üöÄ\nVoc√™ se teletransportou para ${destination}! Prepare-se para novas aventuras!`;
    
    await loli.sendMessage(from, { text: teleportMessage, contextInfo: { forwardingScore: 50000, isForwarded: true } });
    break;



case 'prote√ß√£o':
    if (!isGroup) return reply(`sopode ser usado em grupos`);
    if (!isGroupAdmins) return reply(`so adms`);

    const shieldDuration = q.length > 1 ? q.trim() : '5 minutos';
    const protectionMessage = `üõ°Ô∏è **Escudo M√°gico!** üõ°Ô∏è\nVoc√™ ativou um escudo m√°gico que durar√° ${shieldDuration}! Sinta-se seguro!`;
    
    await loli.sendMessage(from, { text: protectionMessage, contextInfo: { forwardingScore: 50000, isForwarded: true } });
    break;

case 'anjo':
if (!isGroup) return reply(`sopode ser usado em grupos`);
if (!isModobn) return reply(`so em grupos`);
loli.sendMessage(from, {text: `‚ù∞ Avaliando seu n√≠vel angelical : @${sender_ou_n.split("@")[0]} aguarde... ‚ù±`, mentions: [sender_ou_n]});
setTimeout(async () => {
    random = `${Math.floor(Math.random() * 100)}`;
    anjo = random;
    if (anjo < 20) { var bo = 'Voc√™ √© bem terreno... üòá'; }
    else if (anjo < 40) { var bo = 'Voc√™ tem tra√ßos angelicais üòá'; }
    else if (anjo < 60) { var bo = 'Voc√™ √© um anjo üòá'; }
    else if (anjo < 80) { var bo = 'Voc√™ √© um anjo celestial! üòá'; }
    else { var bo = 'Voc√™ √© um arcanjo divino! üòá‚ú®'; }
    loli.sendMessage(from, {image: {url: 'https://telegra.ph/file/ddba48c868d7db5fdbbcd.jpg'}, caption: `O quanto voc√™ √© anjo? \n\n „Äå @${sender_ou_n.split("@")[0]} „ÄçVoc√™ √©: ‚ù∞ ${random}% ‚ù± anjo üòá‚ú®\n\n${bo}`, mentions: [sender_ou_n], thumbnail: null}, {quoted: info});
}, 7000);
break
case 'revelarft':  
if(!isQuotedVisuU) return reply("*Detetive boruto aqui pra revelar sua imagem* selecione a imagem ap√≥s o envio da imagem!");
cu = info.message;
cuu = cu.extendedTextMessage.contextInfo;
cuuu = cuu.quotedMessage.viewOnceMessageV2;
cuzin = await getFileBuffer(cuuu.message.imageMessage, "image");
loli.sendMessage(from, {image: cuzin, caption: `
usu√°rio: ${pushname}
 Bot: ${NomeDoBot}
üïµüèª Achei sua imagem üïµüèª`}, {quoted: info}).catch(e => {
reply(`erro`);
});
break
case 'transformar':
    if (!isGroup) return reply(`sopode ser usado em grupos`);
    if (!isGroupAdmins) return reply(`so pode ser usado por adms`);

    const transformation = q.length > 1 ? q.trim() : 'criatura m√°gica';
    const transformationMessage = `ü¶Ñ **Transforma√ß√£o!** ü¶Ñ\nVoc√™ se transformou em uma ${transformation}! Agora voc√™ tem novas habilidades!`;
    
    await loli.sendMessage(from, { text: transformationMessage, contextInfo: { forwardingScore: 50000, isForwarded: true } });
    break;



case 'elemento':
    if (!isGroup) return reply(`sopode ser usado em grupos`);
    if (!isGroupAdmins) return reply(`sopode ser usado em grupos`);

    const element = q.length > 1 ? q.trim() : 'fogo';
    const elementMessage = `üî• **Conjura√ß√£o de Elemento!** üî•\nVoc√™ conjurou o elemento ${element}! Use-o sabiamente!`;
    
    await loli.sendMessage(from, { text: elementMessage, contextInfo: { forwardingScore: 50000, isForwarded: true } });
    break;



case 'restaurar':
    if (!isGroup) return reply(`sopode ser usado em grupos`);
    if (!isGroupAdmins) return reply(`so pode ser usado por adms`);

    const healthRestored = q.length > 1 ? q.trim() : '50 pontos de vida';
    const restoreMessage = `üí´ **Restaura√ß√£o!** üí´\nVoc√™ restaurou ${healthRestored}! Sinta-se renovado!`;
    
    await loli.sendMessage(from, { text: restoreMessage, contextInfo: { forwardingScore: 50000, isForwarded: true } });
    break;
    

case 'ilus√£o':
    if (!isGroup) return reply(`sopode ser usado em grupos`);
    if (!isGroupAdmins) return reply(`so pode ser usado por adms`);

    const illusionType = q.length > 1 ? q.trim() : 'um holograma';
    const illusionMessage = `üé≠ **Ilus√£o Criada!** üé≠\nVoc√™ criou ${illusionType} para enganar os inimigos! Cuidado com as consequ√™ncias!`;
    
    await loli.sendMessage(from, { text: illusionMessage, contextInfo: { forwardingScore: 50000, isForwarded: true } });
    break;



case 'controlar':
    if (!isGroup) return reply(`sopode ser usado em grupos`);
    if (!isGroupAdmins) return reply(`so pode ser usado por adms`);

    const elementToControl = q.length > 1 ? q.trim() : '√°gua';
    const controlMessage = `üåä **Controle de Elemento!** üåä\nVoc√™ controla ${elementToControl}! Use esse poder com responsabilidade!`;
    
    await loli.sendMessage(from, { text: controlMessage, contextInfo: { forwardingScore: 50000, isForwarded: true } });
    break;



case 'p√≥':
    if (!isGroup) return reply(`sopode ser usado em grupos`);
    if (!isGroupAdmins) return reply(`so pode ser usado por adms`);

    const powderEffect = q.length > 1 ? q.trim() : 'fuma√ßa colorida';
    const powderMessage = `‚ú® **P√≥ M√°gico Criado!** ‚ú®\nVoc√™ criou ${powderEffect} que pode ter efeitos variados! Use-o sabiamente!`;
    
    await loli.sendMessage(from, { text: powderMessage, contextInfo: { forwardingScore: 50000, isForwarded: true } });
    break;



case 'aumentar':
    if (!isGroup) return reply(`sopode ser usado em grupos`);
    if (!isGroupAdmins) return reply(`so pode ser usado por adms`);

    const boostType = q.length > 1 ? q.trim() : 'for√ßa m√°gica';
    const boostMessage = `‚ö° **Aumento de Poder!** ‚ö°\nVoc√™ aumentou sua ${boostType} temporariamente! Sinta-se invenc√≠vel!`;
    
    await loli.sendMessage(from, { text: boostMessage, contextInfo: { forwardingScore: 50000, isForwarded: true } });
    break;



case 'cura':
    if (!isGroup) return reply(`sopode ser usado em grupos`);
    if (!isGroupAdmins) return reply(`so pode ser usado por adms`);

    const healingAmount = q.length > 1 ? q.trim() : '30 pontos de vida';
    const healingMessage = `üíñ **Magia de Cura!** üíñ\nVoc√™ curou ${healingAmount}! A energia retorna ao seu corpo!`;
    
    await loli.sendMessage(from, { text: healingMessage, contextInfo: { forwardingScore: 50000, isForwarded: true } });
    break;



case 'tempo2':
    if (!isGroup) return reply(`sopode ser usado em grupos`);
    if (!isGroupAdmins) return reply(`so pode ser usado por adms`);

    const timeEffect = q.length > 1 ? q.trim() : 'parar o tempo por 10 segundos';
    const timeMessage = `‚è≥ **Magia do Tempo!** ‚è≥\nVoc√™ consegue ${timeEffect}! Prepare-se para agir!`;
    
    await loli.sendMessage(from, { text: timeMessage, contextInfo: { forwardingScore: 50000, isForwarded: true } });
    break;



case 'telepatia':
    if (!isGroup) return reply(`sopode ser usado em grupos`);
    if (!isGroupAdmins) return reply(`so pode ser usado por adms`);

    const mindReadTarget = q.length > 1 ? q.trim() : 'um amigo pr√≥ximo';
    const telepathyMessage = `üß† **Telepatia Ativada!** üß†\nVoc√™ leu a mente de ${mindReadTarget}! Cuidado com o que voc√™ descobre!`;
    
    await loli.sendMessage(from, { text: telepathyMessage, contextInfo: { forwardingScore: 50000, isForwarded: true } });
    break;



case 'aura':
    if (!isGroup) return reply(`so em grupos`);
    if (!isGroupAdmins) return reply(`so pode ser usado por adms`);

    const auraEffect = q.length > 1 ? q.trim() : 'uma aura protetora';
    const auraMessage = `üåà **Aura M√°gica!** üåà\nVoc√™ emitiu ${auraEffect} que aumenta suas defesas!`;
    
    await loli.sendMessage(from, { text: auraMessage, contextInfo: { forwardingScore: 50000, isForwarded: true } });
    break;
case 'viajar': case 'viagem': // by alana 
if(!isGroup) return enviar('S√≥ pode ser utilizado este comando, em grupo.')
if (info.message.extendedTextMessage === undefined || info.message.extendedTextMessage === null) return enviar('marque um amigo pra viajar com vc')
mentioned = info.message.extendedTextMessage.contextInfo.mentionedJid
pru = '.\n'
for (let _ of mentioned) {
pru += `@${_.split('@')[0]}\n`
}
susp = `
 ‚ûΩ vcs d√≥is ent√£o em uma carro√ßaüêéüßîüßî
‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚âΩ„Äå ‚öîÔ∏è ${botName} ‚öîÔ∏è „Äç
‚îÇ        
‚îÇ
‚îÇ‚ûΩ${pushname} 
‚îÇ
‚îÇ‚ûΩ@${mentioned[0].split('@')[0]}‚Å© 
‚îÇ
‚îÇ‚ûΩ voc√™ e seu amigo chegaram numa vila 
‚îÇ
‚îÇ‚ûΩ arrumar as malas meus amigosü§†
‚îÇ‚ûΩ chegou a hora de se aventura
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ` 
jrq = await getBuffer(`https://telegra.ph/file/2eeb5defcbe2fa5b0ef00.mp4`)
await loli.sendMessage(from, {video: jrq, gifPlayback: true, caption: susp, mentions: mentioned}, {quoted: info('QUE INCRIVEL(üò±)')})
break // by alana
case 'retardado'://fantasma mods 
if (!isOwner) if (!isPremium) addFilter(from)  
client.updatePresence(from, Presence.composing) 
random = `${Math.floor(Math.random() * 110)}`
hasil = `voc√™ √©: *${random}%* RETARDADO(A)üòõ`
reply(hasil)
break
 case 'magico':
if (!isGroup) return reply(`so em grupos`);
if (!isModobn) return reply(`Este tipo de comando s√≥ pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se voc√™ for, apenas digite ${prefix}modobrincadeira 1`);
loli.sendMessage(from, {text: `‚ù∞ Avaliando seu n√≠vel de magia : @${sender_ou_n.split("@")[0]} aguarde... ‚ù±`, mentions: [sender_ou_n]});
setTimeout(async () => {
    random = `${Math.floor(Math.random() * 100)}`;
    magico = random;
    if (magico < 20) { var bo = 'Voc√™ √© bem mundano... üßô'; }
    else if (magico < 40) { var bo = 'Voc√™ tem tra√ßos m√°gicos ü™Ñ'; }
    else if (magico < 60) { var bo = 'Voc√™ √© um mago üßô'; }
    else if (magico < 80) { var bo = 'Voc√™ √© um mago poderoso! üßô'; }
    else { var bo = 'Voc√™ √© o mestre dos magos! üßô‚ú®'; }
    loli.sendMessage(from, {image: {url: 'https://telegra.ph/file/bc46ce223a0cf3534d01f.jpg'}, caption: `O quanto voc√™ √© m√°gico? \n\n „Äå @${sender_ou_n.split("@")[0]} „ÄçVoc√™ √©: ‚ù∞ ${random}% ‚ù± m√°gico üßô‚ú®\n\n${bo}`, mentions: [sender_ou_n], thumbnail: null}, {quoted: info});
}, 7000);
break
case 'qrcode': case 'qr-qr-code': case 'qr-code'://Cleitin Modz
if(!q) return reply(`Digite o a palavra que deseja transformar em qr code\nExemplo: ${prefixo}qrcode Amo a lady bot`)
reply(`Aguarde...`)
loli.sendMessage(from, {image: {url: `https://api.qrserver.com/v1/create-qr-code/?size=500x500&data=${q}`}, gifPlayback: false, caption: 'AQUI ESTA SEU QR - CODE'
},{quoted: info})
break//Cleitin Modz



case 'abraco': case 'abra√ßo':
if(!isGroup) return enviar('S√≥ pode ser utilizado este comando, em grupo.')
if (info.message.extendedTextMessage === undefined || info.message.extendedTextMessage === null) return enviar('marque o alvo que voc√™ quer d√°r um belo abra√ßo')
mentioned = info.message.extendedTextMessage.contextInfo.mentionedJid
pru = '.\n'
for (let _ of mentioned) {
pru += `@${_.split('@')[0]}\n`
}
susp = `
 ‚ûΩ ‚ù§Ô∏èUm simples abra√ßo muda tudoü•∞
‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚âΩ„Äå ‚ô° LADY BOT ‚ô° „Äç
‚îÇ        ‚ô° ùê¥ùêº ùëÑùëàùêº ùêπùëÇùêπùëÇ ‚ô°
‚îÇ
‚îÇ‚ûΩ${pushname} 
‚îÇ
‚îÇ‚ûΩ@${mentioned[0].split('@')[0]}‚Å© 
‚îÇ
‚îÇ‚ûΩ voc√™ ganhou um abra√ßo bem gostosinhoü•∞
‚îÇ
‚îÇ‚ûΩ AAA n√£o e pq eu sou um bot que eu 
‚îÇ‚ûΩ tmb n√£o mere√ßo um abra√ßo viu ü•∫
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ` 
jrq = await getBuffer(`https://telegra.ph/file/d7f7092b8288905ba6edc.mp4`)
await loli.sendMessage(from, {video: jrq, gifPlayback: true, caption: susp, mentions: mentioned}, {quoted: info('QUE FOFINHO(A)ü•∞')})
break        

case 'criptografar': //Pedrozz Mods
if (!isPremium && !isCreator) return enviar(msg.premium)
let getBufferDocument = await getFileBuffer(info.message.extendedTextMessage.contextInfo.quotedMessage.documentMessage, 'document');
fs.writeFileSync(`./${sender}.js`, getBufferDocument);
reagir('üí≠')
const filePath = path.join(__dirname, `${sender}.js`);
try {

const code = readFileSync(filePath, 'utf8');

const obfuscatedCode = JavaScriptObfuscator.obfuscate(code, {
compact: true,
controlFlowFlattening: true
}).getObfuscatedCode();


const obfuscatedFilePath = path.join(__dirname, `zi_${Date.now()}.js`);
const copiaFile = path.join(__dirname, `${sender}.js`);

writeFileSync(obfuscatedFilePath, obfuscatedCode);

await loli.sendMessage(from, { document: { url: obfuscatedFilePath }, mimetype: 'application/javascript', fileName: `${q || "Criptografia.js"}` },{quoted: info(`Nome: ${q || "Criptografia.js"}\nO arquivo foi criptografado com sucesso ü§ô\nby: pedrozz Mods`)});
await loli.sendMessage(from, { document: { url: copiaFile }, mimetype: 'application/javascript', fileName: `${q || "copia.js"}` },{quoted: info(`Nome: ${q || "Copia.js"}\nCopia de seguran√ßa ü§ô\nby: pedrozz Mods`)});
reagir('üëç')
unlinkSync(obfuscatedFilePath);
DLT_FL(`./${sender}.js`);
} catch (error) {
console.error('Erro ao criptografar o arquivo:', error);
enviar('deu erro mn')
}
break; 
case 'gatos':
api = await fetchJson(`https://api.thecatapi.com/v1/images/search?size=med&mime_types=jpg&format=json&has_breeds=true&order=RANDOM&page=0&limit=1`)
loli.sendMessage(from, {image: {url: api[0].url}, caption: "Aqui sua imagem aleat√≥rio de um gato üêà" })
break
case 'cachorros':  
api = await fetchJson(`https://api.thedogapi.com/v1/images/search?size=med&mime_types=jpg&format=json&has_breeds=true&order=RANDOM&page=0&limit=1`)
loli.sendMessage(from, {image: {url: api[0].url}, caption: "Aqui sua imagem aleat√≥rio de um cachorro üêï"})
break


case 'addcmd':
    // Verifica se o usu√°rio √© um administrador ou o dono
    if (!isGroupAdmins && !isCreator) return reply('Precisa ser Dono');

    // Verifica se o argumento (o nome da nova case) foi passado
    if (!q || q.trim() === "") {
        return reply('Por favor, forne√ßa o nome da nova case.');
    }

    // L√™ o conte√∫do atual do index.js
    const indexContent = fs.readFileSync('index.js', 'utf8');

    // Cria a nova case a ser adicionada
    const novaCase = `case '${q}':\n    // Sua l√≥gica aqui\n    break;`;

    // Adiciona a nova case antes do √∫ltimo 'break'
    const pula = [
        indexContent.slice(0, indexContent.lastIndexOf('break') + 5), // Parte antes do √∫ltimo break
        novaCase, // Nova case a ser adicionada
        indexContent.slice(indexContent.lastIndexOf('break') + 5) // Parte depois do √∫ltimo break
    ].join('\n\n');

    // Escreve o novo conte√∫do de volta no index.js
    fs.writeFileSync('index.js', pula);
    
    // Responde ao usu√°rio
    await reagir('‚úÖ');
    reply('Nova case adicionada com sucesso!');
    break;
case 'getcase':
case 'puxarcase':
try{
if (!SoDono) return reply(`so o dono pode usar`)
reply('Seu perdido √© uma ordem! Aguarde um pouco mestre! <3')
const getCase = (cases) => {
return 'case '+`'${cases}'`+fs.readFileSync("./index.js").toString().split('case \''+cases+'\'')[1].split("break")[0]+"break"
}
await sleep(500)
msgSemQuoted(`${getCase(q)}`)
} catch(e) {
reply('A case n√£o foi encontrada, voc√™ deve ter escrito errado...')
}
break

case 'gethtml': // Lm Only
    try {
        /**
         * Fun√ß√£o para obter a HTML de um site
         * √ötil para inspecionar site no mobile
         */
        let directory = 'Lm_Hutao.txt';
        
        if (q.includes('https://')) {
            const response = await axios({
                url: q.trim(),
                method: "GET"
            });
            
            directory = `./FILE-${Date.now()}.html`;
            
            fs.writeFileSync(directory, response.data.toString());
            
            loli.sendMessage(from, {
                document: fs.readFileSync(directory),
                filename: "resultado.html",  // Corrigido de 'fileresultado' para 'filename'
                mimetype: "text/plain"
            }, {
                quoted: info
            });
            
            fs.unlinkSync(directory);
        } else {
            reply('Voc√™ deve inserir um *Link* ao lado do comando');
        }
    } catch (e) {
        if (fs.existsSync(directory)) {
            fs.unlinkSync(directory);
        }
        
        console.error(e);
        reply('Houve um erro ao processar o comando!');
    }
    break; // Lm Only

//AkilaDevs 
case "explanadas":{
json = [
"https://telegra.ph/file/f17c88a15ceffa3cedc72.jpg",
"https://telegra.ph/file/cd4e07c652aefdb18521d.jpg",
"https://telegra.ph/file/7aba83de2f24c97288bd4.jpg",
"https://telegra.ph/file/303284117c952f3f511fe.jpg",
"https://telegra.ph/file/773a0c13da467627deadd.jpg",
"https://telegra.ph/file/2a901028e1bc14f9be638.jpg",
"https://telegra.ph/file/1a258e14b897111a50ca8.jpg",
"https://telegra.ph/file/92624873032e20f38168e.jpg",
"https://telegra.ph/file/f0291eb0c56d4999aecd3.jpg",
"https://telegra.ph/file/a7be4a88b3a3c9f588fac.jpg",
"https://telegra.ph/file/c2a2ed0b434f25a2edec8.jpg",
"https://telegra.ph/file/359e4bc3ffafa03b5290b.jpg",
"https://telegra.ph/file/cae681c06b256e8d86763.jpg",
"https://telegra.ph/file/1c73d9d497e3dfe99c01a.jpg",
"https://telegra.ph/file/e84242e2cdca7537a6f46.jpg",
"https://telegra.ph/file/138456af45394ba828c21.jpg",
"https://telegra.ph/file/a9a46f58598da874db190.jpg",
"https://telegra.ph/file/52b718dad52461023b9a8.jpg",
"https://telegra.ph/file/8ace28720c316ea74c42f.jpg",
"https://telegra.ph/file/9d2b2453f9ad90b00926e.jpg",
"https://telegra.ph/file/de8e36ea53e38e3f7073a.jpg",
"https://telegra.ph/file/ffd20091b246a3916a8be.jpg",
"https://telegra.ph/file/90cd6125f144933f5363e.jpg",
"https://telegra.ph/file/a405b39ede2d37190aa8d.jpg",
"https://telegra.ph/file/532f7fc83dd5d20009d04.jpg",
"https://telegra.ph/file/2c57a5df9b08203f517fc.jpg",
"https://telegra.ph/file/62da6b921c546a744704c.jpg",
"https://telegra.ph/file/4e3bd9b13a183b7c556ca.jpg",
"https://telegra.ph/file/039134aa81273edb155b5.jpg",
"https://telegra.ph/file/4fd437c0977090a8353b1.jpg",
"https://telegra.ph/file/c3519034be7b03f66ac71.jpg",
"https://telegra.ph/file/e12ce2bf1b6a9eff2ea65.jpg",
"https://telegra.ph/file/0983716af47e6841bfbaa.jpg",
"https://telegra.ph/file/36490eac60550c0226ff0.jpg",
"https://telegra.ph/file/87e824613fbd9807f4f4a.jpg",
"https://telegra.ph/file/38916bd148902361a5697.jpg",
"https://telegra.ph/file/4a623cab0cf50b7b065d8.jpg",
"https://telegra.ph/file/4d7d6d603f36e80f39539.jpg",
"https://telegra.ph/file/51f3978c8ce4425bed1f9.jpg"
]
random = json[Math.floor(Math.random() * json.length)]
chama_o_random = {
image: {url: random}, caption: `Garotinha explanada ü§≠`, mentions: [sender_ou_n]
}
loli.sendMessage(from, chama_o_random)
}
break //AkilaDevs

case 'gerarlink2':
  try {
    if (isQuotedImage) {
      boij = isQuotedImage || isQuotedVideo 
        ? JSON.parse(JSON.stringify(info).replace("quotedM", "m")).message.extendedTextMessage.contextInfo.message.imageMessage 
        : info;
      const fetch = require('node-fetch');
      const FormData = require('form-data');
      async function uploadImageToImgur(imageBuffer) {
        const form = new FormData();
        form.append('image', imageBuffer, { filename: 'image.jpg' });
        const response = await fetch('https://api.imgur.com/3/image', {
          method: 'POST',
          body: form,
          headers: {
            'Authorization': 'Client-ID 400116076ba4b73'
          }
        });
        console.log('Response status:', response.status);
        console.log('Response headers:', response.headers.raw());
        const data = await response.json();
        console.log('Response data:', data); 
        if (response.ok && data.data && data.data.link) {
          return data.data.link;
        } else {
          throw new Error('Failed to retrieve the image URL from the response.');
        }
      }
      const owgi = await getFileBuffer(boij, "image");
      const imageUrl = await uploadImageToImgur(owgi);
      reply(imageUrl);
    } else {
      reply('Marque a foto.');
    }
  } catch (e) {
    console.log('Error details:', e); 
    reply('Erro...');
  }
  break;
case 'rvisu':
case 'open':
if(!isQuotedVisuU) return reply('Por favor, *mencione uma imagem ou video em visualiza√ß√£o √∫nica* para executar o comando.')
await reagir(from, "üëÄ");
if(info.message.extendedTextMessage.contextInfo.quotedMessage.viewOnceMessageV2 || type == "viewOnceMessage") {
if(JSON.stringify(info).includes("videoMessage")) {
var px = info.message.extendedTextMessage.contextInfo.quotedMessage.viewOnceMessageV2?.message?.videoMessage || info.message?.viewOnceMessage?.message?.videoMessage
px.viewOnce = false
px.video = {url: px.url}
px.caption += "\n\nO v√≠deo em visualiza√ß√£o √∫nica foi revelado.."
await loli.sendMessage(from,px)
} else {
var px = info.message.extendedTextMessage.contextInfo.quotedMessage.viewOnceMessageV2?.message?.imageMessage || info.message?.viewOnceMessage?.message?.imageMessage
px.viewOnce = false
px.image = {url: px.url}
px.caption += "\n\nA imagem em visualiza√ß√£o √∫nica foi revelada.."
await loli.sendMessage(from,px)
}}
break

case 'chatgptkey':
    loli.sendMessage(from, { react: { text: `üîé`, key: info.key } });
    
    if (args.length < 1) {
        console.log('Nenhuma pergunta fornecida.');
        return reply('Por favor, forne√ßa uma pergunta para que eu possa ajudar.');
    }
    
    // Concatena a pergunta a partir dos argumentos
    const perguntaChatGPT = args.slice(1).join(' '); 
    console.log(`Pergunta para o ChatGPT: ${perguntaChatGPT}`);

    try {
        const response = await fetch('https://api.openai.com/v1/chat/completions', {
            method: 'POST',
            headers: {
                'Authorization': `Bearer sk-Atggpn9XIGDvppZVat0NQGV1Lw1b0lqcYwbX52Ah6GT3BlbkFJXsYEr0ZDJHHkTWK4Ub9IFuIMfaqhXf_8r2A59ARqMA`, // Substitua pela sua chave
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                model: 'gpt-3.5-turbo', // Ou gpt-4, dependendo do que voc√™ quiser usar
                messages: [{ role: 'user', content: perguntaChatGPT }]
            })
        });

        const data = await response.json();
        console.log('Resposta da API do ChatGPT:', data);

        if (data.choices && data.choices.length > 0) {
            const resposta = data.choices[0].message.content;
            await loli.sendMessage(from, { text: resposta }, { quoted: info });
        } else {
            console.log('Resposta n√£o encontrada na resposta da API.');
            reply("üö® N√£o consegui obter a resposta do ChatGPT. Tente novamente mais tarde.");
        }
    } catch (error) {
        console.error("Erro ao obter resposta do ChatGPT:", error);
        reply("üö® N√£o foi poss√≠vel se conectar ao ChatGPT. Tente novamente mais tarde.");
    }
    break;
    case 'imagine3':
if(!q) return reply(`Cade o nome?`)
reagir(from,"‚è≥")
try {
conn.sendMessage(from,{image: {url: `https://random-apis.online/api/ai/v4/image?q=${q}&apikey=mjcaFK16`}})
reagir(from,"‚úÖ")
} catch (e){
return reply(`${e}`)
reagir(from,"‚ùå")
}
break//by luanzin dev
    case 'imagem':
    case 'gerar-imagem':
    if (!q) return loli.sendMessage(from, { text: '[‚öôÔ∏èÔ∏è] Por favor, forne√ßa o texto para gerar a imagem. Exemplo: !gerar-imagem Sua frase aqui' }, { quoted: info });

    const textoParaImagem = encodeURIComponent(q); // Codifica o texto para a URL
    const apiUrlImagem = `https://world-ecletix.onrender.com/api/gerar-imagem?texto=${textoParaImagem}`;

    try {
        // Envia a mensagem informando que est√° gerando a imagem
        reply(`aguarde um momento ${pushname}, pode demorar.`);

        // Envia a imagem diretamente usando a nova API
        const imageResponse = await axios.get(apiUrlImagem, { responseType: 'arraybuffer' });
        
        if (imageResponse.status === 200) {
            const imageBuffer = Buffer.from(imageResponse.data, 'binary');

            // Envia a imagem gerada no chat de onde veio a solicita√ß√£o
            await loli.sendMessage(from, {
                image: imageBuffer,
                caption: `Aqui est√° a imagem gerada para: ${q}`, // Mensagem opcional
            });
        } else {
            loli.sendMessage(from, { text: 'üö® N√£o foi poss√≠vel gerar a imagem.' }, { quoted: info });
        }
    } catch (error) {
        console.error('Erro ao fazer a requisi√ß√£o √† API de gera√ß√£o de imagem:', error);
        loli.sendMessage(from, { text: 'üö® Erro ao gerar a imagem.' }, { quoted: info });
    }
    break;
    case 'orbital-img':
case 'gerar-orbital-img':
  if (!q) return loli.sendMessage(from, { text: '[‚öôÔ∏èÔ∏è] Por favor, forne√ßa o texto para gerar a imagem. Exemplo: !orbital-img Sua descri√ß√£o aqui' }, { quoted: info });

  const textoOrbitalImg = encodeURIComponent(q);
  const apiUrlOrbitalImg = `https://world-ecletix.onrender.com/api/orbital-img?texto=${textoOrbitalImg}`;

  try {
    reply(`Aguarde um momento ${pushname}, estou gerando sua imagem...`);

    const imageResponse = await axios.get(apiUrlOrbitalImg, { responseType: 'arraybuffer' });
    if (imageResponse.status === 200) {
      const imageBuffer = Buffer.from(imageResponse.data, 'binary');
      await loli.sendMessage(from, {
        image: imageBuffer,
        caption: `Aqui est√° a imagem gerada para: ${q}`,
      });
    } else {
      loli.sendMessage(from, { text: 'üö® N√£o foi poss√≠vel gerar a imagem.' }, { quoted: info });
    }
  } catch (error) {
    console.error('Erro ao fazer a requisi√ß√£o √† API Orbital Image:', error);
    loli.sendMessage(from, { text: 'üö® Erro ao gerar a imagem.' }, { quoted: info });
  }
  break;
case 'imgsys':
case 'gerar-imgsys':
  if (!q) return loli.sendMessage(from, { text: '[‚öôÔ∏èÔ∏è] Por favor, forne√ßa o texto para gerar a imagem. Exemplo: !imgsys Sua descri√ß√£o aqui' }, { quoted: info });

  const textoImgSys = encodeURIComponent(q);
  const apiUrlImgSys = `https://world-ecletix.onrender.com/api/imgsys?texto=${textoImgSys}`;

  try {
    reply(`Aguarde um momento ${pushname}, estou gerando sua imagem...`);

    const imageResponse = await axios.get(apiUrlImgSys, { responseType: 'arraybuffer' });
    if (imageResponse.status === 200) {
      const imageBuffer = Buffer.from(imageResponse.data, 'binary');
      await loli.sendMessage(from, {
        image: imageBuffer,
        caption: `Aqui est√° a imagem gerada para: ${q}`,
      });
    } else {
      loli.sendMessage(from, { text: 'üö® N√£o foi poss√≠vel gerar a imagem.' }, { quoted: info });
    }
  } catch (error) {
    console.error('Erro ao fazer a requisi√ß√£o √† API ImgSys:', error);
    loli.sendMessage(from, { text: 'üö® Erro ao gerar a imagem.' }, { quoted: info });
  }
  break;
  case 'fluximg':
case 'gerar-fluximg':
  if (!q) return loli.sendMessage(from, { text: '[‚öôÔ∏èÔ∏è] Por favor, forne√ßa o texto para gerar a imagem. Exemplo: !fluximg Sua descri√ß√£o aqui' }, { quoted: info });

  const textoFluxImg = encodeURIComponent(q);
  const apiUrlFluxImg = `https://world-ecletix.onrender.com/api/fluximg?texto=${textoFluxImg}`;

  try {
    reply(`Aguarde um momento ${pushname}, estou gerando sua imagem...`);

    const imageResponse = await axios.get(apiUrlFluxImg, { responseType: 'arraybuffer' });
    if (imageResponse.status === 200) {
      const imageBuffer = Buffer.from(imageResponse.data, 'binary');
      await loli.sendMessage(from, {
        image: imageBuffer,
        caption: `Aqui est√° a imagem gerada para: ${q}`,
      });
    } else {
      loli.sendMessage(from, { text: 'üö® N√£o foi poss√≠vel gerar a imagem.' }, { quoted: info });
    }
  } catch (error) {
    console.error('Erro ao fazer a requisi√ß√£o √† API FluxImg:', error);
    loli.sendMessage(from, { text: 'üö® Erro ao gerar a imagem.' }, { quoted: info });
  }
  break;
  case 'sd':
case 'gerar-sd':
  if (!q) return loli.sendMessage(from, { text: '[‚öôÔ∏èÔ∏è] Por favor, forne√ßa o texto para gerar a imagem. Exemplo: !sd Sua descri√ß√£o aqui' }, { quoted: info });

  const promptSD = encodeURIComponent(q);
  const apiUrlSD = `https://world-ecletix.onrender.com/api/sd?prompt=${promptSD}`;

  try {
    reply(`Aguarde um momento ${pushname}, estou gerando sua imagem...`);

    const imageResponse = await axios.get(apiUrlSD, { responseType: 'arraybuffer' });
    if (imageResponse.status === 200) {
      const imageBuffer = Buffer.from(imageResponse.data, 'binary');
      await loli.sendMessage(from, {
        image: imageBuffer,
        caption: `Aqui est√° a imagem gerada para: ${q}`,
      });
    } else {
      loli.sendMessage(from, { text: 'üö® N√£o foi poss√≠vel gerar a imagem.' }, { quoted: info });
    }
  } catch (error) {
    console.error('Erro ao fazer a requisi√ß√£o √† API SD:', error);
    loli.sendMessage(from, { text: 'üö® Erro ao gerar a imagem.' }, { quoted: info });
  }
  break;
case 'imagine':
case 'Imagine':
  if (!q) return loli.sendMessage(from, { text: '[‚öôÔ∏èÔ∏è] Por favor, forne√ßa o texto para gerar a imagem. Exemplo: !imagine Sua descri√ß√£o aqui' }, { quoted: info });

  const textoImagine = encodeURIComponent(q);
  const apiUrlImagine = `https://world-ecletix.onrender.com/api/imagine?texto=${textoImagine}`;

  try {
    reply(`Aguarde um momento ${pushname}, estou gerando sua imagem...`);

    const imageResponse = await axios.get(apiUrlImagine, { responseType: 'arraybuffer' });
    if (imageResponse.status === 200) {
      const imageBuffer = Buffer.from(imageResponse.data, 'binary');
      await loli.sendMessage(from, {
        image: imageBuffer,
        caption: `Aqui est√° a imagem gerada para: ${q}`,
      });
    } else {
      loli.sendMessage(from, { text: 'üö® N√£o foi poss√≠vel gerar a imagem.' }, { quoted: info });
    }
  } catch (error) {
    console.error('Erro ao fazer a requisi√ß√£o √† API Imagine:', error);
    loli.sendMessage(from, { text: 'üö® Erro ao gerar a imagem.' }, { quoted: info });
  }
  break;

   case 'Gemini2':
case 'gemini2':
  if (!args[1]) {
    return reply('üö® Por favor, forne√ßa uma pergunta para o gemini IA.');
  }

  const promptOrbital = encodeURIComponent(args.slice(1).join(' '));

  try {
    const response = await fetchJson(`https://api-ia.orbital.host/gemini?prompt=${promptOrbital}`);
    const data = await response.json();
    
    if (data.result) {
      loli.sendMessage(from, { text: `üó£Ô∏è Resposta do Gemini IA: ${data.result}` }, { quoted: info });
    } else {
      reply("üö® N√£o consegui obter a resposta do Orbital IA. Tente novamente mais tarde.");
    }
  } catch (error) {
    console.error("Erro ao obter resposta do Orbital IA:", error);
    reply("üö® N√£o foi poss√≠vel. Tente novamente mais tarde.");
  }
  break;
case 'lady':
case 'Lady':
  if (!args[1]) {
    return reply('üö® Por favor, forne√ßa uma pergunta para a lady.');
  }

  const ladyTexto = encodeURIComponent(args.slice(1).join(' '));

  try {
    // Faz a requisi√ß√£o para a nova API da lady
    const response = await fetchJson(`https://world-ecletix.onrender.com/api/lady?texto=${ladyTexto}`);

    if (response.resposta) {
      loli.sendMessage(from, { text: `üó£Ô∏è Resposta da lady: ${response.resposta}` }, { quoted: info });
    } else if (response.mensagem) {
      reply(`üö® Erro: ${response.mensagem}`);
    } else {
      reply("üö® N√£o consegui obter a resposta da lady. Tente novamente mais tarde.");
    }
  } catch (error) {
    console.error("Erro ao obter resposta da lady:", error);
    reply("üö® N√£o foi poss√≠vel, tente novamente mais tarde.");
  }
  break;
  case 'analisaimg': //by luanzin dev
  if (!args[1] || !args[2]) {
    return reply('üö® Por favor, forne√ßa um prompt e uma URL de imagem. Exemplo: !analiseimg "analisar esta imagem" [URL da imagem]');
  }

  const promptVerImg = encodeURIComponent(args[1]);
  const imageUrl = args[2];

  try {
    const response = await fetchJson(`https://api-ia.orbital.host/gemini/img?prompt=${promptVerImg}&imageUrl=${imageUrl}`);
    const data = await response.json();
    
    if (data.result) {
      loli.sendMessage(from, { text: `üñºÔ∏è Resultado da an√°lise: ${data.result}` }, { quoted: info });
    } else {
      reply("üö® N√£o consegui obter a an√°lise da imagem.");
    }
  } catch (error) {
    console.error("Erro ao analisar a imagem:", error);
    reply("üö® N√£o foi poss√≠vel se conectar ao Orbital IA. Tente novamente mais tarde.");
  }
  break;
case 'ia':
  if (!args[1]) {
    return reply('üö® Por favor, forne√ßa uma pergunta para a IA.');
  }

  const textoIa = encodeURIComponent(args.slice(1).join(' '));

  try {
    // Faz a requisi√ß√£o para a API da IA
    const data = await fetchJson(`https://world-ecletix.onrender.com/api/ia?texto=${textoIa}`);

    if (data.resposta) {
      loli.sendMessage(from, { text: `üó£Ô∏è Resposta da IA: ${data.resposta}` }, { quoted: info });
    } else {
      reply(data.mensagem ? `üö® Erro: ${data.mensagem}` : "üö® N√£o consegui obter a resposta da IA. Tente novamente mais tarde.");
    }
  } catch (error) {
    console.error("Erro ao obter resposta da IA:", error);
    reply("üö® N√£o foi poss√≠vel, tente novamente mais tarde.");
  }
  break;

case 'gemini':
  if (!args[1]) {
    return reply('üö® Por favor, forne√ßa uma pergunta para o Gemini.');
  }

  const textoGemini = encodeURIComponent(args.slice(1).join(' '));

  try {
    // Faz a requisi√ß√£o para a API do Gemini
    const data = await fetchJson(`https://world-ecletix.onrender.com/api/gemini?texto=${textoGemini}`);

    if (data.resposta) {
      loli.sendMessage(from, { text: `üó£Ô∏è Resposta do Gemini: ${data.resposta}` }, { quoted: info });
    } else {
      reply(data.mensagem ? `üö® Erro: ${data.mensagem}` : "üö® N√£o consegui obter a resposta do Gemini. Tente novamente mais tarde.");
    }
  } catch (error) {
    console.error("Erro ao obter resposta do Gemini:", error);
    reply("üö® N√£o foi poss√≠vel, tente novamente mais tarde.");
  }
  break;

case 'geminipro':
  if (!args[1]) {
    return reply('üö® Por favor, forne√ßa uma pergunta para o GeminiPro.');
  }

  const textoGeminipro = encodeURIComponent(args.slice(1).join(' '));

  try {
    // Faz a requisi√ß√£o para a API do GeminiPro
    const data = await fetchJson(`https://world-ecletix.onrender.com/api/geminipro?texto=${textoGeminipro}`);

    if (data.resposta) {
      loli.sendMessage(from, { text: `üó£Ô∏è Resposta do GeminiPro: ${data.resposta}` }, { quoted: info });
    } else {
      reply(data.mensagem ? `üö® Erro: ${data.mensagem}` : "üö® N√£o consegui obter a resposta do GeminiPro. Tente novamente mais tarde.");
    }
  } catch (error) {
    console.error("Erro ao obter resposta do GeminiPro:", error);
    reply("üö® N√£o foi poss√≠vel, tente novamente mais tarde.");
  }
  break;
  case 'chatgpt':
  if (!args[1]) {
    return reply('üö® Por favor, forne√ßa uma pergunta para o ChatGPT.');
  }

  const textoChatGPT = encodeURIComponent(args.slice(1).join(' '));

  try {
    // Faz a requisi√ß√£o para a API do ChatGPT
    const data = await fetchJson(`https://world-ecletix.onrender.com/api/chatgpt?texto=${textoChatGPT}`);

    if (data.resposta) {
      loli.sendMessage(from, { text: `üó£Ô∏è Resposta do ChatGPT: ${data.resposta}` }, { quoted: info });
    } else if (data.mensagem) {
      reply(`üö® Erro: ${data.mensagem}`);
    } else {
      reply("üö® N√£o consegui obter a resposta do ChatGPT. Tente novamente mais tarde.");
    }
  } catch (error) {
    console.error("Erro ao obter resposta do ChatGPT:", error);
    reply("üö® N√£o foi poss√≠vel, tente novamente mais tarde.");
  }
  break;

case 'gpt3.5-turbo':
  if (!args[1]) {
    return reply('üö® Por favor, forne√ßa uma pergunta para o GPT-3.5-Turbo.');
  }

  const textoGpt35Turbo = encodeURIComponent(args.slice(1).join(' '));

  try {
    // Faz a requisi√ß√£o para a API do GPT-3.5-Turbo
    const data = await fetchJson(`https://world-ecletix.onrender.com/api/gpt3.5-turbo?texto=${textoGpt35Turbo}`);

    if (data.resposta) {
      loli.sendMessage(from, { text: `üó£Ô∏è Resposta do GPT-3.5-Turbo: ${data.resposta}` }, { quoted: info });
    } else if (data.mensagem) {
      reply(`üö® Erro: ${data.mensagem}`);
    } else {
      reply("üö® N√£o consegui obter a resposta do GPT-3.5-Turbo. Tente novamente mais tarde.");
    }
  } catch (error) {
    console.error("Erro ao obter resposta do GPT-3.5-Turbo:", error);
    reply("üö® N√£o foi poss√≠vel, tente novamente mais tarde.");
  }
  break;

case 'gpt4':
  if (!args[1]) {
    return reply('üö® Por favor, forne√ßa uma pergunta para o GPT-4.');
  }

  const textoGpt4 = encodeURIComponent(args.slice(1).join(' '));

  try {
    // Faz a requisi√ß√£o para a API do GPT-4
    const data = await fetchJson(`https://world-ecletix.onrender.com/api/gpt4?texto=${textoGpt4}`);

    if (data.resposta) {
      loli.sendMessage(from, { text: `üó£Ô∏è Resposta do GPT-4: ${data.resposta}` }, { quoted: info });
    } else if (data.mensagem) {
      reply(`üö® Erro: ${data.mensagem}`);
    } else {
      reply("üö® N√£o consegui obter a resposta do GPT-4. Tente novamente mais tarde.");
    }
  } catch (error) {
    console.error("Erro ao obter resposta do GPT-4:", error);
    reply("üö® N√£o foi poss√≠vel, tente novamente mais tarde.");
  }
  break;
  case 'gpt4':
  if (!args[1]) {
    return reply('üö® Por favor, forne√ßa uma pergunta para o GPT-4.');
  }

  const textoGpt44 = encodeURIComponent(args.slice(1).join(' '));

  try {
    // Faz a requisi√ß√£o para a API do GPT-4
    const data = await fetchJson(`https://world-ecletix.onrender.com/api/gpt4?texto=${textoGpt44}`);

    if (data.resposta) {
      loli.sendMessage(from, { text: `üó£Ô∏è Resposta do GPT-4: ${data.resposta}` }, { quoted: info });
    } else if (data.mensagem) {
      reply(`üö® Erro: ${data.mensagem}`);
    } else {
      reply("üö® N√£o consegui obter a resposta do GPT-4. Tente novamente mais tarde.");
    }
  } catch (error) {
    console.error("Erro ao obter resposta do GPT-4:", error);
    reply("üö® N√£o foi poss√≠vel, tente novamente mais tarde.");
  }
  break;

case 'gpt4v2':
  if (!args[1]) {
    return reply('üö® Por favor, forne√ßa uma pergunta para o GPT-4V2.');
  }

  const textoGpt4v2 = encodeURIComponent(args.slice(1).join(' '));

  try {
    // Faz a requisi√ß√£o para a API do GPT-4V2
    const data = await fetchJson(`https://world-ecletix.onrender.com/api/gpt4v2?texto=${textoGpt4v2}`);

    if (data.resposta) {
      loli.sendMessage(from, { text: `üó£Ô∏è Resposta do GPT-4V2: ${data.resposta}` }, { quoted: info });
    } else if (data.mensagem) {
      reply(`üö® Erro: ${data.mensagem}`);
    } else {
      reply("üö® N√£o consegui obter a resposta do GPT-4V2. Tente novamente mais tarde.");
    }
  } catch (error) {
    console.error("Erro ao obter resposta do GPT-4V2:", error);
    reply("üö® N√£o foi poss√≠vel, tente novamente mais tarde.");
  }
  break;

case 'llama':
  if (!args[1]) {
    return reply('üö® Por favor, forne√ßa uma consulta para o Llama.');
  }

  const textoLlama = encodeURIComponent(args.slice(1).join(' '));

  try {
    // Faz a requisi√ß√£o para a API do Llama
    const data = await fetchJson(`https://world-ecletix.onrender.com/api/llama?texto=${textoLlama}`);

    if (data.resposta) {
      loli.sendMessage(from, { text: `üó£Ô∏è Resposta do Llama: ${data.resposta}` }, { quoted: info });
    } else if (data.mensagem) {
      reply(`üö® Erro: ${data.mensagem}`);
    } else {
      reply("üö® N√£o consegui obter a resposta do Llama. Tente novamente mais tarde.");
    }
  } catch (error) {
    console.error("Erro ao obter resposta do Llama:", error);
    reply("üö® N√£o foi poss√≠vel, tente novamente mais tarde.");
  }
  break;

case 'blackbox':
  if (!args[1]) {
    return reply('üö® Por favor, forne√ßa uma consulta para o BlackBox.');
  }

  const textoBlackbox = encodeURIComponent(args.slice(1).join(' '));

  try {
    // Faz a requisi√ß√£o para a API do BlackBox
    const data = await fetchJson(`https://world-ecletix.onrender.com/api/blackbox?texto=${textoBlackbox}`);

    if (data.resposta) {
      loli.sendMessage(from, { text: `üó£Ô∏è Resposta do BlackBox: ${data.resposta}` }, { quoted: info });
    } else if (data.mensagem) {
      reply(`üö® Erro: ${data.mensagem}`);
    } else {
      reply("üö® N√£o consegui obter a resposta do BlackBox. Tente novamente mais tarde.");
    }
  } catch (error) {
    console.error("Erro ao obter resposta do BlackBox:", error);
    reply("üö® N√£o foi poss√≠vel, tente novamente mais tarde.");
  }
  break;

case 'lumin':
  if (!args[1]) {
    return reply('üö® Por favor, forne√ßa uma consulta para o Lumin.');
  }

  const queryLumin = encodeURIComponent(args.slice(1).join(' '));

  try {
    // Faz a requisi√ß√£o para a API do Lumin
    const data = await fetchJson(`https://world-ecletix.onrender.com/api/lumin?query=${queryLumin}`);

    if (data.resposta) {
      loli.sendMessage(from, { text: `üó£Ô∏è Resposta do Lumin: ${data.resposta}` }, { quoted: info });
    } else if (data.mensagem) {
      reply(`üö® Erro: ${data.mensagem}`);
    } else {
      reply("üö® N√£o consegui obter a resposta do Lumin. Tente novamente mais tarde.");
    }
  } catch (error) {
    console.error("Erro ao obter resposta do Lumin:", error);
    reply("üö® N√£o foi poss√≠vel, tente novamente mais tarde.");
  }
  break;
case 'wwdgpt':
  if (!args[1]) {
    return reply('üö® Por favor, forne√ßa uma consulta para o WWDGPT.');
  }

  const promptWWDGPT = encodeURIComponent(args.slice(1).join(' '));

  try {
    // Faz a requisi√ß√£o para a API do WWDGPT
    const data = await fetchJson(`https://world-ecletix.onrender.com/api/wwdgpt?prompt=${promptWWDGPT}`);

    if (data.resposta) {
      loli.sendMessage(from, { text: `üó£Ô∏è Resposta do WWDGPT: ${data.resposta}` }, { quoted: info });
    } else if (data.mensagem) {
      reply(`üö® Erro: ${data.mensagem}`);
    } else {
      reply("üö® N√£o consegui obter a resposta do WWDGPT. Tente novamente mais tarde.");
    }
  } catch (error) {
    console.error("Erro ao obter resposta do WWDGPT:", error);
    reply("üö® N√£o foi poss√≠vel, tente novamente mais tarde.");
  }
  break;

case 'letmegpt':
  if (!args[1]) {
    return reply('üö® Por favor, forne√ßa uma consulta para o LetMeGPT.');
  }

  const queryLetMeGPT = encodeURIComponent(args.slice(1).join(' '));

  try {
    // Faz a requisi√ß√£o para a API do LetMeGPT
    const data = await fetchJson(`https://world-ecletix.onrender.com/api/letmegpt?query=${queryLetMeGPT}`);

    if (data.resposta) {
      loli.sendMessage(from, { text: `üó£Ô∏è Resposta do LetMeGPT: ${data.resposta}` }, { quoted: info });
    } else if (data.mensagem) {
      reply(`üö® Erro: ${data.mensagem}`);
    } else {
      reply("üö® N√£o consegui obter a resposta do LetMeGPT. Tente novamente mais tarde.");
    }
  } catch (error) {
    console.error("Erro ao obter resposta do LetMeGPT:", error);
    reply("üö® N√£o foi poss√≠vel, tente novamente mais tarde.");
  }
  break;

case 'iasimi':
  if (!args[1]) {
    return reply('üö® Por favor, forne√ßa uma consulta para o SimSimi.');
  }

  const querySimsimi = encodeURIComponent(args.slice(1).join(' '));

  try {
    // Faz a requisi√ß√£o para a API do SimSimi
    const data = await fetchJson(`https://world-ecletix.onrender.com/api/simsimi?query=${querySimsimi}`);

    if (data.resposta) {
      loli.sendMessage(from, { text: `üó£Ô∏è Resposta do SimSimi: ${data.resposta}` }, { quoted: info });
    } else if (data.mensagem) {
      reply(`üö® Erro: ${data.mensagem}`);
    } else {
      reply("üö® N√£o consegui obter a resposta do SimSimi. Tente novamente mais tarde.");
    }
  } catch (error) {
    console.error("Erro ao obter resposta do SimSimi:", error);
    reply("üö® N√£o foi poss√≠vel, tente novamente mais tarde.");
  }
  break;


  case 'gpt4-o':
  if (!args[1]) {
    return reply('üö® Por favor, forne√ßa uma pergunta para o GPT-4-O.');
  }

  const textoGpt4O = encodeURIComponent(args.slice(1).join(' '));

  try {
    // Faz a requisi√ß√£o para a API do GPT-4-O
    const data = await fetchJson(`https://world-ecletix.onrender.com/api/gpt4-o?texto=${textoGpt4O}`);

    if (data.resposta) {
      loli.sendMessage(from, { text: `üó£Ô∏è Resposta do GPT-4-O: ${data.resposta}` }, { quoted: info });
    } else if (data.mensagem) {
      reply(`üö® Erro: ${data.mensagem}`);
    } else {
      reply("üö® N√£o consegui obter a resposta do GPT-4-O. Tente novamente mais tarde.");
    }
  } catch (error) {
    console.error("Erro ao obter resposta do GPT-4-O:", error);
    reply("üö® N√£o foi poss√≠vel, tente novamente mais tarde.");
  }
  break;
case 'gerarimg': // by luanzin dev
  if (!args[1]) {
    return reply('üö® Por favor, forne√ßa uma descri√ß√£o para gerar uma imagem.');
  }

  const promptGerarImg = encodeURIComponent(args.slice(1).join(' '));

  try {
    const response = await fetch(`https://api-ia.orbital.host/orbital/img-ai?prompt=${promptGerarImg}&model=v3`);
    const data = await response.json();
    
    if (data.url) {
      const imageBuffer = await getBuffer(data.url);
      loli.sendMessage(from, { image: imageBuffer, caption: `*Resultado para: _${args.slice(1).join(' ')}_*` }, { quoted: info });
    } else {
      reply("üö® N√£o consegui gerar a imagem.");
    }
  } catch (error) {
    console.error("Erro ao gerar a imagem:", error);
    reply("üö® N√£o foi poss√≠vel se conectar ao Orbital IA. Tente novamente mais tarde.");
  }
  break;
  
  case 'wikipedia': //Wikip√©dia atualizado
    try {
        if (!q) return reply('Insira o termo de busca para Wikip√©dia!');

        // Fun√ß√£o para enviar a imagem e o texto
        const sendImageURL = (texts, url) => {
            const textinhur = `\n${q}\n\n  ‚Ä¢ ${texts}`;
            
            // Envia a imagem e o texto
            loli.sendMessage(from, {
                image: {
                    url
                },
                caption: textinhur
            }, {
                quoted: info
            });
        };

        // Define a base URL da Wikipedia
        const base = 'https://pt.m.wikipedia.org';

        // Faz a busca na Wikipedia
        const { data } = await axios.get(`${base}/w/index.php?search=${q}&title=Special:Search&profile=advanced&fulltext=1&ns0=1`);

        const $ = cheerio.load(data);
        const array = [];

        // Captura os links de resultados
        $('.mw-search-result-heading').each(function() {
            const ref = $(this).find('a').attr('href');
            if (ref) {
                array.push(ref);
            }
        });

        // Verifica se h√° resultados na pesquisa
        if (array.length === 0) {
            return reply("Nenhum resultado encontrado para o termo de busca.");
        }

        // Acessa o primeiro link de resultado
        const { data: body } = await axios.get(base + array[0]);
        const $$ = cheerio.load(body);
        
        // Captura a imagem do artigo ou define uma imagem padr√£o
        const image = 'https:' + ($$('a.mw-file-description').find('img').attr('src') || '//pngimg.com/uploads/wikipedia/wikipedia_PNG35.png');

        // Captura o conte√∫do dos par√°grafos
        let contents = '';
        $$('p').each(function() {
            contents += $$(this).text().trim() + '\n';
        });

        // Envia os resultados
        sendImageURL(contents, image);
    } catch (e) {
        console.error(e);
        reply('Erro ao executar o comando.');
    }
    break;
case 'sabetudo':
  // Verifica se a mensagem cont√©m uma pergunta
  if (!args[1]) {
    return reply('üö® Por favor, forne√ßa uma pergunta. Exemplo: !sabetudo Qual √© a sua vers√£o?');
  }

  // Concatena a pergunta a partir dos argumentos
  const pergunta = encodeURIComponent(args.slice(1).join(' '));

  reply("üîÑ Enviando sua pergunta para o SabeTudo...");

  try {
    // Faz a requisi√ß√£o para a nova API do SabeTudo
    const response = await fetch(`https://world-ecletix.onrender.com/api/sabetudo?texto=${pergunta}`);
    const data = await response.json();
    
    // Verifica se a resposta cont√©m um campo `resposta` e envia a resposta
    if (data.resposta) {
      loli.sendMessage(sender, { text: `üó£Ô∏è Resposta do SabeTudo: ${data.resposta}` }, { quoted: info });
    } else {
      reply("üö® N√£o consegui obter a resposta do SabeTudo. Tente novamente mais tarde.");
    }
  } catch (error) {
    console.error("Erro ao obter resposta do SabeTudo:", error);
    reply("üö® N√£o foi poss√≠vel se conectar ao SabeTudo. Tente novamente mais tarde.");
  }
  break;
  
case 'infiel':
if(!isGroup) return reply(`so pode em grupos`)
if(!isModobn) return reply(`Este tipo de comando s√≥ pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se voc√™ for, apenas digite ${prefix}modobrincadeira 1`)  
async function InfielMsg() {
random = `${Math.floor(Math.random() * 110)}`
traic = random
infiel = random
if(infiel <= 15 ) {var trai = 'Parab√©ns, voc√™ √© fiel üëèüëè'}
else if(infiel == 16 ) {var trai = 'tenho minha desconfian√ßa ü§®'}
else if(infiel == 17 ) {var trai = 'tenho minha desconfian√ßa ü§®'}
else if(infiel == 18 ) {var trai = 'tenho minha desconfian√ßa ü§®'}
else if(infiel == 19 ) {var trai = 'tenho minha desconfian√ßa ü§®'}
else if(infiel == 20 ) {var trai = 'tenho minha desconfian√ßa ü§®'}
else if(infiel == 21 ) {var trai = 'tenho minha desconfian√ßa ü§®'}
else if(infiel == 22 ) {var trai = 'tenho minha desconfian√ßa ü§®'}
else if(infiel == 23 ) {var trai = 'tenho minha desconfian√ßa ü§®'}
else if(infiel == 24 ) {var trai = 'tenho minha desconfian√ßa ü§®'}
else if(infiel == 25 ) {var trai = 'tenho minha desconfian√ßa ü§®'}
else if(infiel == 26 ) {var trai = 'tenho minha desconfian√ßa ü§®'}
else if(infiel == 27 ) {var trai = 'tenho minha desconfian√ßa ü§®'}
else if(infiel == 28 ) {var trai = 'tenho minha desconfian√ßa ü§®'}
else if(infiel == 29 ) {var trai = 'tenho minha desconfian√ßa ü§®'}
else if(infiel == 30 ) {var trai = 'voc√™ √© infiel as vezes...üò∂'}
else if(infiel == 31 ) {var trai = 'voc√™ √© infiel as vezes...üò∂'}
else if(infiel == 32 ) {var trai = 'voc√™ √© infiel as vezes...üò∂'}
else if(infiel == 33 ) {var trai = 'voc√™ √© infiel as vezes...üò∂'}
else if(infiel == 34 ) {var trai = 'voc√™ √© infiel as vezes...üò∂'}
else if(infiel == 35 ) {var trai = 'voc√™ √© infiel as vezes...üò∂'}
else if(infiel == 36 ) {var trai = 'voc√™ √© infiel as vezes...üò∂'}
else if(infiel == 37 ) {var trai = 'voc√™ √© infiel as vezes...üò∂'}
else if(infiel == 38 ) {var trai = 'voc√™ √© infiel as vezes...üò∂'}
else if(infiel == 39 ) {var trai = 'voc√™ √© infiel as vezes...üò∂'}
else if(infiel == 40 ) {var trai = 'voc√™ √© viciado(a) em trair ü´£'}
else if(infiel == 41 ) {var trai = 'voc√™ √© viciado(a) em trair ü´£'}
else if(infiel == 42 ) {var trai = 'voc√™ √© viciado(a) em trair ü´£'}
else if(infiel == 43 ) {var trai = 'voc√™ √© viciado(a) em trair ü´£'}
else if(infiel == 44 ) {var trai = 'voc√™ √© viciado(a) em trair ü´£'}
else if(infiel == 45 ) {var trai = 'voc√™ √© viciado(a) em trair ü´£'}
else if(infiel == 46 ) {var trai = 'voc√™ √© viciado(a) em trair ü´£'}
else if(infiel == 47 ) {var trai = 'voc√™ √© viciado(a) em trair ü´£'}
else if(infiel == 48 ) {var trai = 'voc√™ √© viciado(a) em trair ü´£'}
else if(infiel == 49 ) {var trai = 'voc√™ √© viciado(a) em trair ü´£'}
else if(infiel == 50 ) {var trai = 'voc√™ √© viciado(a) em trair ü´£'}
else if(infiel == 51 ) {var trai = 'voc√™ √© viciado(a) em trair ü´£'}
else if(infiel == 52 ) {var trai = 'voc√™ √© viciado(a) em trair ü´£'}
else if(infiel == 53 ) {var trai = 'voc√™ √© viciado(a) em trair ü´£'}
else if(infiel == 54 ) {var trai = 'voc√™ √© viciado(a) em trair ü´£'}
else if(infiel == 55 ) {var trai = 'voc√™ √© viciado(a) em trair ü´£'}
else if(infiel == 56 ) {var trai = 'voc√™ √© viciado(a) em trair ü´£'}
else if(infiel == 57 ) {var trai = 'voc√™ √© viciado(a) em trair ü´£'}
else if(infiel == 58 ) {var trai = 'voc√™ √© viciado(a) em trair ü´£'}
else if(infiel == 59 ) {var trai = 'voc√™ √© viciado(a) em trair ü´£'}
else if(infiel == 60 ) {var trai = 'que isso, quer bater o record de trai√ß√£o? üò≥'}
else if(infiel == 61 ) {var trai = 'que isso, quer bater o record de trai√ß√£o? üò≥'}
else if(infiel == 62 ) {var trai = 'que isso, quer bater o record de trai√ß√£o? üò≥'}
else if(infiel == 63 ) {var trai = 'que isso, quer bater o record de trai√ß√£o? üò≥'}
else if(infiel == 64 ) {var trai = 'que isso, quer bater o record de trai√ß√£o? üò≥'}
else if(infiel == 65 ) {var trai = 'que isso, quer bater o record de trai√ß√£o? üò≥'}
else if(infiel == 66 ) {var trai = 'que isso, quer bater o record de trai√ß√£o? üò≥'}
else if(infiel == 67 ) {var trai = 'que isso, quer bater o record de trai√ß√£o? üò≥'}     
else if(infiel == 68 ) {var trai = 'que isso, quer bater o record de trai√ß√£o? üò≥'}     
else if(infiel == 69 ) {var trai = 'que isso, quer bater o record de trai√ß√£o? üò≥'}     
else if(infiel == 70 ) {var trai = 'que isso, quer bater o record de trai√ß√£o? üò≥'}    
else if(infiel == 71 ) {var trai = 'que isso, quer bater o record de trai√ß√£o? üò≥'}    
else if(infiel == 72 ) {var trai = 'que isso, quer bater o record de trai√ß√£o? üò≥'}     
else if(infiel == 73 ) {var trai = 'que isso, quer bater o record de trai√ß√£o? üò≥'}     
else if(infiel == 74 ) {var trai = 'que isso, quer bater o record de trai√ß√£o? üò≥'}     
else if(infiel == 75 ) {var trai = 'que isso, quer bater o record de trai√ß√£o? üò≥'}
else if(infiel == 76 ) {var trai = 'que isso, quer bater o record de trai√ß√£o? üò≥'}
else if(infiel == 77 ) {var trai = 'que isso, quer bater o record de trai√ß√£o? üò≥'}
else if(infiel == 78 ) {var trai = 'que isso, quer bater o record de trai√ß√£o? üò≥'}
else if(infiel == 79 ) {var trai = 'que isso, quer bater o record de trai√ß√£o? üò≥'}
else if(infiel == 80 ) {var trai = 'que isso, quer bater o record de trai√ß√£o? üò≥'}
else if(infiel == 81 ) {var trai = 'que isso, quer bater o record de trai√ß√£o? üò≥'}
else if(infiel == 82 ) {var trai = 'que isso, quer bater o record de trai√ß√£o? üò≥'}
else if(infiel == 83 ) {var trai = 'que isso, quer bater o record de trai√ß√£o? üò≥'}
else if(infiel == 84 ) {var trai = 'que isso, quer bater o record de trai√ß√£o? üò≥'}
else if(infiel >= 85 ) {var trai = 'vish... voc√™ √© t√£o fiel quanto o neymar...'}
var sandrokjk = [
`*ùöôùöéùöúùööùöûùöíùöúùöäùöóùöçùöò...*\n*„Ää ‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí„Äã0%*`,
`*ùöôùöéùöúùööùöûùöíùöúùöäùöóùöçùöò...*\n*„Ää ‚ñà‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí„Äã10%*`,
`*ùöôùöéùöúùööùöûùöíùöúùöäùöóùöçùöò...*\n*„Ää ‚ñà‚ñà‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí„Äã20%*`,
`*ùöôùöéùöúùööùöûùöíùöúùöäùöóùöçùöò...*\n*„Ää ‚ñà‚ñà‚ñà‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí„Äã30%*`,
`*ùöôùöéùöúùööùöûùöíùöúùöäùöóùöçùöò...*\n*„Ää ‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí„Äã40%*`,
`*ùöôùöéùöúùööùöûùöíùöúùöäùöóùöçùöò...*\n*„Ää ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñí‚ñí‚ñí„Äã50%*`,
`*ùöôùöéùöúùööùöûùöíùöúùöäùöóùöçùöò...*\n*„Ää ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñí‚ñí„Äã60%*`,
`*ùöôùöéùöúùööùöûùöíùöúùöäùöóùöçùöò...*\n*„Ää ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñí„Äã70%*`,
`*ùöôùöéùöúùööùöûùöíùöúùöäùöóùöçùöò...*\n*„Ää ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí„Äã80%*`,
`*ùöôùöéùöúùööùöûùöíùöúùöäùöóùöçùöò...*\n*„Ää ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí„Äã90%*`,
`*ùöåùöòùöñùöôùöïùöéùöùùöò*\n*„Ää ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà„Äã100%*`,
`*O quanto voc√™ √© infiel?*\n\n*„Äå @${sender_ou_n.split("@")[0]} „Äçseu n√≠vel de infiel √©: ‚ù∞ ${random}% ‚ù±*\n\n*${trai}*`
]
let { key } = await loli.sendMessage(from, {text: `*‚ù∞Pesquisando a sua ficha de infiel: „Äå @${sender_ou_n.split("@")[0]} „Äç aguarde...  ‚ù±*`, mentions: [sender_ou_n]}, {quoted: info})
setTimeout(async() => {
for (let i = 0; i < sandrokjk.length; i++) 
await loli.sendMessage(from, {text: sandrokjk[i], mentions: [sender_ou_n], edit: key });
}, 1500)
}
InfielMsg()
break

case 'wallpapers4k': {
//by Daniel >\<
data = fs.readFileSync('./loli/mais/wallpapers4k.js');
jsonData = JSON.parse(data);
randIndex = Math.floor(Math.random() * jsonData.length);
var foda =[`aqui est√° o seu ${command} ${pushname}`]
var zaltin = foda[Math.floor(Math.random() * foda.length)]
randKey = jsonData[randIndex];
imagem = await getBuffer(randKey.result)
let thumbInfo = `${zaltin}`;
blabla = await getBuffer(`https://telegra.ph/file/0e2989e6947b464fa66b8.jpg`);
loli.sendMessage(from, {image: imagem, caption: `${thumbInfo}`},{quoted: info})
}
break
          case 'videopralink2':
          case 'gerarvideo':
            try {
              if (isQuotedVideo) {
                boij = isQuotedVideo ? info.message.extendedTextMessage.contextInfo.quotedMessage.videoMessage
                  : info.message.videoMessage;
                const fetch = require('node-fetch');
                const FormData = require('form-data');
                const fs = require('fs');
                async function uploadVideoToTelegraph(videoBuffer) {
                  const form = new FormData();
                  form.append('file', videoBuffer, { filename: 'media' });

                  const response = await fetch('https://telegra.ph/upload', {
                    method: 'POST',
                    body: form,
                  });
                  const data = await response.json();
                  if (data && data[0] && data[0].src) {
                    return 'https://telegra.ph' + data[0].src;
                  } else {
                    throw new Error('Failed to retrieve the image URL from the response.');
                  }
                }
                const owgi = await getFileBuffer(boij, "video");
                const imageUrl = await uploadVideoToTelegraph(owgi);
                reply(imageUrl);
              } else {
                reply('marque o video')
              }
            } catch (e) {
              console.log(e)
              reply('error...')
            }
            break

case 'simih':
if (!isGroupAdmins) return reply(enviar.msg.adm)
if (args.length < 1) return reply('Hmmmm')
if (Number(args[0]) === 1) {
if (isSimi) return reply('O modo Simi est√° ativo')
samih.push(from)
fs.writeFileSync('./arquivos/usuarios/simi.json', JSON.stringify(samih))
reply('Ativado com sucesso o modo simi neste grupo üòó')
} else if (Number(args[0]) === 0) {
if(!isSimi) return reply('J√° est√° Desativado.')
samih.splice(from, 1)
fs.writeFileSync('./arquivos/usuarios/simi.json', JSON.stringify(samih))
reply('Desativado modo simi com sucesso neste grupo üò°Ô∏è')
} else {
reply('1 para ativar, 0 para desativar, lerdao vc em')
}
break

case 'simih2':
if (!isGroupAdmins) return reply(enviar.msg.adm)
if (args.length < 1) return reply('Hmmmm')
if (Number(args[0]) === 1) {
if (isSimi2) return reply('O modo Simi est√° ativo')
samih2.push(from)
fs.writeFileSync('./arquivos/funcoes/simi.json', JSON.stringify(samih2))
reply('Ativado com sucesso o modo simi neste grupo üòó, Este simih2 ele aprende as respostas e perguntas das pessoas, conforme vai falando, por isso, s√≥ recomendo utilizar ele no termux, pois no site ou lugar diferente do termux que voc√™ utilizar, ele n√£o vai armazenar os dados nescessarios')
} else if (Number(args[0]) === 0) {
if(!isSimi2) return reply('J√° est√° Desativado.')
samih2.splice(from, 1)
fs.writeFileSync('./arquivos/funcoes/simi.json', JSON.stringify(samih2))
reply('Desativado modo simi com sucesso neste grupo üò°Ô∏è')
} else {
reply('1 para ativar, 0 para desativar, lerdao vc em')
}
break



case 'pornovid':{
if(!isPremium) return reply(msg.premium)
reply(`J√° estou enviando no pv ${pushname}`)
await loli.sendMessage(from, {react: { text: "üîû", key: info.key }})
  bla = JSON.parse(fs.readFileSync("./arquivos/sexv.json")) 
button = [
  {buttonId: `${prefix}pornovid`, buttonText: {displayText: 'üòà[suivant]üòà'}, type: 1}
]
buttonMessage = {
 video: {url: bla[Math.floor(Math.random() * bla.length)],
 quoted: info},
 caption: 'üîû',
 footer: `@${pushname}`,
 button: button,
 headerType: 1
}
loli.sendMessage(sender, buttonMessage)
}
break


case "art1":
loli.sendMessage(from, {text: `
 . ___________________
 ‚ñï‚ïÆ‚ï≠‚îª‚îª‚ïÆ‚ï≠‚îª‚îª‚ïÆ‚ï≠‚ñï‚ïÆ‚ï≤
 ‚ñï‚ïØ‚îÉ‚ï≠‚ïÆ‚îÉ‚îÉ‚ï≠‚ïÆ‚îÉ‚ï∞‚ñï‚ïØ‚ï≠‚ñè
 ‚ñï‚ï≠‚îª‚îª‚îª‚îõ‚îó‚îª‚îª‚îõ   ‚ñï  ‚ï∞‚ñè
 ‚ñï‚ï∞‚îÅ‚îÅ‚îÅ‚îì‚îà‚îà‚îà‚ï≠‚ïÆ‚ñï‚ï≠‚ïÆ‚ñè
 ‚ñï‚ï≠‚ïÆ‚ï∞‚î≥‚î≥‚î≥‚î≥‚ïØ‚ï∞‚ïØ‚ñï‚ï∞‚ïØ‚ñè
 ‚ñï‚ï∞‚ïØ‚îà‚îó‚îõ‚îó‚îõ‚îà‚ï≠‚ïÆ‚ñï‚ïÆ‚îà‚ñè`, quoted: info})
break

case "art2":
loli.sendMessage(from, {text: `
‚ñë‚ñë‚ïî‚ïê‚ïê‚ïó‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ïî‚ïê‚ïê‚ïó‚ñë‚ñë
 ‚ñë‚ïö‚ï£‚ñê‚ñê‚ï†‚ïù‚ñë‚ñë‚ïî‚ïê‚ïê‚ïó‚ñë‚ñë‚ïö‚ï£‚ñê‚ñê‚ï†‚ïù‚ñë
 ‚ñë‚ñë‚ïö‚ï¶‚ï¶‚ïù‚ñë‚ñë‚ïö‚ï£‚ñå‚ñå‚ï†‚ïù‚ñë‚ñë‚ïö‚ï¶‚ï¶‚ïù‚ñë‚ñë
 ‚ñë‚ñë‚ñë‚ïö‚ïö‚ñë‚ñë‚ñë‚ñë‚ïö‚ï¶‚ï¶‚ïù‚ñë‚ñë‚ñë‚ñë‚ïö‚ïö‚ñë‚ñë‚ñë
 ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ïù‚ïù‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë `, quoted: info})
break

case "art3":
loli.sendMessage(from, {text: `
‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñê‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå
 ‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñê‚ñë‚ñÄ‚ñë‚ñÄ‚ñë‚ñÄ‚ñë‚ñå
 ‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñê‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñå
 ‚ñÑ‚ñÄ‚ñÄ‚ñÄ‚ñà‚ñí‚ñê‚ñë‚ñÄ‚ñÄ‚ñÑ‚ñÄ‚ñÄ‚ñë‚ñå‚ñí‚ñà‚ñÄ‚ñÄ‚ñÄ‚ñÑ
 ‚ñå‚ñå‚ñå‚ñå‚ñê‚ñí‚ñÑ‚ñå‚ñë‚ñÑ‚ñÑ‚ñÑ‚ñë‚ñê‚ñÑ‚ñí‚ñå‚ñê‚ñê‚ñê‚ñê `, quoted: info})
break

case "art4":
loli.sendMessage(from, {text: `
‚ñë‚ñÑ‚ñë‚ñà‚ñë‚ñë‚ñë‚ñÑ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÑ‚ñë‚ñë‚ñë‚ñà‚ñë‚ñÑ‚ñë
 ‚ñÑ‚ñÑ‚ñÄ‚ñÑ‚ñë‚ñë‚ñë‚ñà‚îÄ‚ñÄ‚îÄ‚ñÄ‚îÄ‚ñà‚ñë‚ñë‚ñë‚ñÑ‚ñÄ‚ñÑ‚ñÑ
 ‚ñë‚ñë‚ñë‚ñë‚ñÄ‚ñÑ‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñÑ‚ñÄ‚ñë‚ñë‚ñë‚ñë
 ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚îÄ‚îÄ‚îÄ‚îÄ‚ñÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë
 ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚îÄ‚îÄ‚îÄ‚îÄ‚ñÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë   `, quoted: info})
break

case "art5":
loli.sendMessage(from, {text: `
 ‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí
 ‚ñí‚ñí‚ñí‚ñí‚ñì‚ñí‚ñí‚ñì‚ñí‚ñí‚ñí‚ñí
 ‚ñí‚ñí‚ñí‚ñí‚ñì‚ñí‚ñí‚ñì‚ñí‚ñí‚ñí‚ñí
 ‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí
 ‚ñí‚ñì‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñì‚ñí
 ‚ñí‚ñí‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñí‚ñí
 ‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí`, quoted: info})
break

case "art6":
loli.sendMessage(from, {text: `
‚îà‚îà‚îà‚ï±‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ï≤‚îà‚ï≠‚îÅ‚îÅ‚îÅ‚ïÆ‚îà‚îà
 ‚îà‚îà‚ñï‚îà‚ï≠‚îÅ‚ïÆ‚ï≠‚îÅ‚ïÆ‚îà‚ñè‚îÉZALTS.‚îÉ‚îà‚îà
 ‚îà‚îà‚ñï‚îà‚îÉ‚ï≠‚ïØ‚ï∞‚ïÆ‚îÉ‚îà‚ñè‚ï∞‚î≥‚îÅ‚îÅ‚ïØ‚îà‚îà
 ‚îà‚îà‚ñï‚îà‚ï∞‚ïØ‚ï≠‚ïÆ‚ï∞‚ïØ‚îà‚ñè‚îà‚îÉ‚îà‚îà‚îà‚îà‚îà
 ‚îà‚îà‚ñï‚îà‚îà‚îà‚îÉ‚îÉ‚îà‚îà‚îà‚ñè‚îÅ‚ïØ‚îà‚îà‚îà‚îà‚îà
 ‚îà‚îà‚ñï‚îà‚îà‚îà‚ï∞‚ïØ‚îà‚îà‚îà‚ñè‚îà‚îà‚îà‚îà‚îà‚îà‚îà
 ‚îà‚îà‚ñï‚ï±‚ï≤‚ï±‚ï≤‚ï±‚ï≤‚ï±‚ï≤‚ñè‚îà‚îà‚îà‚îà‚îà‚îà‚îà`, quoted: info})
break

case "art7":
loli.sendMessage(from, {text: `
‚îÄ‚îÄ‚ñí‚ñí‚ñí‚ñí‚ñí‚îÄ‚îÄ‚îÄ‚îÄ‚ñÑ‚ñà‚ñà‚ñà‚ñà‚ñÑ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
 ‚îÄ‚ñí‚îÄ‚ñÑ‚ñí‚îÄ‚ñÑ‚ñí‚îÄ‚îÄ‚ñà‚ñà‚ñà‚ñÑ‚ñà‚ñÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
 ‚îÄ‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚îÄ‚ñê‚ñà‚ñà‚ñà‚ñà‚îÄ‚îÄ‚ñà‚îÄ‚îÄ‚ñà‚îÄ‚îÄ
 ‚îÄ‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚îÄ‚îÄ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÑ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
 ‚îÄ‚ñí‚îÄ‚ñí‚îÄ‚ñí‚îÄ‚ñí‚îÄ‚îÄ‚îÄ‚ñÄ‚ñà‚ñà‚ñà‚ñà‚ñÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
 `, quoted: info})
break

case "art8":
loli.sendMessage(from, {text: `
‚ï≤‚ï≤‚ï≠‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïÆ‚ï±‚ï±
 ‚ï≤‚ï≠‚ïØ‚ï≠‚îÅ‚ïÆ‚îà‚ï≠‚îÅ‚ïÆ‚ï∞‚ïÆ‚ï±
 ‚ï≤‚îÉ‚îà‚îÉ‚îà‚ñä‚îà‚îÉ‚îà‚ñä‚îà‚îÉ‚ï±
 ‚ï≤‚îÉ‚îà‚îó‚îÅ‚îõ‚îà‚îó‚îÅ‚îõ‚îà‚îÉ‚ï±
 ‚ï±‚îÉ‚îà‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì‚îà‚îÉ‚ï≤
 ‚ï±‚îÉ‚îà‚îÉ‚îà‚îà‚ï≠‚îÅ‚ïÆ‚îÉ‚îà‚îÉ‚ï≤
 ‚ï±‚ï∞‚ïÆ‚ï∞‚îÅ‚îÅ‚îª‚îÅ‚îª‚ïØ‚ï≠‚ïØ‚ï≤
 ‚ï±‚ï±‚ï∞‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïØ‚ï≤‚ï≤`, quoted: info})
break

case "art9":
loli.sendMessage(from, {text: `
    ‚ï≠‚îÅ‚îÅ‚ïÆ‚îà‚îà‚îà‚ï≠‚îÅ‚îÅ‚ïÆ‚îà‚îà‚îà‚îà‚îà
 ‚îÉ‚ï≠‚ïÆ‚î£‚îÅ‚îÅ‚îÅ‚î´‚ï≠‚ïÆ‚îÉ‚îà‚ï≠‚î≥‚î≥‚ïÆ
 ‚ï∞‚îÅ‚î≥‚ïØ‚ñÜ‚îà‚ñÜ‚ï∞‚î≥‚îÅ‚ïØ‚îà‚îÉ‚îÉ‚îÉ‚îÉ
 ‚îà‚îà‚îÉ‚îì‚îà‚óØ‚îà‚îè‚îÉ‚îà‚îà‚ï≠‚î´‚îó‚îó‚îÉ
 ‚îà‚îà‚îÉ‚ï∞‚î≥‚î≥‚î≥‚ïØ‚îÉ‚îà‚îà‚îÉ‚îÉ‚ï≠‚îÅ‚îÉ
 ‚ï≠‚îÅ‚îª‚ïÆ‚îó‚îª‚îõ‚ï≠‚îª‚îÅ‚ïÆ‚ï∞‚î≥‚îÅ‚î≥‚ïØ
 ‚îÉ‚îà‚îà‚ï∞‚îÅ‚îÅ‚îÅ‚ïØ‚îà‚îà‚ï∞‚îÅ‚îõ‚îà‚îÉ‚îà`, quoted: info})
break

case "art10":
loli.sendMessage(from, {text: `
‚óã ÔºøÔºøÔºøÔºø
 „ÄÄ„ÄÄ   ‚à•„ÄÄ„ÄÄ„ÄÄ„ÄÄ|
 „ÄÄ„ÄÄ   DANIELüë®‚Äçüíª
 „ÄÄ„ÄÄ   ‚à•„ÄÄ„ÄÄ„ÄÄ„ÄÄ|
 „ÄÄ„ÄÄ   ‚à•Ôø£Ôø£Ôø£Ôø£
  ‚àßÔºø‚àß
 ( ÔΩ•œâÔΩ•‚à•
 ‰∏∂„ÄÄ„Å§Ôºê
  „Åó„ÉºÔº™ `, quoted: info})
break

case "art11":
loli.sendMessage(from, {text: `
A____A
 |„Éª„ÖÖ„Éª|
 |„Å£„ÄÄÔΩÉ|
 |„ÄÄ„ÄÄ„ÄÄ|
 |„ÄÄ„ÄÄ„ÄÄ|
 |„ÄÄ„ÄÄ„ÄÄ|
 |„ÄÄ„ÄÄ„ÄÄ|
 |„ÄÄ„ÄÄ„ÄÄ|
 UÔø£Ôø£U`, quoted: info})
break

case "art12":
loli.sendMessage(from, {text: `
‚ïÆ‚ï∞‚ïÆ‚ïÆ‚ñï‚ï≤‚ï∞‚ïÆ‚ï≠‚ïØ‚ï±‚ñè‚ï≠‚ï≠‚ï≠‚ï≠
 ‚ï∞‚ï∞‚ïÆ‚ï∞‚ï≠‚ï±‚ñî‚ñî‚ñî‚ñî‚ï≤‚ïÆ‚ïØ‚ï≠‚ïØ
 ‚îè‚îÅ‚îì‚îè‚î´‚ï≠‚ñÖ‚ï≤‚ï±‚ñÖ‚ïÆ‚î£‚îì‚ï≠‚ïë‚ïë‚ïë
 ‚ï∞‚î≥‚ïØ‚ï∞‚î´‚îó‚îÅ‚ï≠‚ïÆ‚îÅ‚îõ‚î£‚ïØ‚ïØ‚ïö‚ï¨‚ïù
 ‚ï≠‚îª‚ïÆ‚ï±‚ï∞‚ïÆ‚ï∞‚îÅ‚îÅ‚ïØ‚ï≠‚ïØ‚ï≤‚îä   ‚ïë
 ‚ï∞‚î≥‚î´‚ñî‚ï≤‚ï∞‚î≥‚îÅ‚îÅ‚î≥‚ïØ‚ï±‚ñî‚îä   ‚ïë
 ‚îà‚îÉ‚ï∞‚îÅ‚îÅ‚ï≤‚ñï‚ï≤‚ï±‚ñè‚ï±‚îÅ‚îÅ‚îÅ‚î¨‚ï®‚ïÆ
 ‚îà‚ï∞‚îÅ‚îÅ‚ïÆ‚îä‚ñï‚ï±‚ï≤‚ñè‚îä‚ï≠‚îÅ‚îÅ‚î¥‚ï•‚ïØ `, quoted: info})
break

case "art13":
loli.sendMessage(from, {text: `
.    ‚ñºÔø£Ôºû-‚Äï-ÔºúÔø£‚ñº
 „ÄÄ„ÄÄÔºπ„ÄÄ            Ôºπ
   /\   / „ÄÄ ‚óè    o  ‚óèÔºâ
 Ôºº  ÔΩú„ÄÄ „Å§„ÄÄ    „ÉΩ`, quoted: info})
break

case "art14":
loli.sendMessage(from, {text: `
üëäüèøüëáüèøüëáüèøüëáüèøüëáüèøüëáüèøüëáüèøüëáüèøüëáüèøüëáüèøüëäüèø
üëâüèøüëäüèæüëáüèæüëáüèæüëáüèæüëáüèæüëáüèæüëáüèæüëáüèæüëäüèæüëàüèø
üëâüèøüëâüèæüëäüèΩüëáüèΩüëáüèΩüëáüèΩüëáüèΩüëáüèΩüëäüèΩüëàüèæüëàüèø
üëâüèøüëâüèæüëâüèΩüëäüèºüëáüèºüëáüèºüëáüèºüëäüèºüëàüèΩüëàüèæüëàüèø
üëâüèøüëâüèæüëâüèΩüëâüèºüëäüèªüëáüèªüëäüèªüëàüèºüëàüèΩüëàüèæüëàüèø
üëâüèøüëâüèæüëâüèΩüëâüèºüëâüèªüè≥Ô∏è‚Äçüåà?üëàüèªüëàüèºüëàüèΩüëàüèæüëàüèø
üëâüèøüëâüèæüëâüèΩüëâüèºüëäüèªüëÜüèªüëäüèªüëàüèºüëàüèΩüëàüèæüëàüèø
üëâüèøüëâüèæüëâüèΩüëäüèºüëÜüèºüëÜüèºüëÜüèºüëäüèºüëàüèΩüëàüèæüëàüèø
üëâüèøüëâüèæüëäüèΩüëÜüèΩüëÜüèΩüëÜüèΩüëÜüèΩüëÜüèΩüëäüèΩüëàüèæüëàüèø
üëâüèøüëäüèæüëÜüèæüëÜüèæüëÜüèæüëÜüèæüëÜüèæüëÜüèæüëÜüèæüëäüèæüëàüèø
üëäüèøüëÜüèøüëÜüèøüëÜüèøüëÜüèøüëÜüèøüëÜüèøüëÜüèøüëÜüèøüëÜüèøüëäüèø`, quoted: info})
break

case "art15":
  loli.sendMessage(from, {text: `
  ‚îà‚îà‚ñï‚ï≤‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ï±‚ñè‚îà‚îà‚îà‚îà‚îà‚îà
‚îà‚îà‚îà‚ï≤‚ï±‚ï≠‚ï±‚ï≤‚ï±‚ï≤‚îà‚îà‚îà‚îà‚îà‚îà
‚îà‚ï±‚ñî‚ñî‚îà‚îä‚ñè‚ñï‚ñè‚ñï‚îà‚îà‚îà‚îà‚îà‚îà
‚ñï‚ñÇ‚ï±‚ñî‚ï≥‚ñî‚ï≤‚ñä‚ñè‚ñä‚ï±‚ñî‚ï≤‚ñî‚ï≤‚îà
‚îà‚îà‚îà‚îà‚ñè‚ñï‚ñè‚ñî‚ñî‚ñî‚ñï‚ñã‚ñï‚ñï‚ñã‚ñè
‚îà‚îà‚îà‚îà‚ï≤‚îà‚ï≤‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ï±‚îà
‚îà‚îà‚îà‚îà‚ñï‚ï≤‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ï±‚îà‚îà‚îà‚îà
‚îà‚îà‚îà‚ï±‚ñî‚ï≤‚ñï‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà
‚îà‚îà‚îà‚ï±‚ñè‚îà‚îà‚îà‚îà‚îà‚ï±‚ñî‚ñî‚ñî‚ñî‚ï≤‚îà‚îà‚îà‚îà
‚îà‚îà‚îà‚ñè‚ñè‚îà‚îà‚îà‚îà‚îà‚ñè‚ï≤‚ñï‚ñã‚ñï‚ñã‚ñè‚îà‚îà‚îà
‚îà‚îà‚îà‚ï≤‚ï≤‚îà‚îà‚îà‚îà‚îà‚ñè‚îà‚ñè‚îà‚ñî‚ñî‚ñî‚ñÜ‚îà‚îà
‚îà‚îà‚îà‚îà‚ï≤‚ñî‚ñî‚ñî‚ñî‚ñî‚ï≤‚ï±‚îà‚ï∞‚î≥‚î≥‚î≥‚ïØ‚îà‚îà
‚îà‚ï±‚ï≤‚ï±‚ï≤‚ñè‚îà‚îà‚îà‚îà‚îà‚îà‚ñï‚ñî‚ï∞‚îÅ‚ïØ‚îà‚îà‚îà
‚îà‚ñî‚ï≤‚ï≤‚ï±‚ï±‚ñî‚ï±‚ñî‚ñî‚ï≤‚ï≤‚ï≤‚ï≤‚îà‚îà‚îà‚îà‚îà‚îà
‚îà‚îà‚îà‚ï≤‚ï±‚ï≤‚ï±‚îà‚îà‚îà‚îà‚ï≤‚ï≤‚ñÇ‚ï≤‚ñÇ‚îà‚îà‚îà‚îà
‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚ï≤‚ï±‚ï≤‚ï±‚îà‚îà‚îà‚îà
  `, quoted: info})
break

case 'edit1': 

					if (args.length < 1) return reply('qual o nome?')
					teks = body.slice(7)
					if (teks.length > 10) return reply('O texto √© longo, at√© 10 caracteres')
					reply('*Estou fazendo, se der erro tente novamente ‚úì*')
					venomk = await getBuffer(`https://lollityp.sirv.com/venom_api.jpg?text.0.text=${teks}&text.0.color=000000&text.0.font.family=Pacifico&text.0.font.weight=600&text.0.background.color=ffffff&text.0.outline.color=ffffff&text.0.outline.width=10&text.0.outline.blur=17`)
					loli.sendMessage(m.chat, { image: venomk }, { quoted: info})
					break

case 'edit2':
                           
					if (args.length < 1) return reply('qual o nome?')
					teks = body.slice(7)
					if (teks.length > 10) return reply('O texto √© longo, at√© 10 caracteres')
					reply('*Estou fazendo, se der erro tente novamente ‚úì*')
					venomk = await getBuffer(`https://lollityp.sirv.com/venom_apis2.jpg?text.0.text=${teks}&text.0.position.gravity=center&text.0.position.x=1%25&text.0.position.y=16%25&text.0.size=80&text.0.color=ff2772&text.0.opacity=67&text.0.font.family=Bangers&text.0.font.style=italic&text.0.background.opacity=50&text.0.outline.width=6`)
					loli.sendMessage(m.chat, { image: venomk }, { quoted: info})
					break

case 'edit3':
                    
					if (args.length < 1) return reply('qual o nome?')
					teks = body.slice(7)
					if (teks.length > 10) return reply('O texto √© longo, at√© 10 caracteres')
					reply('*Estou fazendo, se der erro tente novamente ‚úì*')
					venomk = await getBuffer(`https://lollityp.sirv.com/venom_apis3.jpg?text.0.text=${teks}&text.0.position.gravity=north&text.0.position.y=59%25&text.0.size=89&text.0.color=000000&text.0.opacity=71&text.0.font.family=Changa%20One&text.0.font.style=italic&text.0.background.opacity=10&text.0.outline.color=ffffff&text.0.outline.width=3`)
					loli.sendMessage(m.chat, { image: venomk }, { quoted: info})
					break	
					
					case 'edit4':
                    
					if (args.length < 1) return reply('qual o nome?')
					teks = body.slice(7)
					if (teks.length > 10) return reply('O texto √© longo, at√© 10 caracteres')
					reply('*Estou fazendo, se der erro tente novamente ‚úì*')
					venomk = await getBuffer(`https://lollityp.sirv.com/venom_apis.jpg?text.0.text=${teks}&text.0.position.gravity=center&text.0.position.x=11%25&text.0.position.y=22%25&text.0.size=20&text.0.color=241b1b&text.0.opacity=33&text.0.font.family=Rock%20Salt&text.0.font.style=italic&text.0.background.opacity=49`)
					loli.sendMessage(m.chat, { image: venomk }, { quoted: info})
					break	
					
					case 'edit5':
                   
					if (args.length < 1) return reply('qual o nome?')
					teks = body.slice(7)
					if (teks.length > 10) return reply('O texto √© longo, at√© 10 caracteres')
					reply('*Estou fazendo, se der erro tente novamente ‚úì*')
					venomk = await getBuffer(`https://lollityp.sirv.com/venom_apis5.jpg?text.0.text=${teks}&text.0.position.gravity=center&text.0.position.x=1%25&text.0.position.y=22%25&text.0.align=left&text.0.size=59&text.0.font.family=Permanent%20Marker&text.0.outline.color=df00ff&text.0.outline.width=2&text.0.outline.blur=18`)
					loli.sendMessage(m.chat, { image: venomk }, { quoted: info})
					break

case 'edit6':
                    
					if (args.length < 1) return reply('qual o nome?')
					teks = body.slice(7)
					if (teks.length > 10) return reply('O texto √© longo, at√© 10 caracteres')
					reply('*Estou fazendo, se der erro tente novamente ‚úì*')
					venomk = await getBuffer(`https://lollityp.sirv.com/venom_apis6.jpg?text.0.text=${teks}&text.0.position.gravity=north&text.0.position.x=1%25&text.0.position.y=50%25&text.0.size=68&text.0.color=464646&text.0.opacity=51&text.0.font.family=Sigmar%20One&text.0.background.opacity=2&text.0.outline.color=ffffff&text.0.outline.width=2&text.0.outline.opacity=61`)
					loli.sendMessage(m.chat, { image: venomk }, { quoted: info})
					break	
					
					case 'edit7':
                    
					if (args.length < 1) return reply('qual o nome?')
					teks = body.slice(7)
					if (teks.length > 10) return reply('O texto √© longo, at√© 10 caracteres')
					reply('*Estou fazendo, se der erro tente novamente ‚úì*')
					venomk = await getBuffer(`https://lollityp.sirv.com/venom_apis7.jpg?text.0.text=${teks}&text.0.position.gravity=north&text.0.position.x=1%25&text.0.position.y=58%25&text.0.size=69&text.0.color=00ffea&text.0.opacity=37&text.0.font.family=Bangers&text.0.background.opacity=77&text.0.outline.color=ffffff&text.0.outline.width=2&text.0.outline.blur=20`)
					loli.sendMessage(m.chat, { image: venomk }, { quoted: info})
					break

case 'edit8':
                    
					if (args.length < 1) return reply('qual o nome?')
					teks = body.slice(7)
					if (teks.length > 10) return reply('O texto √© longo, at√© 10 caracteres')
					reply('*Estou fazendo, se der erro tente novamente ‚úì*')
					//venomk = await getvenomk(`https://lollityp.sirv.com/venom_apis.jpg?text.0.text=${teks}&text.0.position.gravity=north&text.0.position.y=47%25&text.0.size=99&text.0.color=ff0000&text.0.opacity=50&text.0.font.family=Cookie&text.0.font.style=italic&text.0.background.opacity=92&text.0.outline.width=23&text.0.outline.blur=24&text.0.outline.opacity=87`)
					venomk = await getBuffer(`https://lollityp.sirv.com/venom_apis.jpg?w=640&h=640&text.0.text=Venom&text.0.position.gravity=north&text.0.position.y=53%25&text.0.size=96&text.0.color=ff0000&text.0.opacity=46&text.0.font.family=Shadows%20Into%20Light&text.0.font.style=italic&text.0.background.opacity=70&text.0.outline.width=9&text.0.outline.blur=52`)
					loli.sendMessage(m.chat, { image: venomk }, { quoted: info})
					break					
					
					case 'edit9':
                    
					if (args.length < 1) return reply('qual o nome?')
					teks = body.slice(7)
					if (teks.length > 10) return reply('O texto √© longo, at√© 10 caracteres')
					reply('*Estou fazendo, se der erro tente novamente ‚úì*')
					venomk = await getBuffer(`https://lollityp.sirv.com/venom_apis9.jpg?text.0.text=${teks}&text.0.position.gravity=north&text.0.position.y=50%25&text.0.size=68&text.0.color=ffffff&text.0.opacity=61&text.0.font.family=Tangerine&text.0.font.style=italic&text.0.background.opacity=61&text.0.outline.color=ff6f00&text.0.outline.width=9`)
					loli.sendMessage(m.chat, { image: venomk }, { quoted: info})
					break

case 'edit10':
                    
					if (args.length < 1) return reply('qual o nome?')
					teks = body.slice(7)
					if (teks.length > 10) return reply('O texto √© longo, at√© 10 caracteres')
					reply('*Estou fazendo, se der erro tente novamente ‚úì*')
					venomk = await getBuffer(`https://lollityp.sirv.com/venom_apis10.jpg?text.0.text=${teks}&text.0.position.gravity=north&text.0.position.y=62%25&text.0.size=63&text.0.color=004124&text.0.opacity=99&text.0.font.family=Permanent%20Marker&text.0.font.style=italic&text.0.background.color=feff00&text.0.outline.color=ffe8a3&text.0.outline.width=9&text.0.outline.blur=21`)
					loli.sendMessage(m.chat, { image: venomk }, { quoted: info})
					break

case 'edit11':
                    
					if (args.length < 1) return reply('qual o nome?')
					teks = body.slice(7)
					if (teks.length > 10) return reply('O texto √© longo, at√© 10 caracteres')
					reply('*Estou fazendo, se der erro tente novamente ‚úì*')
					venomk = await getBuffer(`https://lollityp.sirv.com/venom_apis11.jpg?text.0.text=${teks}&text.0.position.gravity=north&text.0.position.y=60%25&text.0.size=64&text.0.color=0071ff&text.0.font.family=Old%20Standard%20TT&text.0.font.style=italic&text.0.background.opacity=55&text.0.outline.color=00d0ff&text.0.outline.width=19&text.0.outline.blur=30`)
					loli.sendMessage(m.chat, { image: venomk }, { quoted: info})
					break	
					
					case 'edit12':
                    
					if (args.length < 1) return reply('qual o nome?')
					teks = body.slice(7)
					if (teks.length > 10) return reply('O texto √© longo, at√© 10 caracteres')
					reply('*Estou fazendo, se der erro tente novamente ‚úì*')
					venomk = await getBuffer(`https://lollityp.sirv.com/venom_apis12.jpg?text.0.text=${teks}&text.0.position.gravity=north&text.0.position.y=65%25&text.0.size=61&text.0.color=ff00e6&text.0.opacity=32&text.0.font.family=Chewy&text.0.font.style=italic&text.0.outline.width=6`)
					loli.sendMessage(m.chat, { image: venomk }, { quoted: info})
					break	
					
					case 'edit13':
                    
					if (args.length < 1) return reply('qual o nome?')
					teks = body.slice(7)
					if (teks.length > 10) return reply('O texto √© longo, at√© 10 caracteres')
					reply('*Estou fazendo, se der erro tente novamente ‚úì*')
					venomk = await getBuffer(`https://lollityp.sirv.com/venom_apis13.jpg?text.0.text=${teks}&text.0.position.gravity=north&text.0.position.y=63%25&text.0.size=68&text.0.color=ffffff&text.0.opacity=92&text.0.font.family=Permanent%20Marker&text.0.font.weight=800&text.0.outline.color=5dff00&text.0.outline.width=13&text.0.outline.blur=21`)
					loli.sendMessage(m.chat, { image: venomk }, { quoted: info})
					break		
					
					case 'edit14':
                    
					if (args.length < 1) return reply('qual o nome?')
					teks = body.slice(7)
					if (teks.length > 10) return reply('O texto √© longo, at√© 10 caracteres')
					reply('*Estou fazendo, se der erro tente novamente ‚úì*')
					venomk = await getBuffer(`https://lollityp.sirv.com/venom_apis14.jpg?text.0.text=${teks}&text.0.position.gravity=north&text.0.position.y=68%25&text.0.size=60&text.0.color=ffffff&text.0.font.family=Sigmar%20One&text.0.font.style=italic&text.0.background.opacity=17&text.0.outline.color=a99cff&text.0.outline.width=9&text.0.outline.blur=16`)
					loli.sendMessage(m.chat, { image: venomk }, { quoted: info})
					break	
					
					case 'edit15':
                    
					if (args.length < 1) return reply('qual o nome?')
					teks = body.slice(7)
					if (teks.length > 10) return reply('O texto √© longo, at√© 10 caracteres')
					reply('*Estou fazendo, se der erro tente novamente ‚úì*')
					venomk = await getBuffer(`https://lollityp.sirv.com/venom_apis15.jpg?text.0.text=${teks}&text.0.position.gravity=north&text.0.position.y=62%25&text.0.size=63&text.0.color=000000&text.0.font.family=Audiowide&text.0.font.style=italic&text.0.background.opacity=15&text.0.outline.color=ffffff&text.0.outline.width=9&text.0.outline.blur=33`)
					loli.sendMessage(m.chat, { image: venomk }, { quoted: info})
					break	
					
					case 'edit16':
                    
					if (args.length < 1) return reply('qual o nome?')
					teks = body.slice(7)
					if (teks.length > 10) return reply('O texto √© longo, at√© 10 caracteres')
					reply('*Estou fazendo, se der erro tente novamente ‚úì*')
					venomk = await getBuffer(`https://lollityp.sirv.com/venom_apis16.jpg?text.0.text=${teks}&text.0.position.gravity=north&text.0.position.y=58%25&text.0.size=99&text.0.color=fffefe&text.0.font.family=Permanent%20Marker&text.0.background.color=000000&text.0.outline.color=000000&text.0.outline.width=19&text.0.outline.blur=66`)
					loli.sendMessage(m.chat, { image: venomk }, { quoted: info})
			                break	
			               

          case 'antipv':
            if (!isCreator) return reply(`Apenas dono pode ativar/desativar essa fun√ß√£o..`)
            if (args.length < 1) return reply('1 pra ligar / 0 pra desligar')
            if (Number(args[0]) === 1) {
              if (isAntiPv) return reply('Ja esta ativo')
              antipv.push('Ativado')
              fs.writeFileSync('./arquivos/usuarios/antipv.json', JSON.stringify(antipv))
              reply('üåÄ Ativou com sucesso o recurso de Anti Privado üìù')
            } else if (Number(args[0]) === 0) {
              if (!isAntiPv) return reply('Ja esta Desativado')
              pesquisar = 'Ativado'
              processo = antipv.indexOf(pesquisar)
              while (processo >= 0) {
                antipv.splice(processo, 1)
                processo = antipv.indexOf(pesquisar)
              }
              fs.writeFileSync('./arquivos/usuarios/antipv.json', JSON.stringify(antipv))
              reply('‚ÄºÔ∏è Desativou com sucesso o recurso De ANTIPV‚úîÔ∏è')
            } else {
              enviar('1 para ativar, 0 para desativar')
            }
            break
case 'ttp':
    if (!q) return reply(`*_‚ùïColoque o texto que voc√™ quiser!_*\n- *üßë‚Äçüè´ Por exemplo:* ${prefix + command} sandro`);

    reagir(from, "üëª");
    await sleep(1000);
    reply('fazendo');

    // Montar a URL da API com o texto fornecido
    const string = args.join(' ') || 'Texto indefinido';
    const post = `https://api.maher-zubair.tech/maker/text2img?q=${encodeURIComponent(string)}`;

    // Fun√ß√£o para enviar sticker a partir da URL
    const sendStickerFromUrl = async (to, url, options) => {
        try {
            const buffer = await getBuffer(url);
            const filePath = 'temp.png'; // Caminho tempor√°rio para o arquivo
            fs.writeFileSync(filePath, buffer);

            // Converter a imagem para WebP
            const webpPath = 'temp.webp';
            exec(`ffmpeg -i ${filePath} -vcodec libwebp -filter:v fps=fps=15 -lossless 1 -loop 0 -preset default -an -vsync 0 -s 512:512 ${webpPath}`, (err) => {
                if (err) {
                    console.error('Erro ao converter imagem para WebP:', err);
                    reply("Erro ao converter imagem para figurinha");
                    return;
                }

                // Enviar a figurinha
                loli.sendMessage(to, { sticker: fs.readFileSync(webpPath) }, options);

                // Limpar arquivos tempor√°rios
                fs.unlinkSync(filePath);
                fs.unlinkSync(webpPath);
            });
        } catch (error) {
            console.error('Erro ao obter o buffer:', error);
            reply("Erro ao criar a figurinha");
        }
    };

    // Enviar a figurinha
    sendStickerFromUrl(from, post, { quoted: info }).catch(e => {
        reply(mess.error());
    });
    break;






case 'linkvideo':
loli.sendMessage(from, { react: { text: `üé•`, key: info.key }}) 
try {
if(!q.trim()) return reply(`${prefix+command} link ou nome`);
reply("ENVIANDO..V√çDEOüé•");
loli.sendMessage(from, {video: {url:`https://api.bronxyshost.com.br/api-bronxys/play_video?nome_url=${q}&apikey=${API_KEY_DANIEL}`}, mimetype: "video/mp4"}, {quoted: info}).catch(e => {
return reply("Erro..")
})
} catch (e) {
return reply("Erro...");
}
break;


case 'criargp':          //case by: Bielzinho-bot
if (!isCreator) return reply(`Apenas dono pode ativar/desativar essa fun√ß√£o..`)
const gp = args.join(' ')
if (!gp) return reply('*Escreva o nome do grupo que vc quer criar....*')
var group = await loli.groupCreate(`${gp}`, [sender])
reply(`*Grupo criado com sucesso*\n*Nome do grupo :* *${gp}*`)
loli.sendMessage(group.gid, `Bem vindo ao grupo amigo(a)`, MessageType.text, {quoted: info})
break

          case 'walpaperanime':
            {
              json = JSON.parse(fs.readFileSync('./arquivos/wall.json').toString())
              random = json[Math.floor(Math.random() * json.length)]
              /*
              let proximo = [
                {buttonId: `${prefix + command}`, buttonText: {displayText: 'üçâPROXIMOüçâ'}, type: 1},
                ]
                */
              templateMassage = {
                image: {
                  url: random,
                  quoted: info
                },
                caption: `${command}`,
                footer: `${botName}`,
              }
              loli.sendMessage(from, templateMassage)
            }
            break
            case 'maru': { // by yuki ladr√£o de salsicha 
    reagir(from, "üòà");
    reply(`Enviando...`);
    const numb = Math.floor(Math.random() * 40) + 1;
    const wew = { url: `https://raw.githubusercontent.com/Herojoii/midiiporno/main/packs/MaruKarv/%20${numb}.jpg` };
    const mag = 'üîûMaruKarvüîû';
    let buttonMessage = {
        image: wew,
        caption: mag,
        footer: `${NomeDoBot}`,
        headerType: 4,
    };
    await toga.sendMessage(from, buttonMessage, { quoted: info });
}
break;
case 'netersg': {
    reagir(from, "üòà");
    reply(`Enviando...`);
    const numb = Math.floor(Math.random() * 30) + 1;
    const wew = { url: `https://raw.githubusercontent.com/Herojoii/midiiporno/main/packs/netersg/%20${numb}.jpg` };
    const mag = 'üîûnetersgüîû';
    let buttonMessage = {
        image: wew,
        caption: mag,
        footer: `${botName}`,
        headerType: 4,
    };
    await loli.sendMessage(from, buttonMessage, { quoted: info });
}
break;
case 'egril18': {
    reagir(from, "üòà");
    reply(`Enviando...`);
    const numb = Math.floor(Math.random() * 14) + 1;
    const videoUrl = `https://raw.githubusercontent.com/Herojoii/midiiporno/main/packs/EgrilVideo/%20${numb}.mp4`;
    const caption = 'üîûegrilüîû';
    
    // Use o m√©todo sendMessage para enviar o v√≠deo
    await loli.sendMessage(from, { video: { url: videoUrl }, caption: caption, footer: `${botName}`, headerType: 4 }, { quoted: info });
}
break;
case 'princesa': {
    reagir(from, "üòà");
    reply(`Enviando...`);
    const numb = Math.floor(Math.random() * 32) + 1;
    const wew = { url: `https://raw.githubusercontent.com/Herojoii/midiiporno/main/packs/McPrincesa/%20${numb}.jpg` };
    const mag = 'üîûMcPrincesaüîû';
    let buttonMessage = {
        image: wew,
        caption: mag,
        footer: `${NomeDoBot}`,
        headerType: 4,
    };
    await toga.sendMessage(from, buttonMessage, { quoted: info });
}
break;
case 'carniello': {
    reagir(from, "üòà");
    reply(`Enviando...`);
    const numb = Math.floor(Math.random() * 29) + 1;
    const wew = { url: `https://raw.githubusercontent.com/Herojoii/midiiporno/main/packs/carniello/%20${numb}.jpg` };
    const mag = 'üîûcarnielloüîû';
    let buttonMessage = {
        image: wew,
        caption: mag,
        footer: `${botName}`,
        headerType: 4,
    };
    await loli.sendMessage(from, buttonMessage, { quoted: info });
}
break;
case 'vitacelestine': {
    reagir(from, "üòà");
    reply(`Enviando...`);
    const numb = Math.floor(Math.random() * 30) + 1;
    const wew = { url: `https://raw.githubusercontent.com/Herojoii/midiiporno/main/packs/VitaCelestine/%20${numb}.jpg` };
    const mag = 'üîûVita Celestineüîû';
    let buttonMessage = {
        image: wew,
        caption: mag,
        footer: `${botName}`,
        headerType: 4,
    };
    await loli.sendMessage(from, buttonMessage, { quoted: info });
}
break;
case 'pornovideo': {
    reagir(from, "üòà");
    reply(`Enviando...`);
    const numb = Math.floor(Math.random() * 45) + 1;
    const videoUrl = `https://raw.githubusercontent.com/Herojoii/midiiporno/main/packs/PornoVideo/${numb}.mp4`;
    const caption = 'üîûPorno Videoüîû';
    
    // Use o m√©todo sendMessage para enviar o v√≠deo
    await loli.sendMessage(from, { video: { url: videoUrl }, caption: caption, footer: `${botName}`, headerType: 4 }, { quoted: info });
}
break;
case 'onlyfansvideo': {
    reagir(from, "üòà");
    reply(`Enviando...`);
    const numb = Math.floor(Math.random() * 47) + 1;
    const videoUrl = `https://raw.githubusercontent.com/Herojoii/midiiporno/main/packs/OnlyfansVideo/%20${numb}.mp4`;
    const caption = 'üîûOnlyfans Videoüîû';
    
    // Use o m√©todo sendMessage para enviar o v√≠deo
    await loli.sendMessage(from, { video: { url: videoUrl }, caption: caption, footer: `${botName}`, headerType: 4 }, { quoted: info });
}
case 'marukarv': {
    reagir(from, "üòà");
    reply(`Enviando...`);
    const numb = Math.floor(Math.random() * 40) + 1;
    const wew = { url: `https://raw.githubusercontent.com/Herojoii/midiiporno/main/packs/MaruKarv/%20${numb}.jpg` };
    const mag = 'üîûMaru Karvüîû';
    let buttonMessage = {
        image: wew,
        caption: mag,
        footer: `${botName}`,
        headerType: 4,
    };
    await loli.sendMessage(from, buttonMessage, { quoted: info });
}
break;
case 'marinamui': {
    reagir(from, "üòà");
    reply(`Enviando...`);
    const numb = Math.floor(Math.random() * 27) + 1;
    const wew = { url: `https://raw.githubusercontent.com/Herojoii/midiiporno/main/packs/MarinaMui/%20${numb}.jpg` };
    const mag = 'üîûMarina Muiüîû';
    let buttonMessage = {
        image: wew,
        caption: mag,
        footer: `${botName}`,
        headerType: 4,
    };
    await loli.sendMessage(from, buttonMessage, { quoted: info });
}
break;
case 'leticiashirayuki': {
    reagir(from, "üòà");
    reply(`Enviando...`);
    const numb = Math.floor(Math.random() * 28) + 1;
    const wew = { url: `https://raw.githubusercontent.com/Herojoii/midiiporno/main/packs/LeticiaShirayuki/%20${numb}.jpg` };
    const mag = 'üîûLeticia Shirayukiüîû';
    let buttonMessage = {
        image: wew,
        caption: mag,
        footer: `${botName}`,
        headerType: 4,
    };
    await loli.sendMessage(from, buttonMessage, { quoted: info });
}
break;
case 'laynuniz': {
    reagir(from, "üòà");
    reply(`Enviando...`);
    const numb = Math.floor(Math.random() * 25) + 1;
    const wew = { url: `https://raw.githubusercontent.com/Herojoii/midiiporno/main/packs/LayNuniz/%20${numb}.jpg` };
    const mag = 'üîûLay Nunizüîû';
    let buttonMessage = {
        image: wew,
        caption: mag,
        footer: `${botName}`,
        headerType: 4,
    };
    await loli.sendMessage(from, buttonMessage, { quoted: info });
}
break;
case 'isawaifu': {
    reagir(from, "üòà");
    reply(`Enviando...`);
    const numb = Math.floor(Math.random() * 21) + 1;
    const wew = { url: `https://raw.githubusercontent.com/Herojoii/midiiporno/main/packs/IsaWaifu/%20${numb}.jpg` };
    const mag = 'üîûIsaWaifuüîû';
    let buttonMessage = {
        image: wew,
        caption: mag,
        footer: `${botName}`,
        headerType: 4,
    };
    await loli.sendMessage(from, buttonMessage, { quoted: info });
}
break;
case 'isadoramartinez': {
    reagir(from, "üòà");
    reply(`Enviando...`);
    const numb = Math.floor(Math.random() * 30) + 1;
    const wew = { url: `https://raw.githubusercontent.com/Herojoii/midiiporno/main/packs/ISADORA%20MARTINEZ/%20${numb}.jpg` };
    const mag = 'üîûIsadora Martinezüîû';
    let buttonMessage = {
        image: wew,
        caption: mag,
        footer: `${botName}`,
        headerType: 4,
    };
    await loli.sendMessage(from, buttonMessage, { quoted: info });
}
break;
case 'giovannacampomar': {
    reagir(from, "üòà");
    reply(`Enviando...`);
    const numb = Math.floor(Math.random() * 34) + 1;
    const wew = { url: `https://raw.githubusercontent.com/Herojoii/midiiporno/main/packs/GiovannaCampomar/%20${numb}.jpg` };
    const mag = 'üîûGiovannaCampomarüîû';
    let buttonMessage = {
        image: wew,
        caption: mag,
        footer: `${botName}`,
        headerType: 4,
    };
    await loli.sendMessage(from, buttonMessage, { quoted: info });
}
break;
case 'fehgalvao': {
    reagir(from, "üòà");
    reply(`Enviando...`);
    const numb = Math.floor(Math.random() * 32) + 1;
    const wew = { url: `https://raw.githubusercontent.com/Herojoii/midiiporno/main/packs/FehGalvao/%20${numb}.jpg` };
    const mag = 'üîûFeh Galvaoüîû';
    let buttonMessage = {
        image: wew,
        caption: mag,
        footer: `${botName}`,
        headerType: 4,
    };
    await loli.sendMessage(from, buttonMessage, { quoted: info });
}
break;
case 'egril': {
    reagir(from, "üòà");
    reply(`Enviando...`);
    const numb = Math.floor(Math.random() * 36) + 1;
    const wew = { url: `https://raw.githubusercontent.com/Herojoii/midiiporno/main/packs/egril/%20${numb}.jpg` };
    const mag = 'üîûEgril Videoüîû';
    let buttonMessage = {
        image: wew,
        caption: mag,
        footer: `${botName}`,
        headerType: 4,
    };
    await loli.sendMessage(from, buttonMessage, { quoted: info });
}
break;
case 'cclowniac': {
    reagir(from, "üòà");
    reply(`Enviando...`);
    const numb = Math.floor(Math.random() * 29) + 1;
    const wew = { url: `https://raw.githubusercontent.com/Herojoii/midiiporno/main/packs/Cclowniac/%20${numb}.jpg` };
    const mag = 'üîûCclowniacüîû';
    let buttonMessage = {
        image: wew,
        caption: mag,
        footer: `${botName}`,
        headerType: 4,
    };
    await loli.sendMessage(from, buttonMessage, { quoted: info });
}
break;
case 'camibrito': {
    reagir(from, "üòà");
    reply(`Enviando...`);
    const numb = Math.floor(Math.random() * 30) + 1;
    const wew = { url: `https://raw.githubusercontent.com/Herojoii/midiiporno/main/packs/CamiBrito/%20${numb}.jpg` };
    const mag = 'üîûCami Britoüîû';
    let buttonMessage = {
        image: wew,
        caption: mag,
        footer: `${botName}`,
        headerType: 4,
    };
    await loli.sendMessage(from, buttonMessage, { quoted: info });
}
break;
case 'brendatrindade': {
    reagir(from, "üòà");
    reply(`Enviando...`);
    const numb = Math.floor(Math.random() * 25) + 1;
    const wew = { url: `https://raw.githubusercontent.com/Herojoii/midiiporno/main/packs/BrendaTrindade/%20${numb}.jpg` };
    const mag = 'üîûBrenda Trindadeüîû';
    let buttonMessage = {
        image: wew,
        caption: mag,
        footer: `${botName}`,
        headerType: 4,
    };
    await loli.sendMessage(from, buttonMessage, { quoted: info });
}
break;
case 'belledelphine': {
    reagir(from, "üòà");
    reply(`Enviando...`);
    const numb = Math.floor(Math.random() * 31) + 1;
    const wew = { url: `https://raw.githubusercontent.com/Herojoii/midiiporno/main/packs/BelleDelphine/%20${numb}.jpg` };
    const mag = 'üîûBelle Delphineüîû';
    let buttonMessage = {
        image: wew,
        caption: mag,
        footer: `${botName}`,
        headerType: 4,
    };
    await loli.sendMessage(from, buttonMessage, { quoted: info });
}
break;
case 'babymatoso': {
    reagir(from, "üòà");
    reply(`Enviando...`);
    const numb = Math.floor(Math.random() * 36) + 1;
    const wew = { url: `https://raw.githubusercontent.com/Herojoii/midiiporno/main/packs/BabyMatoso/%20${numb}.jpg` };
    const mag = 'üîûBaby Matosoüîû';
    let buttonMessage = {
        image: wew,
        caption: mag,
        footer: `${botName}`,
        headerType: 4,
    };
    await loli.sendMessage(from, buttonMessage, { quoted: info });
}
break;
case 'aninhalopes': {
    reagir(from, "üòà");
    reply(`Enviando...`);
    const numb = Math.floor(Math.random() * 29) + 1;
    const wew = { url: `https://raw.githubusercontent.com/Herojoii/midiiporno/main/packs/AninhaLopes/%20${numb}.jpg` };
    const mag = 'üîûAninha lopesüîû';
    let buttonMessage = {
        image: wew,
        caption: mag,
        footer: `${botName}`,
        headerType: 4,
    };
    await loli.sendMessage(from, buttonMessage, { quoted: info });
}
break;
case 'amiichan': {
    reagir(from, "üòà");
    reply(`Enviando...`);
    const numb = Math.floor(Math.random() * 30) + 1;
    const wew = { url: `https://raw.githubusercontent.com/Herojoii/midiiporno/main/packs/Amiichan/%20${numb}.jpg` };
    const mag = 'üîûAmii chanüîû';
    let buttonMessage = {
        image: wew,
        caption: mag,
        footer: `${botName}`,
        headerType: 4,
    };
    await loli.sendMessage(from, buttonMessage, { quoted: info });
}
break;
case 'videoamador': {
    reagir(from, "üòà");
    reply(`Enviando...`);
    const numb = Math.floor(Math.random() * 41) + 1;
    const videoUrl = `https://raw.githubusercontent.com/Herojoii/midiiporno/main/packs/AmadorVideo/${numb}.mp4`;
    const caption = 'üîûVideo amador üîû';
    
    // Use o m√©todo sendMessage para enviar o v√≠deo
    await loli.sendMessage(from, { video: { url: videoUrl }, caption: caption, footer: `${botName}`, headerType: 4 }, { quoted: info });
}
break;
case 'alyciaribeiro': {
    reagir(from, "üòà");
    reply(`Enviando...`);
    const numb = Math.floor(Math.random() * 28) + 1;
    const wew = { url: `https://raw.githubusercontent.com/Herojoii/midiiporno/main/packs/AlyciaRibeiro/%20${numb}.jpg` };
    const mag = 'üîûAlycoa Ribeiroüîû';
    let buttonMessage = {
        image: wew,
        caption: mag,
        footer: `${botName}`,
        headerType: 4,
    };
    await loli.sendMessage(from, buttonMessage, { quoted: info });
}
break;
case 'alinefox': {
    reagir(from, "üòà");
    reply(`Enviando...`);
    const numb = Math.floor(Math.random() * 60) + 1;
    const wew = { url: `https://raw.githubusercontent.com/Herojoii/midiiporno/main/packs/AlimeFox/%20${numb}.jpg` };
    const mag = 'üîûAline foxüîû';
    let buttonMessage = {
        image: wew,
        caption: mag,
        footer: `${botName}`,
        headerType: 4,
    };
    await loli.sendMessage(from, buttonMessage, { quoted: info });
}
break;
case 'alinefaria': {
    reagir(from, "üòà");
    reply(`Enviando...`);
    const numb = Math.floor(Math.random() * 65) + 1;
    const wew = { url: `https://raw.githubusercontent.com/Herojoii/midiiporno/main/packs/AlineFaria/%20${numb}.jpg` };
    const mag = 'üîûAline fariaüîû';
    let buttonMessage = {
        image: wew,
        caption: mag,
        footer: `${botName}`,
        headerType: 4,
    };
    await loli.sendMessage(from, buttonMessage, { quoted: info });
}
break;
case 'meadinha': {
    reagir(from, "üòà");
    reply(`Enviando...`);
    const numb = Math.floor(Math.random() * 33) + 1;
    const wew = { url: `https://raw.githubusercontent.com/Herojoii/midiiporno/main/packs/Me1adinha/%20${numb}.jpg` };
    const mag = 'üîûMe1adinhaüîû';
    let buttonMessage = {
        image: wew,
        caption: mag,
        footer: `${botName}`,
        headerType: 4,
    };
    await loli.sendMessage(from, buttonMessage, { quoted: info });
}
break;

case 'nath': {
    reagir(from, "üòà");
    reply(`Enviando...`);
    const numb = Math.floor(Math.random() * 23) + 1;
    const wew = { url: `https://raw.githubusercontent.com/Herojoii/midiiporno/main/packs/NathBister%C3%A7o/%20${numb}.jpg` };
    const mag = 'üîûNathBisterüîû';
    let buttonMessage = {
        image: wew,
        caption: mag,
        footer: `${botName}`,
        headerType: 4,
    };
    await loli.sendMessage(from, buttonMessage, { quoted: info });
}
break;

case 'nega': {
    reagir(from, "üòà");
    reply(`Enviando...`);
    const numb = Math.floor(Math.random() * 21) + 1;
    const wew = { url: `https://raw.githubusercontent.com/Herojoii/midiiporno/main/pacgaBarbie/%20${numb}.jpg` };
    const mag = 'üîûgaBarbieüîû';
    let buttonMessage = {
        image: wew,
        caption: mag,
        footer: `${botName}`,
        headerType: 4,
    };
    await loli.sendMessage(from, buttonMessage, { quoted: info });
}
break;

case 'pornofot': {
    reagir(from, "üòà");
    reply(`Enviando...`);
    const numb = Math.floor(Math.random() * 44) + 1;
    const wew = { url: `https://raw.githubusercontent.com/Herojoii/midiiporno/main/packs/PornoFoto/%20${numb}.jpg` };
    const mag = 'üîûPornoFotoüîû';
    let buttonMessage = {
        image: wew,
        caption: mag,
        footer: `${botName}`,
        headerType: 4,
    };
    await loli.sendMessage(from, buttonMessage, { quoted: info });
}
break;
            case 'rute': {
    // Rea√ß√£o ao comando
    reagir(from, "üòà");
    reply(`Enviando...`);

    // Gerando n√∫mero aleat√≥rio para selecionar a imagem
    const numb = Math.floor(Math.random() * 30) + 1;
    const wew = { url: `https://raw.githubusercontent.com/Herojoii/midiiporno/main/packs/RuteRocha/%20${numb}.jpg` };
    const mag = 'üîûRuteRochaüîû';
    
    // Configurando a mensagem com imagem e bot√£o
    let buttonMessage = {
        image: wew,
        caption: mag,
        footer: `${botName}`,
        headerType: 4,
    };

    // Enviando a mensagem para o grupo ou chat onde o comando foi chamado
    await loli.sendMessage(from, buttonMessage, { quoted: info });
}
break;
            case 'polonesa': {
    // Rea√ß√£o ao comando
    reagir(from, "üòà");
    reply(`Enviando...`);
    
    // Gerando n√∫mero aleat√≥rio para selecionar a imagem
    const numb = Math.floor(Math.random() * 28) + 1;
    const wew = { url: `https://raw.githubusercontent.com/Herojoii/midiiporno/main/packs/PolonesaDoHype/%20${numb}.jpg` };
    const mag = 'üîûPolonesaDoHypeüîû';
    
    // Configurando a mensagem com imagem e bot√£o
    let buttonMessage = {
        image: wew,
        caption: mag,
        footer: `${botName}`,
        headerType: 4,
    };
    
    // Enviando a mensagem para o grupo ou onde foi solicitado
    await loli.sendMessage(from, buttonMessage, { quoted: info });
}
break;
          case 'vazados':
            if (!isPremium) return reply(msg.premium)
            reply(`${pushname} enviando no seu pv olha la`)
            {
              json = JSON.parse(fs.readFileSync('./arquivos/sex/sex.json').toString())
              random = json[Math.floor(Math.random() * json.length)]
              /*
              let proximo = [
                {buttonId: `${prefix + command}`, buttonText: {displayText: 'üçâPROXIMOüçâ'}, type: 1},
                ]
                */
              templateMassage = {
                video: {
                  url: random,
                  quoted: info
                },
                caption: `${command}`,
                footer: `${botName}`,
              }
              loli.sendMessage(sender, templateMassage)
            }
            break
            
                      case 'editfreefire': case 'editefreefire': case 'editff':
            reply(`${pushname} enviando`)
            {
              json = JSON.parse(fs.readFileSync('./arquivos/freefire.json').toString())
              random = json[Math.floor(Math.random() * json.length)]
              /*
              let proximo = [
                {buttonId: `${prefix + command}`, buttonText: {displayText: 'üçâPROXIMOüçâ'}, type: 1},
                ]
                */
              templateMassage = {
                video: {
                  url: random,
                  quoted: info
                },
                caption: `${command}`,
                footer: `${botName}`,
              }
              loli.sendMessage(from, templateMassage)
            }
            break
            
            case 'freefire':
            reply(`${pushname} enviando no seu pv olha la`)
            {
              json = JSON.parse(fs.readFileSync('./arquivos/sex/freefire.json').toString())
              random = json[Math.floor(Math.random() * json.length)]
              /*
              let proximo = [
                {buttonId: `${prefix + command}`, buttonText: {displayText: 'üçâPROXIMOüçâ'}, type: 1},
                ]
                */
              templateMassage = {
                video: {
                  url: random,
                  quoted: live
                },
                caption: `${command}`,
                footer: `${botName}`,
              }
              loli.sendMessage(sender, templateMassage)
            }
            break


case 'audiolento': 
case 'slow':
if (!isQuotedAudio) return reply('Marque um √°udio')
reply('espere')
muk = isQuotedAudio ? info.message.extendedTextMessage.contextInfo.quotedMessage.audioMessage : info.message.audioMessage
rane = getRandom('.'+await getExtension(muk.mimetype))
buffimg = await getFileBuffer(muk, 'audio')
fs.writeFileSync(rane, buffimg)
gem = rane
ran = getRandom('.mp3')
exec(`ffmpeg -i ${gem} -filter:a "atempo=0.9,asetrate=44100" ${ran}`, (err, stderr, stdout) => {
fs.unlinkSync(gem)
if (err) return reply('Error!')
hah = fs.readFileSync(ran)
loli.sendMessage(from, {audio: hah, mimetype: 'audio/mp4', ptt:true}, {quoted: info})
fs.unlinkSync(ran)
})
break

case 'audiorapido':  
if (!isQuotedAudio) return reply('Marque um √°udio')
reply('espere')
muk = isQuotedAudio ? info.message.extendedTextMessage.contextInfo.quotedMessage.audioMessage : info.message.audioMessage
rane = getRandom('.'+await getExtension(muk.mimetype))
buffimg = await getFileBuffer(muk, 'audio')
fs.writeFileSync(rane, buffimg)
gem = rane
ran = getRandom('.mp3')
exec(`ffmpeg -i ${gem} -filter:a "atempo=0.9,asetrate=95100" ${ran}`, (err, stderr, stdout) => {
fs.unlinkSync(gem)
if (err) return reply('Erro')
hah = fs.readFileSync(ran)
loli.sendMessage(from, {audio: hah, mimetype: 'audio/mp4', ptt:true}, {quoted: info})
fs.unlinkSync(ran)
})
break

case 'grave2':
if (!isQuotedAudio) return reply('Marque um √°udio')
reply('espere')
muk = isQuotedAudio ? info.message.extendedTextMessage.contextInfo.quotedMessage.audioMessage : info.message.audioMessage
rane = getRandom('.'+await getExtension(muk.mimetype))
buffimg = await getFileBuffer(muk, 'audio')
fs.writeFileSync(rane, buffimg)
gem = rane
ran = getRandom('.mp3')
exec(`ffmpeg -i ${gem} -filter:a "atempo=1.6,asetrate=22100" ${ran}`, (err, stderr, stdout) => {
fs.unlinkSync(gem)
if (err) return reply('Error!')
hah = fs.readFileSync(ran)
loli.sendMessage(from, {audio: hah, mimetype: 'audio/mp4', ptt:true}, {quoted: info})
fs.unlinkSync(ran)
})
break

case 'grave':
if (!isQuotedAudio) return reply('Marque um √°udio')
reply('espere')
muk = isQuotedAudio ? info.message.extendedTextMessage.contextInfo.quotedMessage.audioMessage : info.message.audioMessage
rane = getRandom('.'+await getExtension(muk.mimetype))
buffimg = await getFileBuffer(muk, 'audio')
fs.writeFileSync(rane, buffimg)
gem = rane
ran = getRandom('.mp3')
exec(`ffmpeg -i ${gem} -filter:a "atempo=0.9,asetrate=44100" ${ran}`, (err, stderr, stdout) => {
fs.unlinkSync(gem)
if (err) return reply('Error!')
hah = fs.readFileSync(ran)
loli.sendMessage(from, {audio: hah, mimetype: 'audio/mp4', ptt:true}, {quoted: info})
fs.unlinkSync(ran)
})
break

case 'estourar': 
if (!isQuotedAudio) return reply('Marque um √°udio')
reply('espere')
muk = isQuotedAudio ? info.message.extendedTextMessage.contextInfo.quotedMessage.audioMessage : info.message.audioMessage
rane = getRandom('.'+await getExtension(muk.mimetype))
buffimg = await getFileBuffer(muk, 'audio')
fs.writeFileSync(rane, buffimg)
gem = rane
ran = getRandom('.mp3')
exec(`ffmpeg -i ${gem} -af equalizer=f=90:width_type=o:width=2:g=30 ${ran}`, (err, stderr, stdout) => {
fs.unlinkSync(gem)
if (err) return reply('Error!')
hah = fs.readFileSync(ran)
loli.sendMessage(from, {audio: hah, mimetype: 'audio/mp4', ptt:true}, {quoted: info})
fs.unlinkSync(ran)
})
break

case 'bass': 
if (!isQuotedAudio) return reply('Marque um √°udio')
reply('espere')
muk = isQuotedAudio ? info.message.extendedTextMessage.contextInfo.quotedMessage.audioMessage : info.message.audioMessage
rane = getRandom('.'+await getExtension(muk.mimetype))
buffimg = await getFileBuffer(muk, 'audio')
fs.writeFileSync(rane, buffimg)
gem = rane
ran = getRandom('.mp3')
exec(`ffmpeg -i ${gem} -af equalizer=f=20:width_type=o:width=2:g=15 ${ran}`, (err, stderr, stdout) => {
fs.unlinkSync(gem)
if (err) return reply('Error!')
hah = fs.readFileSync(ran)
loli.sendMessage(from, {audio: hah, mimetype: 'audio/mp4', ptt:true}, {quoted: info})
fs.unlinkSync(ran)
})
break

case 'bass2': 
if (!isQuotedAudio) return reply('Marque um √°udio')
reply('espere')
muk = isQuotedAudio ? info.message.extendedTextMessage.contextInfo.quotedMessage.audioMessage : info.message.audioMessage
rane = getRandom('.'+await getExtension(muk.mimetype))
buffimg = await getFileBuffer(muk, 'audio')
fs.writeFileSync(rane, buffimg)
gem = rane
ran = getRandom('.mp3')
exec(`ffmpeg -i ${gem} -af equalizer=f=94:width_type=o:width=2:g=30 ${ran}`, (err, stderr, stdout) => {
fs.unlinkSync(gem)
if (err) return reply('Error!')
hah = fs.readFileSync(ran)
loli.sendMessage(from, {audio: hah, mimetype: 'audio/mp4', ptt:true}, {quoted: info})
fs.unlinkSync(ran)
})
break

case 'vozmenino':  
if (!isQuotedAudio) return reply('Marque um √°udio')
reply('espere')
muk = isQuotedAudio ? info.message.extendedTextMessage.contextInfo.quotedMessage.audioMessage : info.message.audioMessage
rane = getRandom('.'+await getExtension(muk.mimetype))
buffimg = await getFileBuffer(muk, 'audio')
fs.writeFileSync(rane, buffimg)
gem = rane
ran = getRandom('.mp3')
exec(`ffmpeg -i ${gem} -filter:a atempo=1.06,asetrate=44100*1.25 ${ran}`, (err, stderr, stdout) => {
fs.unlinkSync(gem)
if (err) return reply('Error!')
hah = fs.readFileSync(ran)
loli.sendMessage(from, {audio: hah, mimetype: 'audio/mp4', ptt:true}, {quoted: info})
fs.unlinkSync(ran)
})
break

case 'tabela':
if(verificado === true) {
reply(`Enviando no Privado...`)
await loli.sendMessage(sender, {text: tabela(prefix, botName)}, {quoted: info})
} else {
await loli.sendMessage(sender, {text: tabela(prefix, botName)}, {quoted: info})  
}
break 

case 'checkativo':
case 'check':
if (!isGroup) return reply(msg.grupo)
if(groupIdscount.indexOf(from) < 0) return reply('O bot n√£o tem ainda dados sobre o grupo')
var ind = groupIdscount.indexOf(from)
if (info.message.extendedTextMessage === undefined || info.message.extendedTextMessage === null) return reply('Marque o n√∫mero que deseja puxar a atividade')
mentioned = info.message.extendedTextMessage.contextInfo.mentionedJid
if(numbersIds.indexOf(mentioned[0]) >= 0) {
var indnum = numbersIds.indexOf(mentioned[0])
mentions(`ñ£ò‚Éü·óí Consulta das atividade de\nñ£ò‚Éü·óí @${mentioned[0].split('@')[0]} no grupo\nñ£ò‚Éü·óí Mensagens: ${countMessage[ind].numbers[indnum].messages}\nñ£ò‚Éü·óí Comandos dados: ${countMessage[ind].numbers[indnum].cmd_messages}`, mentioned, true)
}
else {
mentions(`‚ãÜ‚Éü€ú€£·≠™‚û£ Consulta da atividade de ‚ãÜ‚Éü€ú€£·≠™‚û£ @${mentioned[0].split('@')[0]} no grupo\n‚ãÜ‚Éü€ú€£·≠™‚û£ Mensagens: 0\n‚ãÜ‚Éü€ú€£·≠™‚û£ Comandos dados: 0`, mentioned, true)
}
break

case 'atividades':  
try{
if(!isGroupAdmins) return reply(msg.adm)
if(isGroup && groupIdscount.indexOf(from) >= 0) {
var ind = groupIdscount.indexOf(from)
teks = `*Atividade dos membros do grupo:*\n\n`
mem = []
for(let obj of groupMembers) {
if(numbersIds.indexOf(obj.id) >=0) {
var indnum = numbersIds.indexOf(obj.id)
teks += `*‚Ä¢ Membro:* @${countMessage[ind].numbers[indnum].id.split('@')[0]}\n*‚Ä¢ Comandos:* ${countMessage[ind].numbers[indnum].cmd_messages}\n*‚Ä¢ Mensagens:* ${countMessage[ind].numbers[indnum].messages}\n\n----------------------------------\n\n`
} else {
teks += `*‚Ä¢ Membro:* @${obj.id.split('@')[0]}\n*‚Ä¢ Comandos:* 0\n*‚Ä¢ Mensagens:* 0\n\n----------------------------------\n\n`
}
mem.push(obj.id)
}
loli.sendMessage(from, {text: teks, contextInfo:{mentionedJid: mem}}, {quoted: info})
} else return reply('*Nada foi encontrado*')
} catch (e){
console.log(e)
}
break

case 'cases':
if(!isCreator) return reply("Voc√™ n√£o √© dono para utilizar este comando...")
try {
const listCases = () => {
const fileContent = fs.readFileSync("index.js").toString();
const caseNames = fileContent.match(/case\s+'(.+?)'/g);
if (caseNames) {
return caseNames.map((caseName, index) => `${index + 1}. ${caseName.match(/'(.+?)'/)[1]}`).join('\n');
} else {
reply("nenhuma case encontrada.") } }
loli.sendMessage(from, { text: listCases() }, { quoted: live });
} catch (e) {
console.log(e)
reply('ocorreu um erro ao obter as cases.') }
break

case 'regraspp':  
if(!isGroupAdmins) return reply('Qual foi membro comum?')
txtz = `„Äê·ØΩíã®üì∑:ùëÜùëí ùëéùëùùëüùëíùë†ùëíùëõùë°ùëíùëö ùëôùëñùë•ùëúùë†üåö¬ª¬∞„Äë
íã®Œá‡£≠‡£™Ãáüî•…¥·¥è·¥ç·¥á:
íã®Œá‡£≠‡£™Ãáüî•…™·¥Ö·¥Ä·¥Ö·¥á:
íã®Œá‡£≠‡£™Ãáüî• Ä·¥Ä ô·¥Ä:
*A·¥ò Ä·¥ás·¥á…¥·¥õ·¥á-s·¥á s·¥á «´·¥ú…™s·¥á Ä.*
ùôèùòºùôÇùôé‚û≠◊Ç·úî‡†≠
 ‚îÄ‚îÄ‚ïå‚ïå‚ïå‚îà‚ä∞‚òÖ‚ä±‚îà‚ïå‚ïå‚ïå‚îà‚îÄ
‚ùå ENTROU NO 
GRUPO INTERAJA, N√ÉO PRECISAMOS DE ENFEITES,INATIVOS SERAO REMOVIDOS ‚ùå* 

/Ôπã<,Ô∏ª‚ï¶‚ï§‚îÄ “â - -----üí• 
/Ôπã üÖ¥ üÖ±üÖ¥üÖº üÜÖüÖ∏üÖΩüÖ≥üÖæ üÜÇüÖ¥üÜÑüÜÇ üÖµüÖ∏üÖªüÖ∑üÖæüÜÇ üÖ≥üÖ∞ üÖøüÜÑüÜÉüÖ∞`
loli.sendMessage(from, {text: txtz}, {quoted: info})
break

          case 'roubar': case 'rename':
            {
              (async function () {
                var legenda = q ? q?.split("/")[0] : ` `
                var autor = q ? q?.split("/")[1] : q?.split("/")[0] ? '' : `  `
                if (isMedia && !info.message.videoMessage || isQuotedImage) {
                  var encmedia = isQuotedImage ? info.message.extendedTextMessage.contextInfo.quotedMessage.imageMessage : info.message.imageMessage
                  rane = getRandom('.' + await getExtension(encmedia.mimetype))
                  buffimg = await getFileBuffer(encmedia, 'image')
                  fs.writeFileSync(rane, buffimg)
                  rano = getRandom('.webp')
                  exec(`ffmpeg -i ${rane} -vcodec libwebp -filter:v fps=fps=15 -lossless 1 -loop 0 -preset default -an -vsync 0 -s 800:800 ${rano}`, (err) => {
                    fs.unlinkSync(rane)
                    // "android-app-store-link": "https://play.google.com/store/search?q=%2B55%2094%209147-2796%20%F0%9F%94%A5%F0%9F%94%A5%F0%9F%94%A5%F0%9F%94%A5%F0%9F%94%A5&c=apps",
                    var json = {
                      "sticker-pack-name": legenda,
                      "sticker-pack-publisher": autor
                    }
                    var exifAttr = Buffer.from([0x49, 0x49, 0x2A, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x41, 0x57, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00])
                    var jsonBuff = Buffer.from(JSON.stringify(json), "utf-8")
                    var exif = Buffer.concat([exifAttr, jsonBuff])
                    exif.writeUIntLE(jsonBuff.length, 14, 4)
                    let nomemeta = Math.floor(Math.random() * (99999 - 11111 + 1) + 11111) + ".temp.exif"
                    fs.writeFileSync(`./${nomemeta}`, exif)
                    exec(`webpmux -set exif ${nomemeta} ${rano} -o ${rano}`, () => {
                      loli.sendMessage(from, { sticker: fs.readFileSync(rano) }, { quoted: info })
                      fs.unlinkSync(nomemeta)
                      fs.unlinkSync(rano)
                    })
                  })
                } else if (isMedia && info.message.videoMessage.seconds < 11 || isQuotedVideo && info.message.extendedTextMessage.contextInfo.quotedMessage.videoMessage.seconds < 35) {
                  var encmedia = isQuotedVideo ? info.message.extendedTextMessage.contextInfo.quotedMessage.videoMessage : info.message.videoMessage
                  rane = getRandom('.' + await getExtension(encmedia.mimetype))
                  buffimg = await getFileBuffer(encmedia, 'video')
                  fs.writeFileSync(rane, buffimg)
                  rano = getRandom('.webp')
                  await ffmpeg(`./${rane}`)
                    .inputFormat(rane.split('.')[1])
                  exec(`ffmpeg -i ${rane} -vcodec libwebp -filter:v fps=fps=15 -lossless 1 -loop 0 -preset default -an -vsync 0 -s 200:200 ${rano}`, (err) => {
                    fs.unlinkSync(rane)
                    let json = {
                      "sticker-pack-name": legenda,
                      "sticker-pack-publisher": autor
                    }
                    let exifAttr = Buffer.from([0x49, 0x49, 0x2A, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x41, 0x57, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00])
                    let jsonBuff = Buffer.from(JSON.stringify(json), "utf-8")
                    let exif = Buffer.concat([exifAttr, jsonBuff])
                    exif.writeUIntLE(jsonBuff.length, 14, 4)
                    let nomemeta = "temp.exif"
                    fs.writeFileSync(`./${nomemeta}`, exif)
                    exec(`webpmux -set exif ${nomemeta} ${rano} -o ${rano}`, () => {
                      loli.sendMessage(from, { sticker: fs.readFileSync(rano) }, { quoted: info })
                      fs.unlinkSync(nomemeta)
                      fs.unlinkSync(rano)
                    })
                  })
                } else {
                  reply(`MARQUE ALGUMA FOTO OU VIDEO DE ATE 9 SEGUNDOS\n\nEXEMPLO:\n\n.roubar luan/lind√£o`)
                }
              })().catch(e => {
                console.log(e)
                reply("Hmm deu erro")
                try {
                  if (fs.existsSync("temp.exif")) fs.unlinkSync("temp.exif");
                  if (fs.existsSync(rano)) fs.unlinkSync(rano);
                  if (fs.existsSync(media)) fs.unlinkSync(media);
                } catch { }
              })
            }
            break
                       
case 'banco': { //bay; ALEMAO BAY: ZENITSU//

var salldo = checkATMuser(sender)


loli.sendMessage(from, {image: fs.readFileSync('./loli/image/banco.jpg'), caption: `
„Äé üë§ „Äè *NOME: ${pushname}*
„Äé üèõÔ∏è „Äè *BANCO: NUBANK*
„Äé üíµ „Äè *DINHEIRO: ${salldo}*
„Äé üè° „Äè *CASA: ${iscasa? "SIM ‚úÖ" : "N√ÉO ‚ùå"}*
„Äé ü§ë „Äè *RICO: ${istagrico? "SIM ‚úÖ" : "N√ÉO ‚ùå"}*
`},{quoted: info})
}
break

	case 'minerar': {
		// Verificar se o arquivo JSON existe, e criar se n√£o existir
		if (!fs.existsSync('./loli/rpg/pescarCooldown.json')) {
			fs.writeFileSync('./loli/rpg/pescarCooldown.json', JSON.stringify({}));
		}
	
		// Carregar o objeto pescarCooldown do arquivo JSON
		const pescarCooldown = JSON.parse(fs.readFileSync('./loli/rpg/pescarCooldown.json', 'utf8'));
	
		const currentTimePescar = Date.now();
		const lastPescarTime = pescarCooldown[sender] || 0;
		const timeSinceLastPescar = currentTimePescar - lastPescarTime;
		const pescarCooldownTime = 5 * 60 * 1000; // 5 minutos em milissegundos
	
		if (timeSinceLastPescar < pescarCooldownTime) {
			const remainingTime = (pescarCooldownTime - timeSinceLastPescar) / 1000;
			return reply(`Aguarde ${remainingTime.toFixed(0)} segundos antes de minerar novamente.`);
		}
	
		reply(`*OL√Å ${pushname}, AGUARDE AGUARDE 5 SEGUNDA PARA CONCLU√çR A MINERA√á√ÉO**`);
			// Atualizar o tempo da √∫ltima pescaria no arquivo JSON
		pescarCooldown[sender] = currentTimePescar;
		fs.writeFileSync('./loli/rpg/pescarCooldown.json', JSON.stringify(pescarCooldown));
		await sleep(5000);
		lagoostas = Math.floor((Math.random() * 150) + 40);
		carranguejos = Math.floor((Math.random() * 150) + 30);
		camaroes = Math.floor((Math.random() * 150) + 40);
		mexilhao = Math.floor((Math.random() * 150) + 50);
		var resultadoresultadoo = lagoostas + carranguejos + camaroes + mexilhao;
	
		addFilter(from);
	
		try {
			picc = await loli.profilePictureUrl(m.chat, "image");
		} catch(e) {
			picc = 'https://telegra.ph/file/9651f2a3a24c15ef71dd1.mp4';
		}
	
		ds = await getBuffer(picc);
	
		let thumbInfo = `
	*‚îè‚îÅ‚îÄ‚îÄ *„ÄåÔ∏è üî∞  M I N E  üî∞ „Äç*  ‚îÄ‚îÅ‚îì*
	*‚îÇ‚ñ¢ Total de PEDRAS: ${lagoostas}*
	*‚îÇ‚ñ¢ Total de DIAMANTES: ${carranguejos}*
	*‚îÇ‚ñ¢ Total de OUROS: ${camaroes}*
	*‚îÇ‚ñ¢ Total de FERRO: ${mexilhao}*
	*‚îÇ‚ñ¢ *Resultado Final: ${resultadoresultadoo}*
	*‚îó‚îÅ‚îÄ‚îÄ *„ÄåÔ∏è üî∞  M I N E  üî∞ „Äç*  ‚îÄ‚îÅ‚îõ*
	[„ïö] *Isso significa que foi adicionado em sua carteira R$${resultadoresultadoo},00 em coins!*
	`;
	
 loli.sendMessage(from,  {image: ds, caption: `${thumbInfo}`}, {quoted: info});
		addKoinUser(sender, +resultadoresultadoo);
	
	
	
		break;
	}
	
case 'trabalhar':
minerag = Math.floor((Math.random() * 10) * 150);
loli.sendMessage(from, {image: fs.readFileSync('./loli/image/trabalhar.jpg'), caption: `

*VC TRABALHOU E GANHA ${minerag}*

`},{quoted: info})
addKoinUser(sender, + minerag)
break

case 'money':
 loli.sendMessage(from, {react: {text: `üíµ`, key: info.key}}) 
loli.sendMessage(from, {video: {url: `https://telegra.ph/file/7d1a76c9d628836f27e8d.mp4`}, gifPlayback: true, caption: `
‚ï≠‚îÅ‚û™_MONEY_
‚îÇ‚ó¶‚ûõùó°ùóºùó∫ùó≤ : ${pushname}
‚îÇ‚ó¶‚ûõùó°ùòÇùó∫ùó≤ùóøùóº : ${sender.split("@")[0]}
‚îÇ‚ó¶‚ûõùóóùó∂ùóªùóµùó≤ùó∂ùóøùóº : ${checkATMuser(sender)}
‚ï∞‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
`
},{quoted: info})
 break
 
case 'fundomenu':
if(!Creator) return reply(msg.dono)
if(!isQuotedImage) return reply("Marque uma imagem")
if((isMedia && !info.message.videoMessage || isQuotedImage) && !q.length <= 1) { 
reply(`opa, cria! j√° estou trocando a foto do menu para voc√™..`)
boij = isQuotedImage ? JSON.parse(JSON.stringify(info).replace('quotedM','m')).message.extendedTextMessage.contextInfo.message.imageMessage : info.message.imageMessage
owgi = await getFileBuffer(boij, 'image')
res = await upload(owgi)
logoslink.logo.splice([])
fs.writeFileSync('./loli/image/menu.jpg', JSON.stringify(logoslink, null, 2))
setTimeout(() => {
logoslink.logo.push(res)
fs.writeFileSync('./loli/image/menu.jpg', JSON.stringify(logoslink, null, 2))
reply(`a foto do menu foi alterada com sucesso para: ${logoslink.logo}`)
}, 1000)
} else {
reply(`mande uma imagem com o comando ${prefix + command} para trocar a foto de todos os menus..`)
}
break

case 'fuguete':{
if (!isGroup) return reply('Comando apenas para grupo!') 
const doublez = Math.floor(Math.random() * 5) + 1
const prolxxp = doublez + Number(args[0])
const ganhardidinho = Math.floor(Math.random() * 50) * 100
const perdidinho = Math.floor(Math.random() * 50) * 100
const perda = Math.floor(Math.random() * 7) + 1
const ganha = Math.floor(Math.random() * 7) + 1
const dinheiro_ = checkATMuser(sender)
const checkxpr = checkATMuser(sender, dinheiro_) 
const quantidader = `50`
if (checkxpr <= quantidader) return reply(`tu ta sem dinheiro`(quantidader, checkxpr))
if (Number(args[0]) < 1) return reply(`Qual o valor que voc√™ deseja apostar?`)
if (isNaN(args[0])) return reply(`Digite "${prefix}fuguete 100" (desse jeito sem nenhuma v√≠rgula ou letras por favor.`)
if (doublez == 1) {
valoh3 = Number(args[0])
loli.sendMessage(from, {video: {url: `https://telegra.ph/file/02aee2582cf5c3485b239.mp4`}, gifPlayback: true, caption: `
*VC PERDEU 00.${perda}.X TENTE MAIS UMA VEZ*

*DINHEIRO PERDIDO:* *${valoh3}*
`,
})
confirmATM(sender, valoh3)
} else if (doublez == 2) {
loli.sendMessage(from, {video: {url: `https://telegra.ph/file/f2aa6670076884015f862.mp4`}, gifPlayback: true, caption: `
*POR POUCO VC NAO PERDE VC GANHOU 00.${ganha}.X*

*DINHEIRO GANHO:* *${prolxxp}*
`,
})
addKoinUser(sender, prolxxp, dinheiro_) 
} else if (doublez == 3) {
valoh4 = Number(args[0])
loli.sendMessage(from, {video: {url: `https://telegra.ph/file/02aee2582cf5c3485b239.mp4`}, gifPlayback: true, caption: `
*VC OTARIO VC PERDEU 00.${perda}.X*

*DINHEIRO PERDIDO:* *${valoh4}*
`,
})
confirmATM(sender, valoh4)
} else if (doublez == 4) {
loli.sendMessage(from, {video: {url: `https://telegra.ph/file/f2aa6670076884015f862.mp4`}, gifPlayback: true, caption: `
*SORTE VC GANHOU 00.${ganha}.X*

*DINHEIRO GANHO:* *${prolxxp}*
`,
})
addKoinUser(sender, prolxxp, dinheiro_) 
} else if (doublez == 5) {
valoh5 = Number(args[0])
loli.sendMessage(from, {video: {url: `https://telegra.ph/file/02aee2582cf5c3485b239.mp4`}, gifPlayback: true, caption: `
*ACONSELHO VC A NAO JOGAR MAIS* *VC PERDEU 00.${perda}.X*

*DINHEIRO PERDIDO:* *${valoh5}*
`,
})
confirmATM(sender, valoh5)
} else if (doublez == 6) {
loli.sendMessage(from, {video: {url: `https://telegra.ph/file/f2aa6670076884015f862.mp4`}, gifPlayback: true, caption: `
*OLHA SORTE MAIS UMA VEZ VC GANHOU 00.${ganha}.X*

*DINHEIRO GANHO:* *${prolxxp}*
`,
})
addKoinUser(sender, prolxxp, dinheiro_)

}
}
break 

case 'anime1':
    if (args.length < 1) return reply(`${prefix}${command} e digite o seu nome`)
    teks = body.slice(6)
    if (teks.length > 18) return reply('O texto √© longo, at√© 18 caracteres') //maximo de caracteres
    buffer =(`https://lollityp.sirv.com/venom_apis2.jpg?text.0.text=${teks}&text.0.position.gravity=center&text.0.position.x=1%25&text.0.position.y=16%25&text.0.size=80&text.0.color=ff2772&text.0.opacity=67&text.0.font.family=Bangers&text.0.font.style=italic&text.0.background.opacity=50&text.0.outline.width=6`)
    loli.sendMessage(sender, {image: {url: buffer }, caption: ' *Plaquinha feita COM SUCESSO*'})
    await loli.sendMessage(from, { react: { text: `üòö`, key: info.key }})
    reply (`olha seu pv hehe`)
    break


case 'pescar':
pescando = Math.floor((Math.random() * 10) * 150);
const lagostas = `${Math.floor(Math.random() * 105)}`
const caranguejos = `${Math.floor(Math.random() * 105)}`
const mexilh√£o = `${Math.floor(Math.random() * 105)}`
const peixe = `${Math.floor(Math.random() * 105)}`

loli.sendMessage(from, {image: fs.readFileSync('./loli/image/pescar.jpg'), caption: `
‚îè‚îÅ‚îÄ‚îÄ *„ÄåÔ∏è üé£Ô∏è ùêè ùêÑ ùêí ùêÇ ùêÄ üé£ „Äç*  ‚îÄ‚îÅ‚îì
‚îÇ‚ñ¢ Total de Lagostas: ${lagostas}
‚îÇ‚ñ¢ Total de Caranguejos: ${caranguejos}
‚îÇ‚ñ¢ Total de peixe:${peixe}
‚îÇ‚ñ¢ Total de Mexilh√£o: ${mexilh√£o}
‚îó‚îÅ‚îÄ‚îÄ *„ÄåÔ∏è üé£Ô∏è ùêè ùêÑ ùêí ùêÇ ùêÄ üé£ „Äç*  ‚îÄ‚îÅ‚îõ



E GANHOU ${pescando}R$ üòâ üé£ `},{quoted: info})

addKoinUser(sender, + pescando)

break

	case 'churrasco': {
	// Verificar se o arquivo JSON existe, e criar se n√£o existir
		if (!fs.existsSync('prenderCooldown.json')) {
			fs.writeFileSync('prenderCooldown.json', JSON.stringify({}));
		}
	
		// Carregar o objeto prenderCooldown do arquivo JSON
		const prenderCooldown = JSON.parse(fs.readFileSync('prenderCooldown.json', 'utf8'));
	
		const currentTimeprender = Date.now();
		const lastprenderTime = prenderCooldown[sender] || 0;
		const timeSinceLastprender = currentTimeprender - lastprenderTime;
		const prenderCooldownTime = 5 * 60 * 1000; // 5 minutos em milissegundos
	
		if (timeSinceLastprender < prenderCooldownTime) {
			const remainingTime = (prenderCooldownTime - timeSinceLastprender) / 1000;
			return reply(`Aguarde ${remainingTime.toFixed(0)} segundos vc estar preso`);
		}
		// Verificar se o arquivo JSON existe, e criar se n√£o existir
		if (!fs.existsSync('./loli/rpg/churrascoCooldown.json')) {
			fs.writeFileSync('./loli/rpg/churrascoCooldown.json', JSON.stringify({}));
		}
	
		// Carregar o objeto churrascoCooldown do arquivo JSON
		const churrascoCooldown = JSON.parse(fs.readFileSync('./loli/rpg/churrascoCooldown.json', 'utf8'));
	
		const currentTimeChurrasco = Date.now();
		const lastChurrascoTime = churrascoCooldown[sender] || 0;
		const timeSinceLastChurrasco = currentTimeChurrasco - lastChurrascoTime;
		const churrascoCooldownTime = 5 * 60 * 1000; // 5 minutos em milissegundos
	
		if (timeSinceLastChurrasco < churrascoCooldownTime) {
			const remainingTime = (churrascoCooldownTime - timeSinceLastChurrasco) / 1000;
			return reply(`Aguarde ${remainingTime.toFixed(0)} segundos antes de fazer outro churrasco.`);
		}
	
		reply(`*OL√Å [ ${pushname} ] AGUARDE 5 SEGUNDOS*`)
		await sleep (5000);
		contrafile = Math.floor((Math.random() * 150) + 50);
		assinhadefrango = Math.floor((Math.random() * 150) + 30);
		filebigno = Math.floor((Math.random() * 150) + 40);
		pikanha = Math.floor((Math.random() * 150) + 50);
		var resultado1 = contrafile + assinhadefrango + filebigno + pikanha;
	
		addFilter(from);
	
		try {
			picc = await zenitsu.profilePictureUrl(m.chat, "image");
		} catch(e) {
			picc = 'https://telegra.ph/file/2bf2e198407f9b8bfbcd0.jpg';
		}
	
		ds = await getBuffer(picc);
	
		let thumbInfo = `
	*‚îè *„ÄåÔ∏èüçñ ùêÇ ùêá ùêî ùêë ùêë ùêÄ ùêí ùêÇ ùêé üçñ„Äç  ‚îì*
	*‚îÇ‚ñ¢ Carne - Picanha Argentina: ${contrafile}*
	*‚îÇ‚ñ¢ Carne - Contra Fil√©: ${assinhadefrango}*
	*‚îÇ‚ñ¢ Carne - Asinhas de Frango: ${filebigno}*
	*‚îÇ‚ñ¢ Carne - Fil√© Mignon: ${pikanha}*
	*‚îó „ÄåÔ∏èüçñ ùêÇ ùêá ùêî ùêë ùêë ùêÄ ùêí ùêÇ ùêé üçñ„Äç  ‚îõ*
	[„ïö] *Foram vendidas hoje por voc√™ em nosso a√ßougue: ${resultado1} pe√ßas de carne por voc√™. Parab√©ns!*
	[„ïö] *Isso significa que foi adicionado em sua carteira R$${resultado1},00 em coins!*
	`;
	
		loli.sendMessage(from,  {image: ds, caption: `${thumbInfo}`}, {quoted: info});
		addKoinUser(sender, +resultado1);
	
		// Atualizar o tempo do √∫ltimo churrasco no arquivo JSON
		churrascoCooldown[sender] = currentTimeChurrasco;
		fs.writeFileSync('./loli/rpg/churrascoCooldown.json', JSON.stringify(churrascoCooldown));
	
		break;
	}

case 'alugarcasa':
if(!JSON.stringify(casa).includes(sender)) return reply(`VOCE NAO TEM UMA CASA USE  ${prefix}casa`)
casaluge = Math.floor((Math.random() * 10) * 30);
casapronta = Math.floor((Math.random() * 10) * 500);
reply(`VOCE ALUGOU A CASA POR ${casaluge} DIAS\n\nVOCE GANHOU  R$${casapronta}`)
addKoinUser(sender, + casapronta)
break

case 'casa':{
const dinheiro = checkATMuser(sender)
const checkxpr = checkATMuser(sender, dinheiro) 
const quantidader = `300000`
if (checkxpr < quantidader) return reply(`*${pushname} VC NAO TEM DINHEIRO SUFICIENTE PARA COMPRAR CASA*\n\n*PRE√áO: ${quantidader}*`)
var [comprar] = q.split("")
if(!q.includes("")) return reply(`Cade a espa√ßo mano?\nExemplo: ${prefix + command} comprar`)  
casa.push(`${sender}`)
fs.writeFileSync('./funcoes_rpg/casa/casa.json', JSON.stringify(casa))
addKoinUser(sender, - quantidader)
reply(`*CASA COMPRADO COM SUCESSO* üòÉ\n\n*CUSTO üí∞: ${quantidader}*`)
}
break

case 'hero': case 'lot':
try {
ppimg = await zenitsu.profilePictureUrl(`${sender.split('@')[0]}@c.us`, 'image')
} catch {
ppimg = 'https://telegra.ph/file/b5427ea4b8701bc47e751.jpg'
}
try {
var conselho = palavras[Math.floor(Math.random() * palavras.length)]
const nivelgado = ['1','2','3','4','5','6','7','8','9']
const nivelgado2 = ['1','2','3','4','5','6','7','8','9'] 
const nivelgador = nivelgado[Math.floor(Math.random() * (nivelgado.length))]
const nivelgado2r = nivelgado2[Math.floor(Math.random() * (nivelgado2.length))] 
const puta = ['1','2','3','4','5','6','7','8','9']
const puta2 = ['1','2','3','4','5','6','7','8','9'] 
const putar = puta[Math.floor(Math.random() * (puta.length))]
const putar2 = puta2[Math.floor(Math.random() * (puta2.length))] 
const gostosura = ['1','2','3','4','5','6','7','8','9']
const gostosura2 = ['1','2','3','4','5','6','7','8','9'] 
const gostosurar = gostosura[Math.floor(Math.random() * (gostosura.length))]
const gostosurar2 = gostosura2[Math.floor(Math.random() * (gostosura2.length))] 
gadop = `${Math.floor(Math.random() * 100)}`
const programa = Math.ceil(Math.random() * 10000)
loli.sendMessage(from, {video: {url: `https://telegra.ph/file/b1febb2db7a727eee9d7d.mp4`}, gifPlayback: true, caption: ` 
‚îè‚îÅ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ„Äåüï¥Ô∏è„Äç‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÅ‚îì
‚îÇ          *SEU INVENT√ÅRIO*
‚îÇ
‚îÇ *${isCarab? "‚õëÔ∏è" : "‚ùå"} : CAPACETE*
‚îÇ
‚îÇ *${isRoupab? "üëî" : "‚ùå"} : PALITOR*
‚îÇ
‚îÇ *${iscasa? "üè°" : "‚ùå"} : CASA*
‚îÇ
‚îÇ *${isCaussa? "üëñ" : "‚ùå"} : CAL√áA*
‚îÇ
‚îÇ *${isaguacoco? "üíß" : "‚ùå"} : AGUA DE COCO*
‚îÇ
‚îÇ *${isSapato? "üëû" : "‚ùå"} : SAPATO*
‚îÇ
‚îÇ *${isespada? "‚öî" : "‚ùå"} : ESPADA*
‚îÇ
‚îÇ
‚îÇ
‚ï†‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚îÇ             *TAGS*
‚ï†‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚îÇ
‚îÇ
‚îÇ> RICO: ${istagrico? "SIM ‚úÖ" : "N√ÉO ‚ùå"}
‚îÇ
‚îÇ
‚îó‚îÅ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ„Äåüï¥Ô∏è„Äç‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÅ‚îõ
`},{quoted: info})
} catch (e) {
console.log(e)
}
break

case 'tomaraguacoco':
if(!JSON.stringify(aguacoco).includes(sender)) return reply(`VOCE NAO TEM AGUA DE COCO INFINITO USE  ${prefix}aguacoco`)
aguadd = Math.floor((Math.random() * 4) * 3);
reply(`VOCE TOMOU UMA AGUA DE COCO\n\nMATOU [ ${aguadd}% ] DA SUA SEDE `)
break

case 'aguacoco':{
const dinheiro = checkATMuser(sender)
const checkxpr = checkATMuser(sender, dinheiro) 
const quantidader = `30000`
if (checkxpr < quantidader) return reply(`*${pushname} VC NAO TEM DINHEIRO SUFICIENTE PARA COMPRAR AGUA DE COCO INFINITO*\n\n*PRE√áO: ${quantidader}*`)
var [comprar] = q.split("")
if(!q.includes("")) return reply(`Cade a espa√ßo mano?\nExemplo: ${prefix + command} comprar`)  
aguacoco.push(`${sender}`)
fs.writeFileSync('./funcoes_rpg/agua/aguacoco.json', JSON.stringify(aguacoco))
addKoinUser(sender, - quantidader)
reply(`AGUA DE COCO COMPRADA COM SUCESSO* üåç\n\n*CUSTO üí∞: ${quantidader}*`)
}
break

case 'pornovidd':{
hora1 = moment.tz('America/Sao_Paulo').format('HH:mm:ss')
const dattaa = moment.tz('America/Sao_Paulo').format('DD/MM/YY');
const dinheiro = checkATMuser(sender)
const checkxpr = checkATMuser(sender, dinheiro) 
const quantidader = `4000`
if (checkxpr <= quantidader) return reply(`*[‚ùó] Desculpe ${pushname} voc√™ n√£o tem dinhero suficiente para efetuar a compra de $4000*`)
if(!isPremium) return reply(enviar.msg.premium)
reply(`J√° estou enviando no pv ${pushname}`)
await loli.sendMessage(from, {react: { text: "üòà", key: info.key }})
  bla = JSON.parse(fs.readFileSync("./loli/sexv.json")) 
loli.sendMessage(sender, {video: {url: bla[Math.floor(Math.random() * bla.length)]}},{quoted: info})
addKoinUser(sender, - quantidader)
}
break

case 'capacete':{
const dinheiro = checkATMuser(sender)
const checkxpr = checkATMuser(sender, dinheiro) 
const quantidader = `30000`
var [comprar] = q.split("")
if(!q.includes("")) return reply(`Cade a espa√ßo mano?\nExemplo: ${prefix + command} comprar`)  
if (checkxpr < quantidader) return reply(`*${pushname} VC NAO TEM DINHEIRO SUFICIENTE PARA COMPRAR A CAPACETE DE TRABALHO*\n\n*PRE√áO: ${quantidader}*`)
carab.push(`${sender}`)
fs.writeFileSync('./funcoes_rpg/carab/carab.json', JSON.stringify(carab))
addKoinUser(sender, - quantidader)
reply(`*CAPACETE COMPRADO COM SUCESSO*\n\n*CUSTO üí∞: ${quantidader}*`)
}
break

case 'calssa':{
const dinheiro = checkATMuser(sender)
const checkxpr = checkATMuser(sender, dinheiro) 
const quantidader = `3000`
if (checkxpr < quantidader) return reply(`*${pushname} VC NAO TEM DINHEIRO SUFICIENTE PARA COMPRAR CAL√áA DE TRABALHO*\n\n*PRE√áO: ${quantidader}*`)
var [comprar] = q.split("")
if(!q.includes("")) return reply(`Cade a espa√ßo mano?\nExemplo: ${prefix + command} comprar`)  
caussa.push(`${sender}`)
fs.writeFileSync('./funcoes_rpg/caussa/caussa.json', JSON.stringify(caussa))
addKoinUser(sender, - quantidader)
reply(`*CAL√áA COMPRADA COM SUCESSO*\n\n*CUSTO üí∞: ${quantidader}*`)
}
break

case 'sapatos':{
const dinheiro = checkATMuser(sender)
const checkxpr = checkATMuser(sender, dinheiro) 
const quantidader = `3000`
if (checkxpr < quantidader) return reply(`*${pushname} VC NAO TEM DINHEIRO SUFICIENTE PARA COMPRAR SAPATOS DE TRABALHO*\n\n*PRE√áO: ${quantidader}*`)
var [comprar] = q.split("")
if(!q.includes("")) return reply(`Cade a espa√ßo mano?\nExemplo: ${prefix + command} comprar`)  
sapato.push(`${sender}`)
fs.writeFileSync('./funcoes_rpg/sapato/sapato.json', JSON.stringify(sapato))
addKoinUser(sender, - quantidader)
reply(`*SAPATO COMPRADO COM SUCESSO*\n\n*CUSTO üí∞: ${quantidader}*`)
}
break

case 'palitor':{
const dinheiro = checkATMuser(sender)
const checkxpr = checkATMuser(sender, dinheiro) 
const quantidader = `3000`
if (checkxpr < quantidader) return reply(`*${pushname} VC NAO TEM DINHEIRO SUFICIENTE PARA COMPRAR PALITOR DE TRABALHO*\n\n*PRE√áO: ${quantidader}*`)
var [comprar] = q.split("")
if(!q.includes("")) return reply(`Cade a espa√ßo mano?\nExemplo: ${prefix + command} comprar`)  
palitor.push(`${sender}`)
fs.writeFileSync('./funcoes_rpg/palitor/palitor.json', JSON.stringify(palitor))
addKoinUser(sender, - quantidader)
reply(`*PALITOR COMPRADO COM SUCESSO*\n\n*CUSTO üí∞: ${quantidader}*`)
}
break

case 'totag':
case 'cita':
case 'hidetag':
if(!isGroup) return reply('Este comando s√≥ deve ser utilizado em Grupo.')
if (!isGroupAdmins && !SoDono) return reply('Voc√™ precisa ser ADM pra utilizar este comando')
membros = (groupId, membros1) => {
array = []
for (let i = 0; i < membros1.length; i++) {
array.push(membros1[i].id)
}
return array
}
var yd = membros(from, groupMembers)
if((isMedia && !m.message.videoMessage || isQuotedSticker) && args.length == 0) {
media = isQuotedSticker ? m.message.extendedTextMessage.contextInfo.quotedMessage.stickerMessage : m.message.stickerMessage
rane = getRandom('.'+await getExtension(media.mimetype))
img = await getFileBuffer(media, 'sticker')
fs.writeFileSync(rane,img)
fig = fs.readFileSync(rane)
var options = {
sticker: fig,  
mentions: yd
}
loli.sendMessage(from, options)
} else if ((isMedia && !m.message.videoMessage || isQuotedImage) && args.length == 0) {
media = isQuotedImage ? m.message.extendedTextMessage.contextInfo.quotedMessage.imageMessage : m.message.imageMessage
rane = getRandom('.'+await getExtension(media.mimetype))
img = await getFileBuffer(media, 'image')
fs.writeFileSync(rane,img)
buff = fs.readFileSync(rane)
loli.sendMessage(from, {image: buff, mentions: yd}, {quoted: info})
} else if ((isMedia && !m.message.videoMessage || isQuotedVideo) && args.length == 0) {
media = isQuotedVideo ? m.message.extendedTextMessage.contextInfo.quotedMessage.videoMessage : m.message.videoMessage
rane = getRandom('.'+await getExtension(media.mimetype))
vid = await getFileBuffer(media, 'video')
fs.writeFileSync(rane,vid)
buff = fs.readFileSync(rane)
loli.sendMessage(from, {video: buff, mimetype: 'video/mp4',mentions: yd}, {quoted: info})
} else if ((isMedia && !m.message.videoMessage || isQuotedAudio) && args.length == 0) {
media = isQuotedAudio ? m.message.extendedTextMessage.contextInfo.quotedMessage.audioMessage : m.message.audioMessage
rane = getRandom('.'+await getExtension(media.mimetype))
aud = await getFileBuffer(media, 'audio')
fs.writeFileSync(rane,aud)
buff = fs.readFileSync(rane)
loli.sendMessage(from, {audio: buff, mimetype: 'audio/mp4', ptt:true,mentions: yd}, {quoted: info})
} else if ((isMedia && !m.message.videoMessage || isQuotedDocument) && args.length == 0) {
media = isQuotedDocument ? m.message.extendedTextMessage.contextInfo.quotedMessage.documentMessage : m.message.documentMessage
rane = getRandom('.'+await getExtension(media.mimetype))
doc = await getFileBuffer(media, 'document')
fs.writeFileSync(rane,doc)
buff = fs.readFileSync(rane)
loli.sendMessage(from, {document: buff, mimetype : 'text/plain',mentions: yd},{quoted: info})
} else if(body){
if(q.length < 1) return reply('Citar oq vey?')
loli.sendMessage(from, {text: body.slice(command.length + 2), mentions: yd})
} else {
reply(`Responder imagem/documento/gif/adesivo/√°udio/v√≠deo com legenda ${prefix + command}`)
}
break

case 'tagrico':{
const dinheiro = checkATMuser(sender)
const checkxpr = checkATMuser(sender, dinheiro) 
const quantidader = `6000`
if (checkxpr < quantidader) return reply(`*${pushname} VC NAO TEM DINHEIRO SUFICIENTE PARA COMPRAR TAG DE RICO*\n\n*PRE√áO: ${quantidader}*`)
var [comprar] = q.split("")
if(!q.includes("")) return reply(`Cade a espa√ßo mano?\nExemplo: ${prefix + command} comprar`)  
tagrico.push(`${sender}`)
fs.writeFileSync('./funcoes_rpg/tagrico/tagrico.json', JSON.stringify(tagrico))
addKoinUser(sender, - quantidader)
reply(`*TAG RICO COMPRADO  COM SUCESSO* üí∞üí≤üíµ\n\n*CUSTO üí∞: ${quantidader}*`)
}
break

case 'gerarcpff':
const dinheiropi = checkATMuser(sender)
const checkxprpi = checkATMuser(sender, dinheiropi) 
const quantidaderpi = `4000`
if (checkxprpi < quantidaderpi) return reply(`*${pushname} VC NAO TEM DINHEIRO SUFICIENTE PARA COMPRAR*\n\n*PRE√áO: ${quantidaderpi}*`)
cp1 = `${Math.floor(Math.random() * 300) + 600}`
cp2 = `${Math.floor(Math.random() * 300) + 600}`
cp3 = `${Math.floor(Math.random() * 300) + 600}`
cp4 = `${Math.floor(Math.random() * 30) + 60}`
cpf = `${cp1}.${cp2}.${cp3}-${cp4}`
await loli.sendMessage(from, {text: `CPF gerado com sucesso : ${cpf}`}, {quoted: info})
addKoinUser(sender, - quantidaderpi)
break

case 'animal':
  if (!q) {
    reply(`Desculpe, parece que voc√™ n√£o forneceu o nome do animal. Voc√™ pode usar como exemplo: *${prefixo + comando} gato*`);
     } else {
    const animais = [{ "nome": "C√£o", "especie": "Canis lupus familiaris", "habitat": "Dom√©stico", "dieta": "Carn√≠voro" }, { "nome": "Gato", "especie": "Felis catus", "habitat": "Dom√©stico e selvagem", "dieta": "Carn√≠voro" }, { "nome": "Cavalo", "especie": "Equus ferus caballus", "habitat": "Dom√©stico e selvagem", "dieta": "Herb√≠voro" },
  {
    "nome": "Lobo",
    "especie": "Canis lupus",
    "habitat": "Florestas, tundras, montanhas e campos abertos",
    "dieta": "Carn√≠voro"
  },
  {
    "nome": "√Åguia",
    "especie": "Aquila chrysaetos",
    "habitat": "Florestas, montanhas e √°reas costeiras",
    "dieta": "Carn√≠voro"
  },
  {
    "nome": "Macaco",
    "especie": "Macaca fascicularis",
    "habitat": "Florestas tropicais e subtropicais",
    "dieta": "On√≠voro"
  },
  {
    "nome": "Canarinho",
    "especie": "Serinus canaria",
    "habitat": "Ilhas Can√°rias e Madeira",
    "dieta": "Gran√≠voro"
  },
  {
    "nome": "Tubar√£o",
    "especie": "Carcharodon carcharias",
    "habitat": "Oceanos tropicais e subtropicais",
    "dieta": "Carn√≠voro"
  },
  {
    "nome": "Formiga",
    "especie": "Formicidae",
    "habitat": "Todos os continentes, exceto a Ant√°rtida",
    "dieta": "On√≠voro"
  },
  {
  "nome": "Tartaruga",
  "especie": "Testudines",
  "habitat": "Aqu√°tico e terrestre",
  "dieta": "On√≠voro"
},
{
  "nome": "Corvo",
  "especie": "Corvus corax",
  "habitat": "Florestas, campos e cidades",
  "dieta": "Carn√≠voro"
},
{
  "nome": "Girafa",
  "especie": "Giraffa camelopardalis",
  "habitat": "√Åfrica",
  "dieta": "Herb√≠voro"
},
{
  "nome": "Elefante",
  "especie": "Elephas maximus",
  "habitat": "√Åsia e √Åfrica",
  "dieta": "Herb√≠voro"
},
{
  "nome": "Golfinho",
  "especie": "Delphinus delphis",
  "habitat": "Oceanos e mares",
  "dieta": "Carn√≠voro"
},
    {
      "nome": "Le√£o",
      "especie": "Panthera leo",
      "habitat": "√Åfrica subsaariana",
      "dieta": "Carn√≠voro"
    },
    {
      "nome": "Tigre",
      "especie": "Panthera tigris",
      "habitat": "√Åsia",
      "dieta": "Carn√≠voro"
    },
    {
      "nome": "Gorila",
      "especie": "Gorilla gorilla",
      "habitat": "√Åfrica Central e Ocidental",
      "dieta": "Herb√≠voro"
    },
    {
      "nome": "Papagaio",
      "especie": "Psittaciformes",
      "habitat": "Am√©rica do Sul, Am√©rica Central, √Åfrica e Oceania",
      "dieta": "On√≠voro"
    },
    {
      "nome": "Coelho",
      "especie": "Oryctolagus cuniculus",
      "habitat": "Europa, √Åfrica e Austr√°lia",
      "dieta": "Herb√≠voro"
    },
      { "nome": "Vaca", "especie": "Bos taurus", "habitat": "Dom√©stico", "dieta": "Herb√≠voro" }, { "nome": "Porco", "especie": "Sus scrofa domestica", "habitat": "Dom√©stico", "dieta": "On√≠voro" }, { "nome": "Galinha", "especie": "Gallus gallus domesticus", "habitat": "Dom√©stico", "dieta": "On√≠voro" }, { "nome": "Pato", "especie": "Anas platyrhynchos domesticus", "habitat": "Dom√©stico e selvagem", "dieta": "On√≠voro" }, { "nome": "Ganso", "especie": "Anser anser domesticus", "habitat": "Dom√©stico e selvagem", "dieta": "Herb√≠voro" }, { "nome": "Peru", "especie": "Meleagris gallopavo", "habitat": "Dom√©stico", "dieta": "On√≠voro" }, { "nome": "Coelho", "especie": "Oryctolagus cuniculus", "habitat": "Dom√©stico e selvagem", "dieta": "Herb√≠voro" }];
    const animal = animais.find(a => a.nome.toLowerCase() === q.toLowerCase());
       if (animal) {
       reply(`*‚Ä¢ Nome:* ${animal.nome}\n*‚Ä¢ Esp√©cie:* ${animal.especie}\n*‚Ä¢ Habitat:* ${animal.habitat}\n*‚Ä¢ Dieta:* ${animal.dieta}`);
       } else {
       reply("Animal n√£o encontrado.")}}
       break;
       
case 'wallpapers4k': {
//by Daniel >\<
data = fs.readFileSync('./loli/mais/wallpapers4k.js');
jsonData = JSON.parse(data);
randIndex = Math.floor(Math.random() * jsonData.length);
var foda =[`aqui est√° o seu ${command} ${pushname}`]
var zaltin = foda[Math.floor(Math.random() * foda.length)]
randKey = jsonData[randIndex];
imagem = await getBuffer(randKey.result)
let thumbInfo = `${zaltin}`;
blabla = await getBuffer(`https://telegra.ph/file/0e2989e6947b464fa66b8.jpg`);
loli.sendMessage(from, {image: imagem, caption: `${thumbInfo}`},{quoted: info})
}
break

case 'wallpaperanimes': {
//by Daniel >\<
data = fs.readFileSync('./loli/mais/wallpaperanimes.js');
jsonData = JSON.parse(data);
randIndex = Math.floor(Math.random() * jsonData.length);
var foda =[`aqui est√° o seu ${command} ${pushname}`]
var zaltin = foda[Math.floor(Math.random() * foda.length)]
randKey = jsonData[randIndex];
imagem = await getBuffer(randKey.result)
let thumbInfo = `${zaltin}`;
blabla = await getBuffer(`https://telegra.ph/file/0e2989e6947b464fa66b8.jpg`);
loli.sendMessage(from, {image: imagem, caption: `${thumbInfo}`},{quoted: info})
}
break

case 'wallpaperbranco': {
//by Daniel >\<
data = fs.readFileSync('./loli/mais/wallpapersbranco.js');
jsonData = JSON.parse(data);
randIndex = Math.floor(Math.random() * jsonData.length);
var foda =[`aqui est√° o seu ${command} ${pushname}`]
var zaltin = foda[Math.floor(Math.random() * foda.length)]
randKey = jsonData[randIndex];
imagem = await getBuffer(randKey.result)
let thumbInfo = `${zaltin}`;
blabla = await getBuffer(`https://telegra.ph/file/0e2989e6947b464fa66b8.jpg`);
loli.sendMessage(from, {image: imagem, caption: `${thumbInfo}`},{quoted: info})
}
break
l
case 'wallpapervermelho': {
//by Daniel >\<
data = fs.readFileSync('./loli/mais/wallpapervermelho.js');
jsonData = JSON.parse(data);
randIndex = Math.floor(Math.random() * jsonData.length);
var foda =[`aqui est√° o seu ${command} ${pushname}`]
var zaltin = foda[Math.floor(Math.random() * foda.length)]
randKey = jsonData[randIndex];
imagem = await getBuffer(randKey.result)
let buttons = [
{buttonId: `${prefix}wallpapervermelho`, buttonText: {displayText: '‚òî ùêèùêëùêéÃÅùêóùêàùêåùêé ‚òî'}, type: 1}]
let thumbInfo = `${zaltin}`;
blabla = await getBuffer(`https://telegra.ph/file/0e2989e6947b464fa66b8.jpg`);
loli.sendMessage(from, {image: imagem, caption: `${thumbInfo}`},{quoted: info})
}
break

case 'wallpaperverde': {
//by Daniel >\<
data = fs.readFileSync('./loli/mais/wallpaperverde.js');
jsonData = JSON.parse(data);
randIndex = Math.floor(Math.random() * jsonData.length);
var foda =[`aqui est√° o seu ${command} ${pushname}`]
var zaltin = foda[Math.floor(Math.random() * foda.length)]
randKey = jsonData[randIndex];
imagem = await getBuffer(randKey.result)
let buttons = [
{buttonId: `${prefix}wallpaperverde`, buttonText: {displayText: '‚òî ùêèùêëùêéÃÅùêóùêàùêåùêé ‚òî'}, type: 1}]
let thumbInfo = `${zaltin}`;
blabla = await getBuffer(`https://telegra.ph/file/0e2989e6947b464fa66b8.jpg`);
loli.sendMessage(from, {image: imagem, caption: `${thumbInfo}`},{quoted: info})
}
break

case 'wallpaperazul': {
//by Daniel >\<
data = fs.readFileSync('./loli/mais/wallpaperazul.js');
jsonData = JSON.parse(data);
randIndex = Math.floor(Math.random() * jsonData.length);
var foda =[`aqui est√° o seu ${command} ${pushname}`]
var zaltin = foda[Math.floor(Math.random() * foda.length)]
randKey = jsonData[randIndex];
imagem = await getBuffer(randKey.result)
let buttons = [
{buttonId: `${prefix}wallpaperazul`, buttonText: {displayText: '‚òî ùêèùêëùêéÃÅùêóùêàùêåùêé ‚òî'}, type: 1}]
let thumbInfo = `${zaltin}`;
blabla = await getBuffer(`https://telegra.ph/file/0e2989e6947b464fa66b8.jpg`);
loli.sendMessage(from, {image: imagem, caption: `${thumbInfo}`},{quoted: info})
}
break

case 'wallpaperroxo': {
//by Daniel >\<
data = fs.readFileSync('./loli/mais/wallpaperoxo.js');
jsonData = JSON.parse(data);
randIndex = Math.floor(Math.random() * jsonData.length);
var foda =[`aqui est√° o seu ${command} ${pushname}`]
var zaltin = foda[Math.floor(Math.random() * foda.length)]
randKey = jsonData[randIndex];
imagem = await getBuffer(randKey.result)
let buttons = [
{buttonId: `${prefix}wallpaperoxo`, buttonText: {displayText: '‚òî ùêèùêëùêéÃÅùêóùêàùêåùêé ‚òî'}, type: 1}]
let thumbInfo = `${zaltin}`;
blabla = await getBuffer(`https://telegra.ph/file/0e2989e6947b464fa66b8.jpg`);
loli.sendMessage(from, {image: imagem, caption: `${thumbInfo}`},{quoted: info})
}
break

case 'wallpaperamarelo': {
//by Daniel >\<
data = fs.readFileSync('./loli/mais/wallpaperamarelo.js');
jsonData = JSON.parse(data);
randIndex = Math.floor(Math.random() * jsonData.length);
var foda =[`aqui est√° o seu ${command} ${pushname}`]
var zaltin = foda[Math.floor(Math.random() * foda.length)]
randKey = jsonData[randIndex];
imagem = await getBuffer(randKey.result)
let buttons = [
{buttonId: `${prefix}wallpaperamarelo`, buttonText: {displayText: '‚òî ùêèùêëùêéÃÅùêóùêàùêåùêé ‚òî'}, type: 1}]
let thumbInfo = `${zaltin}`;
blabla = await getBuffer(`https://telegra.ph/file/0e2989e6947b464fa66b8.jpg`);
loli.sendMessage(from, {image: imagem, caption: `${thumbInfo}`},{quoted: info})
}
break

case 'wallpaperrosa': {
//by Daniel >\<
data = fs.readFileSync('./loli/mais/wallpaperosa.js');
jsonData = JSON.parse(data);
randIndex = Math.floor(Math.random() * jsonData.length);
var foda =[`aqui est√° o seu ${command} ${pushname}`]
var zaltin = foda[Math.floor(Math.random() * foda.length)]
randKey = jsonData[randIndex];
imagem = await getBuffer(randKey.result)
let buttons = [
{buttonId: `${prefix}wallpaperosa`, buttonText: {displayText: '‚òî ùêèùêëùêéÃÅùêóùêàùêåùêé ‚òî'}, type: 1}]
let thumbInfo = `${zaltin}`;
blabla = await getBuffer(`https://telegra.ph/file/0e2989e6947b464fa66b8.jpg`);
loli.sendMessage(from, {image: imagem, caption: `${thumbInfo}`},{quoted: info})
}
break


case 'wallpapershinobu': {
//by Daniel >\<
data = fs.readFileSync('./loli/mais/shinobu.js');
jsonData = JSON.parse(data);
randIndex = Math.floor(Math.random() * jsonData.length);
var foda =[`aqui est√° o seu ${command} ${pushname}`]
var zaltin = foda[Math.floor(Math.random() * foda.length)]
randKey = jsonData[randIndex];
imagem = await getBuffer(randKey.result)
let buttons = [
{buttonId: `${prefix}wallpapershinobu`, buttonText: {displayText: '‚òî ùêèùêëùêéÃÅùêóùêàùêåùêé ‚òî'}, type: 1}]
let thumbInfo = `${zaltin}`;
blabla = await getBuffer(`https://github.com/TomiokaNet/WALLPAPER/raw/main/SHINOBU/fb10ed54c286b52d7e5f22f5b465274c.jpg`);
loli.sendMessage(from, {image: imagem, caption: `${thumbInfo}`},{quoted: info})
}
break

case 'wallpaperobanai': {
//by Daniel >\<
data = fs.readFileSync('./loli/mais/obanai.js');
jsonData = JSON.parse(data);
randIndex = Math.floor(Math.random() * jsonData.length);
var foda =[`aqui est√° o seu ${command} ${pushname}`]
var zaltin = foda[Math.floor(Math.random() * foda.length)]
randKey = jsonData[randIndex];
imagem = await getBuffer(randKey.result)
let buttons = [
{buttonId: `${prefix}wallpaperobanai`, buttonText: {displayText: '‚òî ùêèùêëùêéÃÅùêóùêàùêåùêé ‚òî'}, type: 1}]
let thumbInfo = `${zaltin}`;
blabla = await getBuffer(`https://github.com/TomiokaNet/WALLPAPER/raw/main/OBANAI/f437d7615e55a1804f637f7151769ee9.jpg`);
loli.sendMessage(from, {image: imagem, caption: `${thumbInfo}`},{quoted: info})
}
break


case 'wallpapergyutaro': {
//by Daniel >\<
data = fs.readFileSync('./loli/mais/gyutaro.js');
jsonData = JSON.parse(data);
randIndex = Math.floor(Math.random() * jsonData.length);
var foda =[`aqui est√° o seu ${command} ${pushname}`]
var zaltin = foda[Math.floor(Math.random() * foda.length)]
randKey = jsonData[randIndex];
imagem = await getBuffer(randKey.result)
let buttons = [
{buttonId: `${prefix}wallpapergyutaro`, buttonText: {displayText: '‚òî ùêèùêëùêéÃÅùêóùêàùêåùêé ‚òî'}, type: 1}]
let thumbInfo = `${zaltin}`;
blabla = await getBuffer(`https://github.com/TomiokaNet/WALLPAPER/raw/main/GYUTARO/fdcde69d36595bfd6b7671adcd510761.jpg`);
loli.sendMessage(from, {image: imagem, caption: `${thumbInfo}`},{quoted: info})
}
break

case 'wallpapertomioka': {
//by Daniel >\<
data = fs.readFileSync('./loli/mais/tomioka.js');
jsonData = JSON.parse(data);
randIndex = Math.floor(Math.random() * jsonData.length);
var foda =[`aqui est√° o seu ${command} ${pushname}`]
var zaltin = foda[Math.floor(Math.random() * foda.length)]
randKey = jsonData[randIndex];
imagem = await getBuffer(randKey.result)
let buttons = [
{buttonId: `${prefix}wallpapertomioka`, buttonText: {displayText: '‚òî ùêèùêëùêéÃÅùêóùêàùêåùêé ‚òî'}, type: 1}]
let thumbInfo = `${zaltin}`;
blabla = await getBuffer(`https://github.com/TomiokaNet/WALLPAPER/raw/main/TOMIOKA/f9572e842eb8b67f089c259459394b35.jpg`);
loli.sendMessage(from, {image: imagem, caption: `${thumbInfo}`},{quoted: info})
}
break

case 'wallpaperuzui': {
//by Daniel >\<
data = fs.readFileSync('./loli/mais/uzui.js');
jsonData = JSON.parse(data);
randIndex = Math.floor(Math.random() * jsonData.length);
var foda =[`aqui est√° o seu ${command} ${pushname}`]
var zaltin = foda[Math.floor(Math.random() * foda.length)]
randKey = jsonData[randIndex];
imagem = await getBuffer(randKey.result)
let buttons = [
{buttonId: `${prefix}wallpaperuzui`, buttonText: {displayText: '‚òî ùêèùêëùêéÃÅùêóùêàùêåùêé ‚òî'}, type: 1}]
let thumbInfo = `${zaltin}`;
blabla = await getBuffer(`https://github.com/TomiokaNet/WALLPAPER/raw/main/UZUI/f67c5a0a822808ac770ad49472ccc14f.jpg`);
loli.sendMessage(from, {image: imagem, caption: `${thumbInfo}`},{quoted: info})
}
break

case 'wallpapermitsuri': {
//by Daniel >\<
data = fs.readFileSync('./loli/mais/mitsuri.js');
jsonData = JSON.parse(data);
randIndex = Math.floor(Math.random() * jsonData.length);
var foda =[`aqui est√° o seu ${command} ${pushname}`]
var zaltin = foda[Math.floor(Math.random() * foda.length)]
randKey = jsonData[randIndex];
imagem = await getBuffer(randKey.result)
let buttons = [
{buttonId: `${prefix}wallpapermitsuri`, buttonText: {displayText: '‚òî ùêèùêëùêéÃÅùêóùêàùêåùêé ‚òî'}, type: 1}]
let thumbInfo = `${zaltin}`;
blabla = await getBuffer(`https://github.com/TomiokaNet/WALLPAPER/raw/main/MITSURI/fd16399b5c80072c8deee4f87bf5993e.jpg`);
loli.sendMessage(from, {image: imagem, caption: `${thumbInfo}`},{quoted: info})
}
break

case 'wallpaperdaki': {
//by Daniel >\<
data = fs.readFileSync('./loli/mais/daki.js');
jsonData = JSON.parse(data);
randIndex = Math.floor(Math.random() * jsonData.length);
var foda =[`aqui est√° o seu ${command} ${pushname}`]
var zaltin = foda[Math.floor(Math.random() * foda.length)]
randKey = jsonData[randIndex];
imagem = await getBuffer(randKey.result)
let buttons = [
{buttonId: `${prefix}wallpaperdaki`, buttonText: {displayText: '‚òî ùêèùêëùêéÃÅùêóùêàùêåùêé ‚òî'}, type: 1}]
let thumbInfo = `${zaltin}`;
blabla = await getBuffer(`https://github.com/TomiokaNet/WALLPAPER/raw/main/DAKI/fb8d18f68edd43d1ef752337784cf98f.jpg`);
loli.sendMessage(from, {image: imagem, caption: `${thumbInfo}`},{quoted: info})
}
break

case 'wallpaperkanao': {
//by Daniel >\<
if (!dinheiros) return reply(enviar.msg.dinheiro)
data = fs.readFileSync('./loli/mais/kanao.js');
jsonData = JSON.parse(data);
randIndex = Math.floor(Math.random() * jsonData.length);
var foda =[`aqui est√° o seu ${command} ${pushname}`]
var zaltin = foda[Math.floor(Math.random() * foda.length)]
randKey = jsonData[randIndex];
imagem = await getBuffer(randKey.result)
let buttons = [
{buttonId: `${prefix}wallpaperkanao`, buttonText: {displayText: '‚òî ùêèùêëùêéÃÅùêóùêàùêåùêé ‚òî'}, type: 1}]
let thumbInfo = `${zaltin}`;
blabla = await getBuffer(`https://github.com/TomiokaNet/WALLPAPER/raw/main/KANAO/fbe10876319abaabc0a63f53f2121904.jpg`);
loli.sendMessage(from, {image: imagem, caption: `${thumbInfo}`},{quoted: info})
}
break

case 'wallpapergyenia': {
//by Daniel >\<
data = fs.readFileSync('./loli/mais/gyenia.js');
jsonData = JSON.parse(data);
randIndex = Math.floor(Math.random() * jsonData.length);
var foda =[`aqui est√° o seu ${command} ${pushname}`]
var zaltin = foda[Math.floor(Math.random() * foda.length)]
randKey = jsonData[randIndex];
imagem = await getBuffer(randKey.result)
let buttons = [
{buttonId: `${prefix}wallpapergyenia`, buttonText: {displayText: '‚òî ùêèùêëùêéÃÅùêóùêàùêåùêé ‚òî'}, type: 1}]
let thumbInfo = `${zaltin}`;
blabla = await getBuffer(`https://github.com/TomiokaNet/WALLPAPER/raw/main/GYENIA/fe251cb53add17e1aa7509d59d8490f9.jpg`);
buttonMessage = {image: imagem, caption: `${thumbInfo}`, 
footer: `¬© Copyright By Sigma-MD`
, buttons: buttons, headerType: 4}
loli.sendMessage(info.chat, buttonMessage,{quoted: info})
}
break

case 'wallpapertamayo': {
//by Daniel >\<
data = fs.readFileSync('./loli/mais/tamayo.js');
jsonData = JSON.parse(data);
randIndex = Math.floor(Math.random() * jsonData.length);
var foda =[`aqui est√° o seu ${command} ${pushname}`]
var zaltin = foda[Math.floor(Math.random() * foda.length)]
randKey = jsonData[randIndex];
imagem = await getBuffer(randKey.result)
let buttons = [
{buttonId: `${prefix}wallpapertamayo`, buttonText: {displayText: '‚òî ùêèùêëùêéÃÅùêóùêàùêåùêé ‚òî'}, type: 1}]
let thumbInfo = `${zaltin}`;
blabla = await getBuffer(`https://github.com/TomiokaNet/WALLPAPER/raw/main/TAMAYO/ffb690c3d847c4e7bd539b5bd81d2271.jpg`);
loli.sendMessage(from, {image: imagem, caption: `${thumbInfo}`},{quoted: info})
}
break

case 'wallpaperdouma': {
//by Daniel >\<
data = fs.readFileSync('./loli/mais/douma.js');
jsonData = JSON.parse(data);
randIndex = Math.floor(Math.random() * jsonData.length);
var foda =[`aqui est√° o seu ${command} ${pushname}`]
var zaltin = foda[Math.floor(Math.random() * foda.length)]
randKey = jsonData[randIndex];
imagem = await getBuffer(randKey.result)
let buttons = [
{buttonId: `${prefix}wallpaperdouma`, buttonText: {displayText: '‚òî ùêèùêëùêéÃÅùêóùêàùêåùêé ‚òî'}, type: 1}]
let thumbInfo = `${zaltin}`;
blabla = await getBuffer(`https://github.com/TomiokaNet/WALLPAPER/raw/main/DOUMA/f75946301ba1edd8934d50aa8b1ffc58.jpg`);
loli.sendMessage(from, {image: imagem, caption: `${thumbInfo}`},{quoted: info})
}
break

case 'wallpapersanemi': {
//by Daniel >\<
data = fs.readFileSync('./loli/mais/sanemi.js');
jsonData = JSON.parse(data);
randIndex = Math.floor(Math.random() * jsonData.length);
var foda =[`aqui est√° o seu ${command} ${pushname}`]
var zaltin = foda[Math.floor(Math.random() * foda.length)]
randKey = jsonData[randIndex];
imagem = await getBuffer(randKey.result)
let buttons = [
{buttonId: `${prefix}wallpapersanemi`, buttonText: {displayText: '‚òî ùêèùêëùêéÃÅùêóùêàùêåùêé ‚òî'}, type: 1}]
let thumbInfo = `${zaltin}`;
blabla = await getBuffer(`https://github.com/TomiokaNet/WALLPAPER/raw/main/SANEMI/ffcb83d47e6fcaad697077c139a37890.jpg`);
loli.sendMessage(from, {image: imagem, caption: `${thumbInfo}`},{quoted: info})
}
break

case 'wallpapertokito': {
//by Daniel >\<
data = fs.readFileSync('./loli/mais/tokito.js');
jsonData = JSON.parse(data);
randIndex = Math.floor(Math.random() * jsonData.length);
var foda =[`aqui est√° o seu ${command} ${pushname}`]
var zaltin = foda[Math.floor(Math.random() * foda.length)]
randKey = jsonData[randIndex];
imagem = await getBuffer(randKey.result)
let buttons = [
{buttonId: `${prefix}wallpapertokito`, buttonText: {displayText: '‚òî ùêèùêëùêéÃÅùêóùêàùêåùêé ‚òî'}, type: 1}]
let thumbInfo = `${zaltin}`;
blabla = await getBuffer(`https://github.com/TomiokaNet/WALLPAPER/raw/main/TOKITO/ffac2e76c9de3818aca9c4032a109084.jpg`);
loli.sendMessage(from, {image: imagem, caption: `${thumbInfo}`},{quoted: info})
}
break

case 'wallpaperSigma': {
//by Daniel >\<
data = fs.readFileSync('./loli/mais/zenitsu.js');
jsonData = JSON.parse(data);
randIndex = Math.floor(Math.random() * jsonData.length);
var foda =[`aqui est√° o seu ${command} ${pushname}`]
var zaltin = foda[Math.floor(Math.random() * foda.length)]
randKey = jsonData[randIndex];
imagem = await getBuffer(randKey.result)
let buttons = [
{buttonId: `${prefix}wallpaperSigma`, buttonText: {displayText: '‚òî ùêèùêëùêéÃÅùêóùêàùêåùêé ‚òî'}, type: 1}]
let thumbInfo = `${zaltin}`;
blabla = await getBuffer(`https://github.com/TomiokaNet/WALLPAPER/raw/main/Sigma/e4f78ec55881a632e4e1cc3948a970c9.jpg`);
loli.sendMessage(from, {image: imagem, caption: `${thumbInfo}`},{quoted: info})
}
break

case 'wallpaperenmu': {
//by Daniel >\<
data = fs.readFileSync('./loli/mais/enmu.js');
jsonData = JSON.parse(data);
randIndex = Math.floor(Math.random() * jsonData.length);
var foda =[`aqui est√° o seu ${command} ${pushname}`]
var zaltin = foda[Math.floor(Math.random() * foda.length)]
randKey = jsonData[randIndex];
imagem = await getBuffer(randKey.result)
let buttons = [
{buttonId: `${prefix}wallpaperenmu`, buttonText: {displayText: '‚òî ùêèùêëùêéÃÅùêóùêàùêåùêé ‚òî'}, type: 1}]
let thumbInfo = `${zaltin}`;
blabla = await getBuffer(`https://github.com/TomiokaNet/WALLPAPER/raw/main/ENMU/ff9f048986711075883534c60efb3787.jpg`);
loli.sendMessage(from, {image: imagem, caption: `${thumbInfo}`},{quoted: info})
}
break

case 'wallpaperinosuke': {
//by Daniel >\<
data = fs.readFileSync('./loli/mais/inosuke.js');
jsonData = JSON.parse(data);
randIndex = Math.floor(Math.random() * jsonData.length);
var foda =[`aqui est√° o seu ${command} ${pushname}`]
var zaltin = foda[Math.floor(Math.random() * foda.length)]
randKey = jsonData[randIndex];
imagem = await getBuffer(randKey.result)
let buttons = [
{buttonId: `${prefix}wallpaperinosuke`, buttonText: {displayText: '‚òî ùêèùêëùêéÃÅùêóùêàùêåùêé ‚òî'}, type: 1}]
let thumbInfo = `${zaltin}`;
blabla = await getBuffer(`https://github.com/TomiokaNet/WALLPAPER/raw/main/INOSUKE/f8ecfcc2bb254000ad05f83586517adc1.jpg`);
loli.sendMessage(from, {image: imagem, caption: `${thumbInfo}`},{quoted: info})
}
break

case 'wallpapermuzan': {
//by Daniel >\<
data = fs.readFileSync('./loli/mais/muzan.js');
jsonData = JSON.parse(data);
randIndex = Math.floor(Math.random() * jsonData.length);
var foda =[`aqui est√° o seu ${command} ${pushname}`]
var zaltin = foda[Math.floor(Math.random() * foda.length)]
randKey = jsonData[randIndex];
imagem = await getBuffer(randKey.result)
let buttons = [
{buttonId: `${prefix}wallpapermuzan`, buttonText: {displayText: '‚òî ùêèùêëùêéÃÅùêóùêàùêåùêé ‚òî'}, type: 1}]
let thumbInfo = `${zaltin}`;
blabla = await getBuffer(`https://github.com/TomiokaNet/WALLPAPER/raw/main/MUZAN/f4c5e0ea5adc28e758506648e1f08107.jpg`);
loli.sendMessage(from, {image: imagem, caption: `${thumbInfo}`},{quoted: info})
}
break

case 'wallpaperkokushibou': {
//by Daniel >\<
data = fs.readFileSync('./loli/mais/kokushibou.js');
jsonData = JSON.parse(data);
randIndex = Math.floor(Math.random() * jsonData.length);
var foda =[`aqui est√° o seu ${command} ${pushname}`]
var zaltin = foda[Math.floor(Math.random() * foda.length)]
randKey = jsonData[randIndex];
imagem = await getBuffer(randKey.result)
let buttons = [
{buttonId: `${prefix}wallpaperkokushibou`, buttonText: {displayText: '‚òî ùêèùêëùêéÃÅùêóùêàùêåùêé ‚òî'}, type: 1}]
let thumbInfo = `${zaltin}`;
blabla = await getBuffer(`https://github.com/TomiokaNet/WALLPAPER/raw/main/KOKUSHIBOU/fdebc314e66ab36f00eb5f8705f21d2b.jpg`);
loli.sendMessage(from, {image: imagem, caption: `${thumbInfo}`},{quoted: info})
}
break

case 'wallpaperzenitsu': {
//by Daniel >\<
data = fs.readFileSync('./loli/mais/zenitsu.js');
jsonData = JSON.parse(data);
randIndex = Math.floor(Math.random() * jsonData.length);
var foda =[`aqui est√° o seu ${command} ${pushname}`]
var zaltin = foda[Math.floor(Math.random() * foda.length)]
randKey = jsonData[randIndex];
imagem = await getBuffer(randKey.result)
let buttons = [
{buttonId: `${prefix}wallpaperzenitsu`, buttonText: {displayText: '‚òî ùêèùêëùêéÃÅùêóùêàùêåùêé ‚òî'}, type: 1}]
let thumbInfo = `${zaltin}`;
blabla = await getBuffer(`https://github.com/TomiokaNet/WALLPAPER/raw/main/ZENITSU/fda6066353d57465fac5b029a6afa082.jpg`);
buttonMessage = {image: imagem, caption: `${thumbInfo}`, 
footer: `¬© Copyright By Sigma-MD`
, buttons: buttons, headerType: 4}
loli.sendMessage(info.chat, buttonMessage,{quoted: info})
}
break

case 'wallpapertanjiro': {
//by Daniel >\<
data = fs.readFileSync('./loli/mais/tanjiro.js');
jsonData = JSON.parse(data);
randIndex = Math.floor(Math.random() * jsonData.length);
var foda =[`aqui est√° o seu ${command} ${pushname}`]
var zaltin = foda[Math.floor(Math.random() * foda.length)]
randKey = jsonData[randIndex];
imagem = await getBuffer(randKey.result)
let buttons = [
{buttonId: `${prefix}wallpapertanjiro`, buttonText: {displayText: '‚òî ùêèùêëùêéÃÅùêóùêàùêåùêé ‚òî'}, type: 1}]
let thumbInfo = `${zaltin}`;
blabla = await getBuffer(`https://github.com/TomiokaNet/WALLPAPER/raw/main/TANJIRO/0ee8d9c8ab5e795f4cc6d96dd5c65e8f.jpg`);
loli.sendMessage(from, {image: imagem, caption: `${thumbInfo}`},{quoted: info})
}
break

case 'wallpaperakaza': {
//by Daniel >\<
data = fs.readFileSync('./loli/mais/akaza.js');
jsonData = JSON.parse(data);
randIndex = Math.floor(Math.random() * jsonData.length);
var foda =[`aqui est√° o seu ${command} ${pushname}`]
var zaltin = foda[Math.floor(Math.random() * foda.length)]
randKey = jsonData[randIndex];
imagem = await getBuffer(randKey.result)
let buttons = [
{buttonId: `${prefix}wallpaperakaza`, buttonText: {displayText: '‚òî ùêèùêëùêéÃÅùêóùêàùêåùêé ‚òî'}, type: 1}]
let thumbInfo = `${zaltin}`;
blabla = await getBuffer(`https://github.com/TomiokaNet/WALLPAPER/raw/main/AKAZA/f637dd31731a8117a33ec5da8e335352.jpg`);
loli.sendMessage(from, {image: imagem, caption: `${thumbInfo}`},{quoted: info})
}
break

case 'wallpapergyomei': {
//by Daniel >\<
data = fs.readFileSync('./loli/mais/gyomei.js');
jsonData = JSON.parse(data);
randIndex = Math.floor(Math.random() * jsonData.length);
var foda =[`aqui est√° o seu ${command} ${pushname}`]
var zaltin = foda[Math.floor(Math.random() * foda.length)]
randKey = jsonData[randIndex];
imagem = await getBuffer(randKey.result)
let buttons = [
{buttonId: `${prefix}wallpapergyomei`, buttonText: {displayText: '‚òî ùêèùêëùêéÃÅùêóùêàùêåùêé ‚òî'}, type: 1}]
let thumbInfo = `${zaltin}`;
blabla = await getBuffer(`https://github.com/TomiokaNet/WALLPAPER/raw/main/GYOMEI/f4369b05134a1b3c2da0b548b876c112.jpg`);
loli.sendMessage(from, {image: imagem, caption: `${thumbInfo}`},{quoted: info})
}
break




case 'narutoedits': {
data = fs.readFileSync('./loli/mais/editsnaruto.js');
jsonData = JSON.parse(data);
randIndex = Math.floor(Math.random() * jsonData.length);
var foda =[`‚ÇäÀö.‡≥É‡≥Äùë¨ùë´ùë∞ùëªùë∫‚ú∞ùëµùë®ùëπùëºùëªùë∂·çù÷Ø÷ü‚ãÜ‚Å∫Àñ‚∏ôÃ≠‚ùõ‚óå*Ã•‚Çä\nüë§ ùòöùò∞ùò≠ùò™ùò§ùò™ùòµùò¢ùò•ùò∞ ùò±ùò∞ùò≥: ${pushname}\n`]
var taikin = foda[Math.floor(Math.random() * foda.length)]
randKey = jsonData[randIndex];
tst = await getBuffer(randKey.result)
let thumbInfo = `${taikin}`;
loli.sendMessage(from, {video: tst, caption: `${thumbInfo}`},{quoted: info})
}
break			       


case 'jujutsuedits': {
data = fs.readFileSync('./loli/mais/editsjujutsu.js');
jsonData = JSON.parse(data);
randIndex = Math.floor(Math.random() * jsonData.length);
var foda =[`‚ÇäÀö.‡≥É‡≥Äùë¨ùë´ùë∞ùëªùë∫ ùêâùêîùêâùêîùêìùêíùêî·çù÷Ø÷ü‚ãÜ‚Å∫Àñ‚∏ôÃ≠‚ùõ‚óå*Ã•‚Çä\nüë§ ùòöùò∞ùò≠ùò™ùò§ùò™ùòµùò¢ùò•ùò∞ ùò±ùò∞ùò≥: ${pushname}\nDeseja mais? Clica em pr√≥xima-edit`]
var taikin = foda[Math.floor(Math.random() * foda.length)]
randKey = jsonData[randIndex];
tst = await getBuffer(randKey.result)
let thumbInfo = `${taikin}`;
loli.sendMessage(from, {video: tst, caption: `${thumbInfo}`},{quoted: info})
}
break

case 'itachiedits': {
data = fs.readFileSync('./loli/mais/edits.js');
jsonData = JSON.parse(data);
randIndex = Math.floor(Math.random() * jsonData.length);
var foda =[`‚ÇäÀö.‡≥É‡≥Äùë¨ùë´ùë∞ùëªùë∫·çù÷Ø÷ü‚ãÜ‚Å∫Àñ‚∏ôÃ≠‚ùõ‚óå*Ã•‚Çä\nüë§ ùòöùò∞ùò≠ùò™ùò§ùò™ùòµùò¢ùò•ùò∞ ùò±ùò∞ùò≥: ${pushname}\nDeseja mais? Clica em pr√≥xima-edit`]
var taikin = foda[Math.floor(Math.random() * foda.length)]
randKey = jsonData[randIndex];
tst = await getBuffer(randKey.result)
let thumbInfo = `${taikin}`;
loli.sendMessage(from, {video: tst, caption: `${thumbInfo}`},{quoted: info})
}
break         

case 'imunes':
loli.sendMessage(from, {image: fs.readFileSync('./loli/image/menu.jpg'), caption: `


ùôíùôÉùòºùôèùôéùòºùôãùôã ùôÑùôâùôàùôêùôâùôÄS


Whatsapp Taggima v3 Database
Database :
http://www.mediafire.com/file/yk8juklr067pbcf/Database_Taggima-1.zip/file
GB Pro Inmune
Download:
https://www.mediafire.com/file/6d8ubkmzpucz9g8/GB_Pro_iMUNE.apk/file

WhatsApp 2.20.152 Inmune
Download :
https://www.mediafire.com/file/lutjayzytetgrxv/WhatsApp_2.20.152_sign.apk/file

WA Fsociety V1
Download :
https://www.mediafire.com/file/zk313rzp23atavu/WA%25E2%2580%25A2Fsociety_V1_IMUNE.apk/file

WA Fsociety V2
Download :
https://www.mediafire.com/file/lutjayzytetgrxv/WhatsApp_2.20.152_sign.apk/file

TAGGIMA V19
Download :
https://www.mediafire.com/file/lutjayzytetgrxv/WhatsApp_2.20.152_sign.apk/file

Âª¥„Å≥’á”É‚º¨_·ú†‚ùπ‚ÜØü•Äüî• 2.20.164
Download :
https://www.mediafire.com/file/e411qdku6onc5zv/%E5%BB%B4%E3%81%B3%D5%87%D3%83%E2%BC%AC_%E1%9C%A0%E2%9D%B9%E2%86%AF%F0%9F%A5%80%F0%9F%94%A5+2.20.164.apk/file

KAWhatsApp Inumne
Download :
https://drive.google.com/file/d/1h1jeIP6R-hN-P0LtgWz8pAFFG0i_ntg4/view

XO WhatsApp Inmune
Download :
https://www.mediafire.com/file/24587ex7gn7rx4g/XQ_WhatsApp.apk/file

‚ú™‡Æì‡ØÄ‚Äå„É†‚ÄåÍô≥·∞Ø‚É™‚úµ‚É™‡∏™‡£ºùñìùñâùñä·∑ù‡£ºùñó·∑ßùñò·∑üùñîùñì‚Äå‚úµ·∞Ø‚É™Íô≥.whatsapp2017.apk
Download :
https://drive.google.com/file/d/1GXIH38yUJ1ilBHFpC9LwzhT3DrZtcVp6/view

‚áù‚Äå‡øá‡Æì‡ØÄ‚Äå„É†ÍßÅÍâ£Íã´Íè∏-ÍÅíÍã´ÍÅπ ‚≠êÔ∏è‚óè·¥ò·∑Æ·¥Ä‚Äå·¥Ñ‚Äå·¥ç‚Äå·¥Ä‚Äå…¥·∑†‚öñÔ∏è ‚óè‚ö†Ô∏èüö∏ÍßÇWhatspp antiban whatspp
Download :
https://drive.google.com/file/d/175TB6sUelm_0oYlW1T7N6TouT0pirohn/view

2.20.193 INFO MODS
Download :
https://www.mediafire.com/file/btt4jkipnjtffv2/AHMANET+INFOMODS.apk/file

‚úû ÷Ü‰πà‰∫á‰πà·ú∞‚∑Ä’á ·üú‚Ñô‚Ç≥‚±≤∆ù ‚úû
Download :
https://www.mediafire.com/file/a7ssr0fdp4m23dp/%25E2%259C%259E_%25D6%2586%25E4%25B9%2588%25E4%25BA%2587%25E4%25B9%2588%25E1%259C%25B0%25E2%25B7%2580%25D5%2587_%25E1%259F%259C%25E2%2584%2599%25E2%2582%25B3%25E2%25B1%25B2%25C6%259D_%25E2%259C%259E.apk/file

MFC WhatsApp Imune V6_2.20.135 + Databases
Download :
http://www.mediafire.com/file/83xtf82q8m9mwrg/MFC_WhatsApp_Imune_V6_2.20.135.apk/file

`},{quoted: info})

break

case 'netflix':
const netflix = require('./loli/mais/netflix.json')
if (netflix.length === 0) {
    loli.sendMessage(from, 'Desculpe, n√£o h√° mais contas dispon√≠veis no momento.');
  } else {
    const randomIndex1 = Math.floor(Math.random() * netflix.length);
    const conet = netflix[randomIndex1];
    netflix.splice(randomIndex1, 1);
    fs.writeFileSync('./loli/mais/netflix.json', JSON.stringify(netflix, null, 2));
    loli.sendMessage(from, { image: { url: 'https://telegra.ph/file/ea66a4b0e47f3bcccebfd.jpg' }, caption: `
    > Lembre-se: teste a conta para ver se tem acesso ou n√£o, algumas contas n√£o t√™m mais acesso v√°lido, mas voc√™ pode solicita propriet√°rio para uma base de uma nova conta, boa sorte.

    
    > Estoque: ${netflix.length} contas restantes
    
    > Login: ${conet.login}
    
    > Senha: ${conet.senha}
    
    *CREDITOS*: Mamede Carlos
    `, mentions: [sender] }, { quoted: info });
  }
break

case 'puxarcase':
try{
if (!isCreator) return loli.sendMessage(from, {text: 'somente dono'})
reply('- Calma ae amigo(a), j√° estou enviando o comando / case para voc√™..')
const getCase = (cases) => {
return 'case '+`'${cases}'`+fs.readFileSync("./index.js").toString().split('case \''+cases+'\'')[1].split("break")[0]+"break"
}
await sleep(500)
msgSemQuoted(`${getCase(q)}`)
} catch(e) {
console.log("[GETCASE] - ‚ùåÔ∏è Comando n√£o encontrado! ‚ùå")
reply('‚ùåÔ∏è Comando n√£o encontrado! ‚ùåÔ∏è')
}
break



case 'minerardima':
case 'minerardiamante':
const minerardima = `${Math.floor(Math.random() * 105)}`

loli.sendMessage(from, {image: fs.readFileSync('./loli/image/diamante.jpg'), caption: `

	*‚îè „ÄåÔ∏è ‚õèÔ∏è MINERIOS ‚õèÔ∏è* „Äç  
	*‚îÇ*
	*‚îÇ‚ñ¢ üíé DIAMANTE* ${minerardima}
  *‚îÇ*
	*‚îó „ÄåÔ∏è‚õèÔ∏è MINERIOS ‚õèÔ∏è*„Äç  
	`},{quoted: info})


break




case 'pig':
case 'urso':
case 'seta':
case 'papel':
case 'grafit4':
case 'blackpinkepo':
case 'areia':
case 'balckpingv2':
case 'brotoluz':
case 'borracha':
case 'brilhante':
case 'diabo': 
case 'crack':
case 'vietnam':
case 'goldt':
case 'biscoito':
if(!q) return reply("Ei, Cad√™ o Texto?")
reply("Estou Gerando, Aguarde um Pouquinho...")
loli.sendMessage(from,
 {image: {url: `https://tohsaka.onrender.com/api/ephoto/${command}?nome=${q}&apikey=tohsaka`}}, 
{quoted: info})
break

case 'autoban':
if (!isGroup) return reply(msg.grupo)
if (!isGroupAdmins && !SoDono) return reply('Precisa ser Dono')
if (args.length < 1) return reply('Hmmmm')
if (Number(args[0]) === 1) {
if(isAdeusCara) return reply("J√° est√° ativado.")
var ind = dbids.indexOf(from)
if(isAdeusCara) {
adeuscara[ind].actived = true
} else {
adeuscara.push({
groupId: from,
actived: true,
number: []
})
}
fs.writeFileSync('./arquivos/grupos/adeuscara.json', JSON.stringify(adeuscara, null, 2) + '\n')
reply(`Ativou com sucesso o recurso de autoban neste grupo‚úîÔ∏è`)
} else if (Number(args[0]) === 0) {
if(!isAdeusCara) return reply("J√° est√° Desativado.")  
var ind = dbids.indexOf(from)		
if(isAdeusCara) {
adeuscara[ind].actived = false
} else {
adeuscara.push({
groupId: from,
actived: false,
number: []
})
}
fs.writeFileSync('./arquivos/grupos/adeuscara.json', JSON.stringify(adeuscara, null, 2) + '\n')
reply(`Desativou com sucesso o recurso de autoban neste grupo‚úîÔ∏è`)
} else {
reply('1 para ativar, 0 para desativar')
}
break

case 'pix'://by Daniel
if (args.length < 1) return reply(`Modo certo de se usar ${prefix}pix @ | valor`)
      
                    if (!q.includes('/')) return reply(`Voc√™ precisa colocar o valor que deseja transferir.\n\nExemplo:\n\n*${prefix}Pix @pessoa / 3000*`)
                const tujuan = q.substring(0, q.indexOf('/') - 1)
                const jumblah = q.substring(q.lastIndexOf('/') + 1)
                if(isNaN(jumblah)) return await reply('O valor precisa est√° em n√∫meros...')
                if (jumblah < 50 ) return reply(`transfr√™ncia m√≠nima e de 50 Coins`)
                if (checkATMuser(sender) < jumblah) return reply(`Voc√™ n√£o tem Coins suficiente para fazer uma transfer√™ncia, voc√™ precisa ter no min√≠mo 1000 de Coins`)
                const tujuantf = `${tujuan.replace("@", '')}@s.whatsapp.net`
                fee = 0.00 *  jumblah //IMPOSTO CADA 1 DE DINHERO, ALMENTA E CAI NA SUA CONTA, TODA VEZ QU√ä ALGU√âM FAZER TRANSFERENCIA
                hasiltf = jumblah - fee
                addKoinUser(tujuantf, hasiltf)
                confirmATM(sender, jumblah)
                addKoinUser('558598603654@s.whatsapp.net', fee)
                
                pingaa = `*TRANSFER√äNCIA REALIZADA*

[üöπ]> ORIGEM: *${sender.split("@")[0]}*
[üóΩ]> DESTINARIO: *${tujuan}*
[üíµ]> VALOR DA TRANSFER√äNCIA: *${jumblah}*
[üóí]> BANCO: *BANK*
[‚ö†]> TARIFA: *0,00*
`;
              
                loli.sendMessage(from, {text: pingaa}, {quoted: info})
break    

case 'addautorm':
case 'addautoban':
case 'listanegra':  
if (!isGroupAdmins && !SoDono) return reply('Precisa ser Dono')
if (args.length < 1) return reply('Cade o n√∫mero?')
var ind = dbids.indexOf(from)
if(isAdeusCara) {
listng = q.replace(new RegExp("[()+-/ +/]", "gi"), "")  
var numind = adeuscara[ind].number.indexOf(listng)
if(numind >= 0) return reply('*Esse N√∫mero ja esta incluso*')
adeuscara[ind].number.push(listng)
} else {
listng = q.replace(new RegExp("[()+-/ +/]", "gi"), "")    
adeuscara.push({
groupId: from,
actived: false,
number: [listng]
})
}
fs.writeFileSync('./arquivos/grupos/adeuscara.json', JSON.stringify(adeuscara, null, 2) + '\n')
reply(`*N√∫mero adicionado a lista de autoban*`)
break

case 'botoff':
case 'boton':
case 'bot':
if (!isGroup) return reply(msg.grupo)
if (!isCreator) return reply("S√≥ dono pode executar esta a√ß√£o...")
if (args.length < 1) return reply('1 pra ligar / 0 pra desligar')
if (Number(args[0]) === 1) {
if (botoff.includes(from)) return reply('Ja esta ativo')
botoff.push(from)
fs.writeFileSync('./arquivos/grupos/botoff.json', JSON.stringify(botoff))
reply('Desativando fun√ß√µes e parando a execu√ß√£o de comandos por membros com sucesso...')
} else if (Number(args[0]) === 0) {
if (!botoff.includes(from)) return reply('Ja esta Desativado')
pesquisar = from
processo = botoff.indexOf(pesquisar)
while(processo >= 0){
botoff.splice(processo, 1)
processo = botoff.indexOf(pesquisar)
}
fs.writeFileSync('./arquivos/grupos/botoff.json', JSON.stringify(botoff))
reply(`Ativando todos os funcionamentos do bot novamente...`)
} else {
reply('1 para ativar, 0 para desativar')
}
break


case 'qrcode': case 'qr-qr-code': case 'qr-code':
if(!q) return reply(`Digite o a palavra que deseja transformar em qr code\nExemplo: ${prefix + command} ${botName}`)
reply(`enviando aguarde 15 segundos se nao ir a api caiu`)


loli.sendMessage(from, {image: {url: `https://api.qrserver.com/v1/create-qr-code/?size=500x500&data=${q}`}, gifPlayback: false, caption: 'AQUI ESTA SEU QR - CODE'
},{quoted: info})
break

case 'gerarpessoa':
gerarpessoa = await fetchJson(`http://nexus.vortexuscloud.com:4214/api/pessoa?apikey=keybx`)
monaco(`
\nü§†    ${pushname} AQUi EST√Å üëç\n\nüë• „Ö§- NOME: ${gerarpessoa.Nome} 
üõú „Ö§- CPF: ${gerarpessoa.CPF} 
üåê „Ö§- RG: ${gerarpessoa.RG} 
üëÅÔ∏è‚Äçüó®Ô∏è „Ö§- DATA DE NASCIMENTO: ${gerarpessoa["Data de Nascimento"]} 
üî• „Ö§- SEXO: ${gerarpessoa.Sexo} 
‚ôà „Ö§- SIGNO: ${gerarpessoa.Signo} 
‚ûñ   - FILIA√á√ÉO: ${gerarpessoa.Filia√ß√£o} 
üëæ „Ö§- M√ÉE: ${gerarpessoa.M√£e} 
üêÇ „Ö§- PAI: ${gerarpessoa.Pai} 
üîÜ „Ö§- ONLINE: ${gerarpessoa.Online} 
üî∞ „Ö§- E-MAIL: ${gerarpessoa["E-Mail"]} 
‚öúÔ∏è „Ö§- SENHA: ${gerarpessoa.Senha} 
‚û∞ „Ö§- CEP: ${gerarpessoa.Endere√ßo.CEP} 
‚ûø „Ö§- ENDERE√áO: ${gerarpessoa.Endere√ßo.Endere√ßo} 
üî¢ „Ö§- N√öMERO: ${gerarpessoa.Endere√ßo.N√∫mero} 
üÜñ „Ö§- BAIRRO: ${gerarpessoa.Endere√ßo.Bairro} 
„Ä∞Ô∏è „Ö§- CIDADE: ${gerarpessoa.Endere√ßo.Cidade} 
‚ôæÔ∏è „Ö§- ESTADO: ${gerarpessoa.Endere√ßo.Estado} 
üìû „Ö§- TELEFONES: ${gerarpessoa.Telefones} 
üóø „Ö§- ALTURA: ${gerarpessoa["Caracter√≠sticas F√≠sicas"].Altura} 
üò± „Ö§- PESO: ${gerarpessoa["Caracter√≠sticas F√≠sicas"].Peso} 
‚≠ï „Ö§- TIPO SANGU√çNEO: ${gerarpessoa["Caracter√≠sticas F√≠sicas"]["Tipo Sangu√≠neo"]} 
üü• „Ö§- COR FAVORITA: ${gerarpessoa["Cor Favorita"]} \n
`)
break;

case 'calendario':
case 'dados':
var getGroups = await loli.groupFetchAllParticipating()
var groups = Object.entries(getGroups).slice(0).map(entry => entry[1])
var ingfoo = groups.map(v => v)
ingfoo.sort((a, b) => (a[0] < b.length))
hora16 = moment.tz('America/Sao_Paulo').format('HH:mm')
date16 = moment.tz('America/Sao_Paulo').format('DD/MM')
reply(`
*${tempo.toUpperCase()}*
üë§ ${pushname}

üë• *GRUPO:* ${isGroup ? groupName : "privado"}
üìÜ *DATA:* ${date16}
‚è∞ *HORA:* ${hora16}H
ü§ñ *BOT:* ${botName}
üëë *DONO:* ${donoName}


`)
break

case 'data': case 'Data':
reply(`Hoje e ${data} mn`)
break

case 'Hora': case 'hora':
reply(`agora s√£o ${hora} mn`)
break



case 'gerarsenha':
const netflixx = ['A', 'B', 'CC', 'C', 'D', 'AD' , 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'a1', 'b2', 'c3', 'd4', 'e5', 'f6', 'g7', 'h8', 'i9', 'j10', 'k11', 'l12', 'm13', 'n14', 'o15', 'p16', 'q17', 'r18', 's19', 't20', 'u21', 'v22', 'w23', 'x24', 'y25', 'z26', 'pB24', 'XC9P', 'T#;S', ';1H)', '0e7O', 'mGmE', 'v4g7k2q8', 'c1r9h3x6', 'n8u7z4m2', 'i8j9p4o2', 'k2r9q6d1', 'z4y5s2u7', 't3v1o2f4','n8x6w3c6', 'o2y1i8s5', 'g7q6z2m9', 'h3t4r9j8', 'f4s2u7o2', 'w3x6i8p4', 'y1z4n9l6', 'c6o2q8r9' , 'x7q2', 'f4s9', 'm2o8', 'y1t6', 'z4u7', 'j8i2', 'p4w3', 'c6n9','h3r1', 'k2l6', 's5g7', 'o2v9', 'q8x6', 'u7d1', 'w5f4', 'i8z2', 'r9y0', 't3m7','n1j9', '6a2s', 'dxb', 'ncw', 'DX', 'hp' ,'.E','3z','.m','xO','Xm','I3','Yd' ,'Nmm','3A@','z0y','MLs','E8o','0#r','Qo6','wY^' ,'4<','rD','MG',':d','6$','O4','H.','dc','9y','<A','q#','<Q' , ']','@','}','&','-', 'nc7','2NE','4nc','b55','u5l','bps' ]
gosto = body.slice(3)
const nettflx = netflixx[Math.floor(Math.random() * (netflixx.length))]
loli.sendMessage(from, {video: {url: `https://telegra.ph/file/42e6cbb931ba9e8307bad.mp4`}, gifPlayback: true, caption:`




CRIADOR DE SENHAS;


CODIGO GERADO:   ${nettflx}

`},{quoted: info})
break

case 'cartao':
case 'cart√£o':
if (!q) return reply(`‚ï≠‚îÅ‚îÅ‚îÅ‚ùÄ${botName}‚ùÄ‚îÅ‚îÅ‚îÅ‚ïÆ\n‚îÇ‚ï≠‚îÅ‚îÅ‚îÅ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÅ‚îÅ‚îÅ‚ïÆ\n‚îÇ‚ïé\n‚îÇ‚îÇ‚ùØ              „Äò ùêìùêîùêìùêéùêëùêàùêÄùêã  „Äô\n‚îÇ‚ïé\n‚îÇ‚ïéOl√°, LICHT SAN\n‚îÇ‚ïéAqui Irei Lhe Ensinar\n‚îÇ‚ïéA Gerar Cart√µes\n‚îÇ‚ïéVoc√™ Deve Possuir um Bin\n‚îÇ‚ïéBin Deve Conter 7 N√∫meros \n‚îÇ‚ïé\n‚îÇ‚ïé/Cartao 1234567\n‚îÇ‚ïé\n‚îÇ‚ï∞‚îÅ‚îÅ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÅ‚îÅ‚ïØ\n‚ï∞‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïØ`)
loli.sendMessage(from, { react: { text: `üë®‚Äçüíª`, key: info.key }})
reply(`üë®‚Äçüíª Puxando Dados, Aguarde ${pushname}`)
try {
tohsakapuxadas = await fetchJson(`https://nyox.wtf/api/gerar-cc?query=${q}&apitoken=LICHTZIN`)
loli.sendMessage(from, {image: {url: `https://telegra.ph/file/433a224bc555edc4d55f1.jpg`}, caption: `${tohsakapuxadas.resultado}`}, {quoted: info})
} catch (error) {//By: Licht San
console.log(error)
}
break


case 'hack': reply(JSON.stringify(info.message.extendedTextMessage.contextInfo, null, 50));
break;



case 'gtasan':
loli.sendMessage(from, {image: fs.readFileSync('./loli/image/menu.jpg'), caption: `

„Åç‚Éü‚ùóÔ∏èMEDIAFIRE DOWNLOAD‚ùó‚Éü „Åç

‚û±üìÅ Nome : GTA SAN
‚û±üìä Tamanho : 2 GB
‚ûØüßß Link : https://www.mediafire.com/file/ln6r3kx0ie77r9t/GTA_San_Andreas_2021.zip/file

_*Aguarde o processo de upload de m√≠dia......*_

`},{quoted: info})

break

case '66':
if(!q) return reply(`nome da musica`)
data = await fetchJson(`http://sabapi.tech:8090/api/ytsrc/videos?q=${text}&apikey=MrRootsFree`)
ytbrt = `‚îÅ„Äå PLAY AUDIO „Äç
‚∏∫ÕüÕûÍ™∂${pushname}      ‚ô™  
  
‚û§Õ°Õú€ú€ú€£üèÅ ùöÉùöíÃÅùöùùöûùöïùöò: ${data.resultado[0].title}
‚û§Õ°Õú€ú€ú€£üèÅ Tempo‚ßΩ${data.resultado[0].timestamp}
‚û§Õ°Õú€ú€ú€£üèÅ Descri√ß√£o‚ßΩ ${data.resultado[0].description}

`
loli.sendMessage(from, { image: { url: `${data.resultado[0].image}` }, caption: ytbrt }, { quoted: info })
loli.sendMessage(from, { audio: { url: `http://sabapi.tech:8090/api/dl/ytaudio?url=${data.resultado[0].url}&apikey=MrRootsFree` }, mimetype: "audio/mpeg",
headerType: 4,
contextInfo: {
externalAdReply: {
title: `${botName}`,
body: `${data.resultado[0].title}`,
showAdAttribution: true,
thumbnail: await getBuffer(`${data.resultado[0].image}`),
mediaType: 2,
mediaUrl: `https://www.instagram.com/sandsx_krl?igsh=c2x4bGJtbTFqN2t5`,
sourceUrl: `http://Instagram.com/sandsx_krl`}}},{quoted: info}).catch(e => {
return reply(`erro`)
})
break

case 'espada':   case 'comprarespada':{
const dinheiro = checkATMuser(sender)
const checkxpr = checkATMuser(sender, dinheiro) 
const quantidader = `7000`
if (checkxpr < quantidader) return reply(`*${pushname} VC NAO TEM DINHEIRO SUFICIENTE PARA COMPRAR UMA ESPADA*\n\n*PRE√áO: ${quantidader}*`)
var [comprar] = q.split("")
if(!q.includes("")) return reply(`Cade a espa√ßo mano?\nExemplo: ${prefix + command} comprar`)  
espada.push(`${sender}`)
fs.writeFileSync('./funcoes_rpg/espada/espada.json', JSON.stringify(espada))
addKoinUser(sender, - quantidader)
reply(`*ESPADA COMPRADA COM SUCESSO*\n\n*CUSTO üí∞: ${quantidader}*`)
}
break



case 'peshub':
if(!isPremium) return reply(msg.premium)
if (!q) return reply("Escreva o que quer pesquisar!")
reply (`Realizando Pesquisa Aguarde...`)
pornL = await fetchJson(`https://tohsaka.onrender.com/api/pesquisa/pornhubsrc?nome=${q}&apikey=tohsaka`)
srcL = `              „Äé  P O R N  H U B  „Äè\n\n        `
for (let L of pornL) {
srcL += `
Titulo: ${L.titulo}\n
Link: ${L.link}
Autor: ${L.autor}
Hype: ${L.hype}
Enviado: ${L.data_upload}\n\n‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚ä∞·ØΩ‚ä±‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚ä∞·ØΩ‚ä±‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ\n\n`}
loli.sendMessage(sender, {text: srcL, },{quoted: info})
break

case 'gerargp':
if(!q) return reply("Ei, Qual o Tipo de Grupo?")
reply("Aguarde, Estou Gerando os Grupos")
 if(!isPremium) return reply(enviar.msg.premium)   
    swp = await fetchJson(`https://tohsaka.onrender.com/api/pesquisa/gpwhatsapp?nome=${q}&apikey=tohsaka`)
    teks = `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ùí„ÄéùêÄ ùêê ùêî ùêÄ  ùêÅ ùêé ùêì  ùêè ùêÑ ùêí ùêê ùêî ùêà ùêí ùêÄ„Äè‚ùí\n\n`;
    for(let i of swp) {
        teks += " *‚ùØ NOME:* " + i.nome+ "\n"
        teks += " *‚ùØ DESCRI√á√ÉO:* " + i.descri√ß√£o+ "\n"
        teks += " *‚ùØ LINK:* " + i.link+ "\n\n"
    }
    teks += `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê`
    img = `${swp[0].img}`
    loli.sendImage(from, img, teks, info)
   reply(teks)
    break
    
case 'inativo':  
if(!isGroup) return reply(Res_SoGrupo)
if(!isGroupAdmins) return reply(Res_SoAdm)
if(q.match(/[a-z]/i) || !q) return reply(`Exemplo: ${prefix+command} 0\nIsso mostrar√° quantas pessoas tem 0 mensagens no grupo, e se usar 5, vai mostrar quantos usu√°rios tem 5 mensagens ou menos..`)
await LIMPARDOCNT_QUEMJASAIU()
var i2 = countMessage?.map(x => x.groupId)?.indexOf(from)
blue = []; for (i of countMessage[i2].numbers) {
if(i.messages <= q.trim())
if(i.figus <= q.trim())
if(i.cmd_messages <= q.trim())
if(!groupAdmins.includes(i.id))
if(!numerodono.includes(i.id))
if(i.id != numeroBot)
if(groupMembers.map(i => i.id).includes(i.id))
blue.push(i.id)}; for ( i of countMessage[i2].numbers) {
if(!groupMembers.map(a => a.id == i.id))
if(i.id.length > 5)
blue.push(i.id)}
if(blue.length == 0) return reply(`N√£o tem pessoas com ${q}  mensagens..`)
bli = `Usu√°rios com ${q.trim()} mensagem(ns) pra baixo..\n\n`
for (ac = 0; ac < blue.length; ac++) {
bli += `${ac +1} - _ Usu√°rio: @${blue[ac].split("@")[0]}\n\n`
}
mention(bli)
break

case 'anotar':
case 'tirar_nota':
case 'rmnota':
if(!isGroup) return reply(msg.grupo)
if(!isGroupAdmins) return reply(msg.adm)
reagir(from, "üóíÔ∏è")
await sleep(1000)
if(command == "anotar") {
var [q5, q10] = q.trim().split("/")
if(!q5 || !q10 || !q.includes("/")) return reply(`*_‚ùïDigite o t√≠tulo da anota√ß√£o e o texto que deseja anotar..._*\n*_ü•∂ Exemplo:_* ${prefix}anotar Gatos/Gatinhos s√£o fofos...`)
if(JSON.stringify(anotar).includes(from)) {  
var i2 = anotar.map(i => i.grupo).indexOf(from)  
if(JSON.stringify(anotar[i2].puxar).includes(q5)) {
var i3 = anotar[i2].puxar.map(i => i.nota).indexOf(q5)  
if(anotar[i2].puxar[i3].nota == q5) return reply(`*_‚ùïEsta anota√ß√£o j√° est√° inclusa, utilize outro t√≠tulo..._*\n*_ü•∂ Ou voc√™ pode tirar com_* ${prefix}tirar_nota ${q5}`)
}
}
if(!JSON.stringify(anotar).includes(from)) {
anotar.push({grupo: from, puxar: [{nota: q5, anotacao: q10}]})
fs.writeFileSync("./database/func/tabela/anotar.json", JSON.stringify(anotar))
reply("Anota√ß√£o registrada com sucesso...")
} else {
anotar[i2].puxar.push({nota: q5, anotacao: q10})
fs.writeFileSync("./database/func/tabela/anotar.json", JSON.stringify(anotar))
reply("Anota√ß√£o registrada com sucesso...")  
}
} else {
if(!q) return reply("Digite qual anota√ß√£o deseja tirar pelo t√≠tulo..")
if(JSON.stringify(anotar).includes(from)) {  
var i2 = anotar.map(i => i.grupo).indexOf(from)  
if(JSON.stringify(anotar[i2].puxar).includes(q)) {
var i3 = anotar[i2].puxar.map(i => i.nota).indexOf(q)  
}
}
if(0 > anotar[i2].puxar.map(i => i.nota).indexOf(q)) return reply("Esta nota n√£o est√° inclusa, verifique com aten√ß√£o...")
anotar[i2].puxar.splice(i3, 1)
fs.writeFileSync("./database/func/tabela/anotar.json", JSON.stringify(anotar))
reply(`Anota√ß√£o ${q} tirada com sucesso...`)
}
break

case 'anotacao':
case 'anotacoes':  
case 'nota':
case 'notas':
if(!isGroup) return reply(msg.grupo)
reagir(from, "üìù")
await sleep(1000)
if(command == "anotacao" || command == "nota") {
if(!q) return reply("Digite o t√≠tulo da anota√ß√£o que deseja puxar..")
if(!JSON.stringify(anotar).includes(from)) return reply("Este grupo n√£o tem nenhuma anota√ß√£o...")
var i2 = anotar.map(i => i.grupo).indexOf(from)  
if(!JSON.stringify(anotar[i2].puxar).includes(q)) return reply("N√£o cont√©m nenhuma anota√ß√£o com este t√≠tulo.")
var i3 = anotar[i2].puxar.map(i => i.nota).indexOf(q)  
mentions(`„Äà ${anotar[i2].puxar[i3].anotacao} „Äâ`)
} else {
var i2 = anotar.map(i => i.grupo).indexOf(from)    
if(anotar[i2].puxar.length == 0) return reply("Este grupo n√£o tem nenhuma anota√ß√£o...")    
var i2 = anotar.map(i => i.grupo).indexOf(from) 
var antr = anotar[i2].puxar 
txtin = `*_üóíÔ∏è Aqui est√° todas as anota√ß√µes registradas nesse grupo üóíÔ∏è_*\n`
for ( i = 0; i < antr.length; i++) {
txtin += `\n‚Üù *_üìù Anota√ß√£o:_* ‚üÆ ${anotar[i2].puxar[i].nota} ‚üØ - „Äà ${anotar[i2].puxar[i].anotacao} „Äâ\n`
}
txtin += ""
mentions(txtin)
}
break

case 'deletar': case 'delete': case 'del':  case 'd': case 'apagar':
if(!isGroupAdmins) return reply(msg.adm)
if(!menc_prt) return reply("‚ùïMarque a mensagem do usu√°rio que deseja apagar...")
loli.sendMessage(from, { delete: { remoteJid: from, fromMe: false, id: info.message.extendedTextMessage.contextInfo.stanzaId, participant: menc_prt}})
await sleep(1000)
reagir(from, "üßØ")
break 

case 'mute': case 'm': case 'mutar':
if(!isGroup) return reply(msg.grupo)
if(!isGroupAdmins) return reply(msg.adm)
if(!isBotGroupAdmins) return reply(msg.botadm)
textin = args.join(" ")
if(!textin) return reply('*‚ùïMarque o n√∫mero que deseja mutar.*')
reagir(from, "ü§ê")
await sleep(1000)
mentioned = info.message.extendedTextMessage.contextInfo.mentionedJid
if(isMuted) {
var ind = GroupsMutedActived.indexOf(from)
for (let _ of mentioned) {
teks = `*_üîá Usu√°rio mutado:_* @${_.split('@')[0]}
*_üë§ A√ß√£o do adm:_* [ ${pushname} ]`
muted[ind].numbers.push(_)
}
fs.writeFileSync('./database/usuarios/muted.json', JSON.stringify(muted, null, 2))
teks += '\n-\n*ü§´ Caso voc√™ dar um piu, voc√™ vai ser banido do grupo.*'
mentions(teks, mentioned, true)
} else {
 const data = {
jid: from,
numbers: mentioned
}
muted.push(data)
fs.writeFileSync('./database/usuarios/muted.json', JSON.stringify(muted, null, 2) + '\n')
for (let _ of mentioned) {
teks = `*_üîá Usu√°rio mutado:_* @${_.split('@')[0]}
*_üë§ A√ß√£o do adm:_* [ ${pushname} ]`
}
teks += '\n-\n*ü§´ Caso voc√™ dar um piu, voc√™ vai ser banido do grupo.*'
mentions(teks, mentioned, true)
}
break

case 'desmute': case 'unmute': case 'desmutar':
if(!isGroup) return reply(msg.grupo)
if(!isGroupAdmins) return reply(msg.adm)
if(!isBotGroupAdmins) return reply(msg.botadm)
textin = args.join(" ")
if(!textin) return reply('*‚ùïMarque o n√∫mero que deseja desmutar.*')
reagir(from, "ü§™")
await sleep(1000)
mentioned = info.message.extendedTextMessage.contextInfo.mentionedJid
var ind = GroupsMutedActived.indexOf(from)
if(isMuted) {
for(let _ of mentioned) {
if(muted[ind].numbers.indexOf(_) >= 0) {
var rmind = muted[ind].numbers.indexOf(_)
muted[ind].numbers.splice(rmind, 1)
}
}
fs.writeFileSync('./database/usuarios/muted.json', JSON.stringify(muted, null, 2) + '\n')
for (let _ of mentioned) {
teks = `*_üîä Usu√°rio desmutado:_* @${_.split('@')[0]}
*_üë§ A√ß√£o do adm:_* [ ${pushname} ]`
}
teks += '\n-\n*ü§™ agora voc√™ pode falar a vontade no grupo!*'
mentions(teks, mentioned, true)
} else {
const data = {
jid: from,
numbers: []
}
muted.push(data)
fs.writeFileSync('./database/usuarios/muted.json', JSON.stringify(muted, null, 2) + '\n')
for (let _ of mentioned) {
teks = `*_üîä Usu√°rio desmutado:_* @${_.split('@')[0]}
*_üë§ A√ß√£o do adm:_* [ ${pushname} ]`
}
teks += '\n-\n*ü§™ Agora voc√™ pode falar a vontade no grupo!*'
mentions(teks, mentioned, true)
}
break

case 'rankzueiros': case 'rankzueiro':
if (!isGroup) return reply(msg.grupo);
if (!isModobn) return reply(`Este tipo de comando s√≥ pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se voc√™ for, apenas digite ${prefix}modobrincadeira 1`)  

  reagir(from, "ü§™");

  membrosZueiros = [];
  
  const zueiro1 = groupMembers;
  const zueiro2 = groupMembers;
  const zueiro3 = groupMembers;
  const zueiro4 = groupMembers;
  const zueiro5 = groupMembers;

  const zueiroMem1 = zueiro1[Math.floor(Math.random() * zueiro1.length)];
  const zueiroMem2 = zueiro2[Math.floor(Math.random() * zueiro2.length)];
  const zueiroMem3 = zueiro3[Math.floor(Math.random() * zueiro3.length)];
  const zueiroMem4 = zueiro4[Math.floor(Math.random() * zueiro4.length)];
  const zueiroMem5 = zueiro5[Math.floor(Math.random() * zueiro5.length)];

  const TMPZUEIRO = [
    "O rei da zoeira! üëë",
    "Mestre na arte do deboche. üòé",
    "Provocador nato. ü§£",
    "Conquistador de risadas. üéâ",
    "Doutor em piadas sem gra√ßa. üéì",
    "Especialista em memes. üöÄ",
    "Destruidor de momentos s√©rios. üí£",
    "Arquiteto da palha√ßada. üè∞",
    "O zueiro mais querido do grupo. ‚ù§Ô∏è",
    "Sorriso contagiante, zueira constante. üòÑ",
    "O palha√ßo oficial. ü§°",
    "Mestre do sarcasmo. üòè",
    "Sabe tudo de trollagem. üòú",
    "Alegria em forma de zueira. üéà",
    "Faz piada at√© com sombra. üåö",
    "Riso garantido com esse zueiro. üòÇ",
    "O mestre das pegadinhas. ü§™",
    "Transforma qualquer situa√ß√£o em com√©dia. üé≠",
    "Pai da zoeira, filho do riso. ü§£",
    "Zueiro 24 horas por dia. ‚è∞",
  ];

  rankZueiroImg = "https://telegra.ph/file/8de9823d4d2af40b530df.jpg";
  rankZueiro = `*_Os Zueiros do Grupo est√£o prontos para zoar:_*
*‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ*
*‚îÇ* ü§™ @${zueiroMem1.id.split('@')[0]}
*‚îÇ‚û• ${TMPZUEIRO[Math.floor(Math.random() * TMPZUEIRO.length)]}*
*‚îÇ* ü§™ @${zueiroMem2.id.split('@')[0]}
*‚îÇ‚û• ${TMPZUEIRO[Math.floor(Math.random() * TMPZUEIRO.length)]}*
*‚îÇ* ü§™ @${zueiroMem3.id.split('@')[0]}
*‚îÇ‚û• ${TMPZUEIRO[Math.floor(Math.random() * TMPZUEIRO.length)]}*
*‚îÇ* ü§™ @${zueiroMem4.id.split('@')[0]}
*‚îÇ‚û• ${TMPZUEIRO[Math.floor(Math.random() * TMPZUEIRO.length)]}*
*‚îÇ* ü§™ @${zueiroMem5.id.split('@')[0]}
*‚îÇ‚û• ${TMPZUEIRO[Math.floor(Math.random() * TMPZUEIRO.length)]}*
*‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ*`;

  membrosZueiros.push(zueiroMem1.id);
  membrosZueiros.push(zueiroMem2.id);
  membrosZueiros.push(zueiroMem3.id);
  membrosZueiros.push(zueiroMem4.id);
  membrosZueiros.push(zueiroMem5.id);

  mencionarIMG(rankZueiro, rankZueiroImg);
  break;

  case 'chato':
  if (!isGroup) return reply(msg.grupo);
  reagir(from, "üòí");
  setTimeout(async () => {
    const niveisDeChatice = [
      "um pouco chatinho...",
      "na m√©dia da chatice.",
      "chato, mas d√° para aguentar.",
      "muito chato, cuidado!",
      "ultra chato, ningu√©m merece!",
    ];
    const mensagemChata = niveisDeChatice[Math.floor(Math.random() * niveisDeChatice.length)];
    textchato = `üôÑ @${sender_ou_n.split("@")[0]} √© ${mensagemChata}`
    mention(textchato)
  }, 2000);
  break;

  // MENU JOGOS // 

case 'jogo1':
reagir(from, "üéÆ")
await sleep(1000)
reply(`*_ü•∂ Ol√° , aqui est√° o seu pedido, espero que voc√™ goste!_*
-
üé≥ *Minecraft:* https://www.mediafire.com/file/4k6ajlxiht8kp4n/Minecraft_1.21.0_OFFICIAL.apk/file`)
break
case 'jogo2':
reagir(from, "üéÆ")
await sleep(1000)
reply(`*_ü•∂ Ol√° , aqui est√° o seu pedido, espero que voc√™ goste!_*
-
üé≥ *DragonBall Z - Dokkan:* https://www.mediafire.com/file/015ibjiljfkv7uo/Dokkan_v4_12_1_MOD.apk/file`)
break
case 'jogo3':
reagir(from, "üéÆ")
await sleep(1000)
reply(`*_ü•∂ Ol√° , aqui est√° o seu pedido, espero que voc√™ goste!_*
-
üé≥ *GTA SanAndreas:* https://www.mediafire.com/file/ln6r3kx0ie77r9t/GTA_San_Andreas_2021.zip/file`)
break
case 'jogo4':
reagir(from, "üéÆ")
await sleep(1000)
reply(`*_ü•∂ Ol√° , aqui est√° o seu pedido, espero que voc√™ goste!_*
-
üé≥ *GTA SA - Legendado em Portugu√™s:* http://www.mediafire.com/file/7op13aup1ll7m9y/GTA_SA_COM_TRADU%25C3%2587%25C3%2583O_PT-BR.zip/file`)
break
case 'jogo5':
reagir(from, "üéÆ")
await sleep(1000)
reply(`*_ü•∂ Ol√° , aqui est√° o seu pedido, espero que voc√™ goste!_*
-
üé≥ *GTA SA com Mod Cleo:* http://www.mediafire.com/file/d8cfwzctx95x0dx/GTA_SA_v2.00_Mod_Cleo.zip/file`)
break
case 'jogo6':
reagir(from, "üéÆ")
await sleep(1000)
reply(`*_ü•∂ Ol√° , aqui est√° o seu pedido, espero que voc√™ goste!_*
-
üé≥ *GTA SA Online:* https://www.mediafire.com/file/0xccd5m0zwqstag/GTA_SA_ONLINE_SAMP_ByHT.zip/file`)
break
case 'gpsamp':
reagir(from, "üéÆ")
await sleep(1000)
reply(`*_ü•∂ Ol√° , aqui est√° o seu o grupo, espero que voc√™ goste!
-
üî• *Grupo Ofc:* https://chat.whatsapp.com/JDEH0eU70z2LLU4FywshzY`)
break
case 'jogo7':
reagir(from, "üéÆ")
await sleep(1000)
reply(`*_ü•∂ Ol√° , aqui est√° o seu pedido, espero que voc√™ goste!_*
-
üé≥ *GTA SuperLite + Mod Cleo:* http://www.mediafire.com/file/wdkg8pmndtihil3/GTA_SA_super_lite_mod_cleo_ByHT.zip/file`)
break
case 'jogo8':
reagir(from, "üéÆ")
await sleep(1000)
reply(`*_ü•∂ Ol√° , aqui est√° o seu pedido, espero que voc√™ goste!_*
-
üé≥ *LastDay on Eart Survival:* https://www.mediafire.com/file/k4pr6awvr5eb1ak/Last%20Day%20on%20Earth%201.17.7-mod.apk/file `)
break
case 'jogo9':
reagir(from, "üéÆ")
await sleep(1000)
reply(`*_ü•∂ Ol√° , aqui est√° o seu pedido, espero que voc√™ goste!_*
-
üé≥ *Bomber Friends MOD:* https://www.mediafire.com/file/dir8pwrb1mpm57w/Bomber_Friends_v4.10_MOD.apk/file`)
break
case 'jogo10':
reagir(from, "üéÆ")
await sleep(1000)
reply(`*_ü•∂ Ol√° , aqui est√° o seu pedido, espero que voc√™ goste!_*
-
üé≥ *Arcade Hunter:* https://www.mediafire.com/file/ugcdaclnpodtxxs/Arcade_Hunter-Sword%252CGun%252C_and_Magic_1.11.0-mod.apk/file`)
break
case 'jogo11':
reagir(from, "üéÆ")
await sleep(1000)
reply(`*_ü•∂ Ol√° , aqui est√° o seu pedido, espero que voc√™ goste!_*
-
üé≥ *Defesa de Zombie Ocioso:* https://www.mediafire.com/file/8422sjofw1cdnka/Zombie+Idle+Defense+1.5.79.229MOD-t.apk/file`)
break
case 'jogo12':
reagir(from, "üéÆ")
await sleep(1000)
reply(`*_ü•∂ Ol√° , aqui est√° o seu pedido, espero que voc√™ goste!_*
-
üé≥ *Pac-Man:* https://www.mediafire.com/file/gxwy01ni99pcur2/PAC-MAN+9.2.7.10150MOD-t.apk/file`)
break
case 'jogo13':
reagir(from, "üéÆ")
await sleep(1000)
reply(`*_ü•∂ Ol√° , aqui est√° o seu pedido, espero que voc√™ goste!_*
-
üé≥ *Car Driving School Simulator - APK:* https://www.mediafire.com/file/r6aps8mn6wqoabj/Car+Driving+School+Simulator+3.1.0.283MOD-t.apk/file
üé≥ _Obrigat√≥rio instalar o OBB:_
¬†https://www.mediafire.com/file/hcsb5tpr7byh8fg/com.boombitgames.DrivingSchoolParking.zip/file`)
break
case 'jogo14':
reagir(from, "üéÆ")
await sleep(1000)
reply(`*_ü•∂ Ol√° , aqui est√° o seu pedido, espero que voc√™ goste!_*
-
üé≥ *Cyber Fighters Premium:* https://www.mediafire.com/file/4tmv2cdahvqamlx/Cyber+Fighters+Premium+1.11.35.68MOD-t.apk/file`)
break
case 'jogo15':
reagir(from, "üéÆ")
await sleep(1000)
reply(`*_ü•∂ Ol√° , aqui est√° o seu pedido, espero que voc√™ goste!_*
-
üé≥ *Rag Racing:* https://www.mediafire.com/file/g88v399ks1fpnfq/drag-racing-mod_2.0.37.rar/file`)
break
case 'jogo16':
reagir(from, "üéÆ")
await sleep(1000)
reply(`*_ü•∂ Ol√° , aqui est√° o seu pedido, espero que voc√™ goste!_*
-
üé≥ *Mr. Brow:* https://www.mediafire.com/file/i0ii099sejk9fnk/Mr+Bow+4.15.75MOD-t.apk/file`)
break
case 'jogo17':
reagir(from, "üéÆ")
await sleep(1000)
reply(`*_ü•∂ Ol√° , aqui est√° o seu pedido, espero que voc√™ goste!_*
-
üé≥ *Airport City:* https://www.mediafire.com/file/vuupmpp3r03lso0/Airport+City+8.7.18.101418MOD-t.apk/file`)
break
case 'jogo18':
reagir(from, "üéÆ")
await sleep(1000)
reply(`*_ü•∂ Ol√° , aqui est√° o seu pedido, espero que voc√™ goste!_*
-
üé≥ *Crash Bandicoot:* https://www.mediafire.com/file/nyx8rjqn5m51o3r/Crash+Bandicoot+Mobile+v0.7.6242+Mod.apk/file `)
break
case 'jogo19':
reagir(from, "üéÆ")
await sleep(1000)
reply(`*_ü•∂ Ol√° , aqui est√° o seu pedido, espero que voc√™ goste!_*
-
üé≥ *Real Steel World Robot Boxing (APK+OBB):* https://www.mediafire.com/file/zcnsxb55mldn51e/Real+Steel+World+Robot+Boxing+v54.54.126+Mod.apk/file`)
break
case 'jogo20':
reagir(from, "üéÆ")
await sleep(1000)
reply(`*_ü•∂ Ol√° , aqui est√° o seu pedido, espero que voc√™ goste!_*
-
üé≥ *Anger of Sticker:* https://www.mediafire.com/file/zfmqmszkhbgoem2/anger-of-stick-5-mod_1.1.39.apk/file`)
break
case 'jogo21':
reagir(from, "üéÆ")
await sleep(1000)
reply(`*_ü•∂ Ol√° , aqui est√° o seu pedido, espero que voc√™ goste!_*
-
üé≥ *Angry Birds 2 (APK+OBB)*
https://www.mediafire.com/file/uwnurszwrdbv5ge/angrybirds2-2481.apk/file`)
break
case 'jogo22':
reagir(from, "üéÆ")
await sleep(1000)
reply(`*_ü•∂ Ol√° , aqui est√° o seu pedido, espero que voc√™ goste!_*
-
üé≥ *Especial Force Group 2 (CS):* https://www.mediafire.com/file/uwf5cq9u8tjg44x/specialforcesgroup2-421.apk/file`)
break
case 'jogo23':
reagir(from, "üéÆ")
await sleep(1000)
reply(`*_ü•∂ Ol√° , aqui est√° o seu pedido, espero que voc√™ goste!_*
-
üé≥ *Roblox:* https://apkadmin.com/k05ck2q6ioo1/ROBLOX_v2.459.415955_MOD_MENU.apk.html`)
break
case 'jogo24':
reagir(from, "üéÆ")
await sleep(1000)
reply(`*_ü•∂ Ol√° , aqui est√° o seu pedido, espero que voc√™ goste!_*
-
üé≥ *Critical Striker:* https://www.mediafire.com/file/7yqmk1gn4wrieri/CRITICAL_STRIKE.zip/file`)
break
case 'jogo25':
reagir(from, "üéÆ")
await sleep(1000)
reply(`*_ü•∂ Ol√° , aqui est√° o seu pedido, espero que voc√™ goste!_*
-
üé≥ *Dream League Soccer:* http://www.mediafire.com/file/yuw9n5d4phzz5wg/Dream_League_Soccer_2019_v6.13-mod.apk/file`)
break
case 'jogo26':
reagir(from, "üéÆ")
await sleep(1000)
reply(`*_ü•∂ Ol√° , aqui est√° o seu pedido, espero que voc√™ goste!_*
-
üé≥ *Clash of Clans:* http://www.mediafire.com/file/aoaem76tyg0hvfv/Clash_Of_Clans_v13.675.6_MOD.apk/file`)
break
case 'jogo27':
reagir(from, "üéÆ")
await sleep(1000)
reply(`*_ü•∂ Ol√° , aqui est√° o seu pedido, espero que voc√™ goste!_*
-
üé≥ *Criminal Case Paris:* http://www.mediafire.com/fil...e/i5pbv8d7yjbbtly/Criminal%20Case%20Paris%20v2.36.1-mod.apk/file`)
break 

case 'jogo28':
reagir(from, "üéÆ")
await sleep(1000)
reply(`*_ü•∂ Ol√° , aqui est√° o seu pedido, espero que voc√™ goste!_*
-
üé≥ *Drift Max World:* https://www.mediafire.com/file/hqui6asekutsocq/DRIFT+MAX+WORLD+DINHEIRO+INFINITO.zip/file`)
break

case 'jogo29':
reagir(from, "üéÆ")
await sleep(1000)
reply(`*_ü•∂ Ol√° , aqui est√° o seu pedido, espero que voc√™ goste!_*
-
üé≥ *Downhill Masters:* https://www.mediafire.com/file/9cdgreyc8amkto9/Downhill_Masters_v1.0.59_MOD.apk/file`)
break
case 'jogosamp':
reagir(from, "üéÆ")
await sleep(1000)
reply(`*_ü•∂ Ol√° , aqui est√° o seu pedido, espero que voc√™ goste!_*
-
‚òï IP DO SERVIDOR DO MEU CRIADOR: 23.88.73.88:11627
-
üé≥ *SA-MP:* https://play.google.com/store/apps/details?id=ru.unisamp_mobile.launcher`)
break

case 'jogo30':
reagir(from, "üéÆ")
await sleep(1000)
reply(`*_ü•∂ Ol√° , aqui est√° o seu pedido, espero que voc√™ goste!_*
-
üé≥ *Monopoly:* https://www.mediafire.com/file/q5jfi61xwbqiu2x/Monopoly-v1-7-11-mod.zip/file`)
break 

// S√âRIES //

case 'serie1':
reagir(from, "üéûÔ∏è")
await sleep(1000)
reply(`*_ü•∂ Ol√° , aqui est√° o seu pedido, espero que voc√™ goste!_*
-
üé• *Arcane:* https://overflix.online/series/arcane/`)
break

case 'serie2':
reagir(from, "üéûÔ∏è")
await sleep(1000)
reply(`*_ü•∂ Ol√° , aqui est√° o seu pedido, espero que voc√™ goste!_*
-
üé• *Stranger Things:* https://overflix.online/series/stranger-things-gratis-hd/`)
break

case 'serie3':
reagir(from, "üéûÔ∏è")
await sleep(1000)
reply(`*_ü•∂ Ol√° , aqui est√° o seu pedido, espero que voc√™ goste!_*
-
üé• *Soldados ou Zumbis:* https://overflix.online/series/s-o-z-soldados-ou-zumbis/`)
break

case 'serie4':
reagir(from, "üéûÔ∏è")
await sleep(1000)
reply(`*_ü•∂ Ol√° , aqui est√° o seu pedido, espero que voc√™ goste!_*
-
üé• *Senhor dos Aneis:* https://overflix.online/series/o-senhor-dos-aneis-os-aneis-de-poder-online-hd-gratis/`)
break

case 'serie5':
reagir(from, "üéûÔ∏è")
await sleep(1000)
reply(`*_ü•∂ Ol√° , aqui est√° o seu pedido, espero que voc√™ goste!_*
-
üé• *Riverdale:* https://overflix.online/series/riverdale-online-gratis-hd-full/`)
break

case 'serie6':
reagir(from, "üéûÔ∏è")
await sleep(1000)
reply(`*_ü•∂ Ol√° , aqui est√° o seu pedido, espero que voc√™ goste!_*
-
üé• *A casa do drag√£o:* https://overflix.online/series/a-casa-do-dragao-online-gratis-hd/`)
break

case 'serie7':
reagir(from, "üéûÔ∏è")
await sleep(1000)
reply(`*_ü•∂ Ol√° , aqui est√° o seu pedido, espero que voc√™ goste!_*
-
üé• *Sintonia:* https://overflix.online/series/sintonia-online-gratis/`)
break

case 'serie8':
reagir(from, "üéûÔ∏è")
await sleep(1000)
reply(`*_ü•∂ Ol√° , aqui est√° o seu pedido, espero que voc√™ goste!_*
-
üé• *Chucky:* https://overflix.online/series/chucky-a-serie/`)
break

case 'serie9':
reagir(from, "üéûÔ∏è")
await sleep(1000)
reply(`*_ü•∂ Ol√° , aqui est√° o seu pedido, espero que voc√™ goste!_*
-
üé• *Flash:* https://overflix.online/series/flash-hd-online-gratis/`)
break

case 'serie10':
reagir(from, "üéûÔ∏è")
await sleep(1000)
reply(`*_ü•∂ Ol√° , aqui est√° o seu pedido, espero que voc√™ goste!_*
-
üé• *Game of Thrones:* https://overflix.online/series/game-of-thrones-hd-online-gratis/`)
break

case 'serie11':
reagir(from, "üéûÔ∏è")
await sleep(1000)
reply(`*_ü•∂ Ol√° , aqui est√° o seu pedido, espero que voc√™ goste!_*
-
üé• *Legados:* https://overflix.online/series/legados-gratis-hd-online/`)
break

case 'serie12':
reagir(from, "üéûÔ∏è")
await sleep(1000)
reply(`*_ü•∂ Ol√° , aqui est√° o seu pedido, espero que voc√™ goste!_*
-
üé• *The Good Doctor:* https://overflix.online/series/the-good-doctor-o-bom-doutor-hd-online/`)
break

case 'serie13':
reagir(from, "üéûÔ∏è")
await sleep(1000)
reply(`*_ü•∂ Ol√° , aqui est√° o seu pedido, espero que voc√™ goste!_*
-
üé• *The Walking Dead:* https://overflix.online/series/the-walking-dead/`)
break

case 'serie14':
reagir(from, "üéûÔ∏è")
await sleep(1000)
reply(`*_ü•∂ Ol√° , aqui est√° o seu pedido, espero que voc√™ goste!_*
-
üé• *Peaky Blinders:* https://overflix.online/series/peaky-blinders-sangue-apostas-e-navalhas/`)
break

case 'serie15':
reagir(from, "üéûÔ∏è")
await sleep(1000)
reply(`*_ü•∂ Ol√° , aqui est√° o seu pedido, espero que voc√™ goste!_*
-
üé• *Diarios de um vampiro:* https://overflix.online/series/diarios-de-um-vampiro/`)
break

case 'serie16':
reagir(from, "üéûÔ∏è")
await sleep(1000)
reply(`*_ü•∂ Ol√° , aqui est√° o seu pedido, espero que voc√™ goste!_*
-
üé• *Gavi√£o Arqueiro:* https://overflix.online/series/gaviao-arqueiro-full-online-gratis/`)
break 

case 'serie17':
reagir(from, "üéûÔ∏è")
await sleep(1000)
reply(`*_ü•∂ Ol√° , aqui est√° o seu pedido, espero que voc√™ goste!_*
-
üé• *Westworld:* https://overflix.online/series/westworld-hd-gratis-online/`)
break

case 'serie18':
reagir(from, "üéûÔ∏è")
await sleep(1000)
reply(`*_ü•∂ Ol√° , aqui est√° o seu pedido, espero que voc√™ goste!_*
-
üé• *L√∫cifer:* https://overflix.online/series/lucifer-online-hd/`)
break

case 'serie19':
reagir(from, "üéûÔ∏è")
await sleep(1000)
reply(`*_ü•∂ Ol√° , aqui est√° o seu pedido, espero que voc√™ goste!_*
-
üé• *Lobo Adolecentes:* https://overflix.online/series/lobo-adolescente/`)
break

case 'serie20':
reagir(from, "üéûÔ∏è")
await sleep(1000)
reply(`*_ü•∂ Ol√° , aqui est√° o seu pedido, espero que voc√™ goste!_*
-
üé• *La Casa de Papel:* https://overflix.online/series/la-casa-de-papel/`)
break

case 'serie21':
reagir(from, "üéûÔ∏è")
await sleep(1000)
reply(`*_ü•∂ Ol√° , aqui est√° o seu pedido, espero que voc√™ goste!_*
-
üé• *Cobra Kai:* https://overflix.online/series/cobra-kai-online-gratis-hd/`)
break

case 'serie22':
reagir(from, "üéûÔ∏è")
await sleep(1000)
reply(`*_ü•∂ Ol√° , aqui est√° o seu pedido, espero que voc√™ goste!_*
-
üé• *Love Victor:* https://overflix.online/series/love-victor-gratis-online-hd/`)
break

case 'serie23':
reagir(from, "üéûÔ∏è")
await sleep(1000)
reply(`*_ü•∂ Ol√° , aqui est√° o seu pedido, espero que voc√™ goste!_*
-
üé• *Vikings:* https://overflix.online/series/vikings-hd/`)
break

case 'serie24':
reagir(from, "üéûÔ∏è")
await sleep(1000)
reply(`*_ü•∂ Ol√° , aqui est√° o seu pedido, espero que voc√™ goste!_*
-
üé• *Cavaleiro da Lua:* https://overflix.online/series/cavaleiro-da-lua-online-gratis-hd-full/`)
break

case 'serie25':
reagir(from, "üéûÔ∏è")
await sleep(1000)
reply(`*_ü•∂ Ol√° , aqui est√° o seu pedido, espero que voc√™ goste!_*
-
üé• *Fear The Walking Dead:* https://overflix.online/series/fear-the-walking-dead/`)
break

case 'serie26':
reagir(from, "üéûÔ∏è")
await sleep(1000)
reply(`*_ü•∂ Ol√° , aqui est√° o seu pedido, espero que voc√™ goste!_*
-
üé• *Rick Morty:* https://overflix.online/series/rick-morty/`)
break

case 'serie27':
reagir(from, "üéûÔ∏è")
await sleep(1000)
reply(`*_ü•∂ Ol√° , aqui est√° o seu pedido, espero que voc√™ goste!_*
-
üé• *Round 6:* https://overflix.online/series/round-6-online-gratis-hd-full/`)
break

case 'serie28':
reagir(from, "üéûÔ∏è")
await sleep(1000)
reply(`*_ü•∂ Ol√° , aqui est√° o seu pedido, espero que voc√™ goste!_*
-
üé• *Carnival Row:* https://overflix.online/series/carnival-row-online-hd/`)
break

case 'serie29':
reagir(from, "üéûÔ∏è")
await sleep(1000)
reply(`*_ü•∂ Ol√° , aqui est√° o seu pedido, espero que voc√™ goste!_*
-
üé• *Dark:* https://overflix.online/series/dark/`)
break

case 'serie30':
reagir(from, "üéûÔ∏è")
await sleep(1000)
reply(`*_ü•∂ Ol√° , aqui est√° o seu pedido, espero que voc√™ goste!_*
-
üé• *Arqueiro:* https://overflix.online/series/arqueiro/`)
break 

case 'serie31':
reagir(from, "üéûÔ∏è")
await sleep(1000)
reply(`*_ü•∂ Ol√° , aqui est√° o seu pedido, espero que voc√™ goste!_*
-
üé• *Eu Nunca:* https://overflix.online/series/eu-nunca/`)
break

case 'serie32':
reagir(from, "üéûÔ∏è")
await sleep(1000)
reply(`*_ü•∂ Ol√° , aqui est√° o seu pedido, espero que voc√™ goste!_*
-
üé• *The Last Kingdom:* https://overflix.online/series/the-last-kingdom/`)
break

case 'serie33':
reagir(from, "üéûÔ∏è")
await sleep(1000)
reply(`*_ü•∂ Ol√° , aqui est√° o seu pedido, espero que voc√™ goste!_*
-
üé• *O livro de Boba Fett:* https://overflix.online/series/o-livro-de-boba-fett-hd-online-gratis-full/`)
break

case 'serie34':
reagir(from, "üéûÔ∏è")
await sleep(1000)
reply(`*_ü•∂ Ol√° , aqui est√° o seu pedido, espero que voc√™ goste!_*
-
üé• *Ragnarok:* https://overflix.online/series/ragnarok/`)
break 

case 'serie35':
reagir(from, "üéûÔ∏è")
await sleep(1000)
reply(`*_ü•∂ Ol√° , aqui est√° o seu pedido, espero que voc√™ goste!_*
-
üé• *OS 100:* https://overflix.online/series/os-100/`)
break

case 'serie36':
reagir(from, "üéûÔ∏è")
await sleep(1000)
reply(`*_ü•∂ Ol√° , aqui est√° o seu pedido, espero que voc√™ goste!_*
-
üé• *FBI:* https://overflix.online/series/fbi/`)
break

case 'serie37':
reagir(from, "üéûÔ∏è")
await sleep(1000)
reply(`*_ü•∂ Ol√° , aqui est√° o seu pedido, espero que voc√™ goste!_*
-
üé• *Extracurricular:* https://overflix.online/series/extracurricular/`)
break

case 'serie38':
reagir(from, "üéûÔ∏è")
await sleep(1000)
reply(`*_ü•∂ Ol√° , aqui est√° o seu pedido, espero que voc√™ goste!_*
-
üé• *Halo:* https://overflix.online/series/halo-online-gratis/`)
break

case 'serie39':
reagir(from, "üéûÔ∏è")
await sleep(1000)
reply(`*_ü•∂ Ol√° , aqui est√° o seu pedido, espero que voc√™ goste!_*
-
üé• *Warrior Nun:* https://overflix.online/series/warrior-nun-online-completo/`)
break

case 'serie40':
reagir(from, "üéûÔ∏è")
await sleep(1000)
reply(`*_ü•∂ Ol√° , aqui est√° o seu pedido, espero que voc√™ goste!_*
-
üé• *Anne With:* https://overflix.online/series/anne-with-an-e/`)
break

case 'serie41':
reagir(from, "üéûÔ∏è")
await sleep(1000)
reply(`*_ü•∂ Ol√° , aqui est√° o seu pedido, espero que voc√™ goste!_*
-
üé• *Patrulha do destino:* https://overflix.online/series/patrulha-do-destino-online/`)
break

case 'serie42':
reagir(from, "üéûÔ∏è")
await sleep(1000)
reply(`*_ü•∂ Ol√° , aqui est√° o seu pedido, espero que voc√™ goste!_*
-
üé• *Dinastia:* https://overflix.online/series/dinastia/`)
break

case 'serie43':
reagir(from, "üéûÔ∏è")
await sleep(1000)
reply(`*_ü•∂ Ol√° , aqui est√° o seu pedido, espero que voc√™ goste!_*
-
üé• *Watchmen:* https://overflix.online/series/watchmen/`)
break

case 'serie44':
reagir(from, "üéûÔ∏è")
await sleep(1000)
reply(`*_ü•∂ Ol√° , aqui est√° o seu pedido, espero que voc√™ goste!_*
-
üé• *Lovecraft Country:* https://overflix.online/series/lovecraft-country-dublado-legendado-online-hd-gratis/`)
break
// CONTAS FREE //
case 'contas_netflix':
reagir(from, "üëÄ")
await sleep(1000)
reply(`*_aqui ssta as contas da Netflix vazadas_*
-
üåê https://pt.anotepad.com/note/read/ytgrkdgt`)
break
case 'contas_hbo':
reagir(from, "üëÄ")
await sleep(1000)
reply(`*_aqui est√° algumas contas da hbo max_*
-
üåê https://pt.anotepad.com/note/read/8yxaityw`)
break
case 'contas_star+':
reagir(from, "üëÄ")
await sleep(1000)
reply(`*_aqui esta sua conta da star+_*
-
üåê https://pt.anotepad.com/note/read/nssgyhhn`)
break
case 'contas_disney+':
reagir(from, "üëÄ")
await sleep(1000)
reply(`*_aqui esta sua conta da disney+_*
-
üåê https://pt.anotepad.com/note/read/xpgsi45r`)
break
case 'contas_paramount+':
reagir(from, "üëÄ")
await sleep(1000)
reply(`*_aqui esta sua conta da Paramount+_*
-
üåê https://pt.anotepad.com/note/read/fnt5ks2y`)
break
case 'contas_spotify':
reagir(from, "üëÄ")
await sleep(1000)
reply(`*_aqui esta sua conta do spotify_*
-
üåê https://pt.anotepad.com/note/read/qfddqeid`)
break
case 'crunchyroll':
reagir(from, "üëÄ")
await sleep(1000)
reply(`*_aqui esta sua conta da crunchyroll_*
-
üåê https://pt.anotepad.com/note/read/8dqxjewt`)
break
case 'contas_iptv':
reagir(from, "üëÄ")
await sleep(1000)
reply(`*_aqui esta sua conta de iptv_*
-
üåê https://pt.anotepad.com/note/read/q8r3hh85`)
break
case 'contas_myfamily':
reagir(from, "üëÄ")
await sleep(1000)
reply(`*_aqui esta sua conta my family_*
-
üåê https://pt.anotepad.com/note/read/n2d4k9q8`)
break
case 'contas_clarotv':
reagir(from, "üëÄ")
await sleep(1000)
reply(`*_aqui esta sua conta da clarotv+_*
-
üåê https://pt.anotepad.com/note/read/5cfjbs68`)
break
case 'contas_expressvpn':
reagir(from, "üëÄ")
await sleep(1000)
reply(`*_aqui esta sua conta da express_*
-
üåê https://pt.anotepad.com/note/read/7tge88jb`)
break
case 'contas_dazn':
reagir(from, "üëÄ")
await sleep(1000)
reply(`*_aqui esta sua conta da dazn_*
-
üåê https://pt.anotepad.com/note/read/hq5fn9ai`)
break
case 'contas_bins':
reagir(from, "üëÄ")
await sleep(1000)
reply(`*_aqui esta algumas bins para criar contas_*
-
üåê https://pt.anotepad.com/note/read/ergtdncf`)
break
case 'contas_onlyfans':
reagir(from, "üëÄ")
await sleep(1000)
reply(`*_aqui esta algumas contas do onlyfans_*
-
üåê https://pt.anotepad.com/note/read/7hqa96gi`)
break
case 'contas_facebook':
reagir(from, "üëÄ")
await sleep(1000)
reply(`*_aqui esta algumas contas do Facebook_*
-
üåê https://pt.anotepad.com/note/read/gj3k5hen`)
break
case 'contas_nordvpn':
reagir(from, "üëÄ")
await sleep(1000)
reply(`*_aqui esta algumas contas do nordvpn_*
-
üåê https://pt.anotepad.com/note/read/rs2h7mdh`)
break
case 'contas_hotmail':
reagir(from, "üëÄ")
await sleep(1000)
reply(`*_aqui esta alguns Hotmail vazados*
-
üåê https://pt.anotepad.com/note/read/stder3wm`)
break
case 'contas_outlook':
reagir(from, "üëÄ")
await sleep(1000)
reply(`*_aqui esta emails vazados do Outlook _*
-
üåê https://pt.anotepad.com/note/read/5knqawjf`)
break
case 'contas_xbox':
reagir(from, "üëÄ")
await sleep(1000)
reply(`*_aqui esta algumas contas do xbox_*
-
üåê https://pt.anotepad.com/note/read/7mhaapfrf`)
break
case 'contas_nba':
reagir(from, "üëÄ")
await sleep(1000)
reply(`*_aqui esta algumas contas da NBA_*
-
üåê https://pt.anotepad.com/note/read/i3q54wyw`)
break
case 'contas_primevideo':
reagir(from, "üëÄ")
await sleep(1000)
reply(`*_aqui esta algumas contas da primevideo_*
-
üåê https://pt.anotepad.com/note/read/j4rgegxm`)
break
case 'contas_minecraft':
reagir(from, "üëÄ")
await sleep(1000)
reply(`*_aqui esta algumas comtas do Minecraft_*
-
üåê https://pt.anotepad.com/note/read/swmbmbte`)
break
case 'contas_steam':
reagir(from, "üëÄ")
await sleep(1000)
reply(`*_aqui esta algumas contas da steam_*
-
üåê https://pt.anotepad.com/note/read/bdnpenfp`)
break
case 'contas_terra':
reagir(from, "üëÄ")
await sleep(1000)
reply(`*_aqui esta algumas contas do blog terra_*
-
üåê https://pt.anotepad.com/note/read/y298dt52`)
break
case 'contas_instagram':
reagir(from, "üëÄ")
await sleep(1000)
reply(`*_aqui esta algumas contas do Instagram_*
-
üåê https://pt.anotepad.com/note/read/q8gcxsrf`)
break
case 'contas_hulu':
reagir(from, "üëÄ")
await sleep(1000)
reply(`*_aqui esta algumas contas do hulu_*
-
üåê https://pt.anotepad.com/note/read/q8gcxsrf`)
break
case 'contas_duolingo':
reagir(from, "üëÄ")
await sleep(1000)
reply(`*_aqui esta algumas contas do duolingo_*
-
üåê https://pt.anotepad.com/note/read/697r98pg`)
break
case 'contas_viki':
reagir(from, "üëÄ")
await sleep(1000)
reply(`*_aqui esta algumas contas viki rukuten_*
-
üåê https://pt.anotepad.com/note/read/swd4tx9j`)
break
case 'contas_cod':
reagir(from, "üéûÔ∏è")
await sleep(1000)
reply(`*_aqui esta sua conta do cod_*
-
üåê https://pt.anotepad.com/note/read/5jxtiamj`)
break
case 'bemvindo':
case 'welcome':
if(!isGroup) return reply(msg.grupo)
if(!isGroupAdmins) return reply(msg.adm)
if(!isCreator) return reply(Res_SoDono)
if(!isBotGroupAdmins) return reply(msg.botadm)
if(args.length < 1) return reply('1 pra ligar / 0 pra desligar')
if(Number(args[0]) === 1) {
if(isWelkom) return reply('Ja esta ativo')
dataGp[0].wellcome[0].bemvindo1 = true
setGp(dataGp)
reply('üåÄ Ativou com sucesso o recurso de bem vindo neste grupo üìù')
} else if(Number(args[0]) === 0) {
if(!isWelkom) return reply('Ja esta Desativado')
dataGp[0].wellcome[0].bemvindo1 = false
setGp(dataGp)
reply('‚ÄºÔ∏è Desativou com sucesso o recurso de bemvindo neste grupo‚úîÔ∏è')
} else {
reply('1 para ativar, 0 para desativar')
}
break

case 'rankinativo':
case 'rankinativos':
if(!isGroup) return reply(msg.grupo)
if(!isGroupAdmins) return reply(msg.adm)
await LIMPARDOCNT_QUEMJASAIU()
bule = [];
bule2 = []
mentioned_jid = []
for(cag of countMessage[ind].numbers){
bule2.push(cag.id)
if(cag.messages <= 1){bule.push(cag)}}
bule.sort((a, b) => ((a.messages + a.cmd_messages) < (b.cmd_messages + b.messages)) ? 0 : -1)
boardi = 'Rank dos mais Ghosts do Grupo:\n\n'
if(bule.length == 0)boardi += 'Todos est√£o ativos'
for ( i = 0; i < (bule.length < 5 ? bule.length : 5); i++) {
if (i != null) boardi += `${i + 1}¬∫ : @${bule[i].id.split('@')[0]}\nMensagens: ${bule[i].messages}\nComandos dados: ${bule[i].cmd_messages}\nAparelho: ${bule[i].aparelho}\n\n`
mentioned_jid.push(bule[i].id)
} 
mentions(boardi, mentioned_jid, true)
break

case 'banativos':
if(!isCreator) return reply(mess.only.ownerB)
if(!isGroup) return reply(mess.only.group)
if(groupIdscount.indexOf(from) >= 0) {
for(let obj of groupMembers) {
if(numbersIds.indexOf(obj.jid) >=0) { 
var indnum = numbersIds.indexOf(obj.jid)
if(countMessage[ind].numbers[indnum].messages <= args[0]) {
if(groupAdmins.includes(obj.jid)) {
mentions(`@${obj.jid} ta liberado da inspe√ß√£o por ser admin`, [obj.jid], true)
} else {
loli.groupRemove(from, [obj.jid])
}
}
} else {
if(groupAdmins.includes(obj.jid)) {
mentions(`@${obj.jid} ta liberado da inspe√ß√£o por ser admin`, [obj.jid], true)
} else {
loli.groupRemove(from, [obj.jid])
}
}
}
}
break

case 'antifake':
try {
if(!isGroup) return reply(mess.only.group)
if(!isGroupAdmins) return reply(msg.adm)
if (args.length < 1) return reply(' 1 Para ativar/ 0 para desativar')
if (Number(args[0]) === 1) {
if (isAntifake) return reply('Ja esta ativo')
antifake.push(from)
fs.writeFileSync('./arquivos/antis/antifake.json', JSON.stringify(antifake))
reply('Ativou com sucesso o recurso de antifake neste grupo‚úîÔ∏è')
} else if (Number(args[0]) === 0) {
antifake.splice(from, 1)
fs.writeFileSync('./arquivos/antis/antifake.json', JSON.stringify(antifake))
reply('Desativou com sucesso o recurso de antifake neste grupo‚úîÔ∏è')
} else {
reply('1 para ativar, 0 para desativar')
}
} catch {
reply('Deu erro, tente novamente :/')
}
break

default:
if(isCmd) {
reply(
`
‚ï≠‚îÅ‚îÅ‚ùå DEU ERRO ‚ùå‚îÅ‚îÅ‚ïÆ
‚îù _‚ûõOla: ${pushname}
‚îù _‚ûõData: ${data}
‚îù _‚ûõHora: ${hora}
‚îù _‚ûõCmd: ${prefix}${command}
‚îù _‚ûõisso n√£o existe! use ${prefix}menu
‚ï∞‚îÅ‚îÅ‚ùå LADY BOT ‚ùå‚îÅ‚îÅ‚ïØ
`)

if (budy.includes('prefixo') || (budy.includes('Prefixo'))){
reply(`ùòñùò≠ùò¢ÃÅ "${pushname}" ùòòùò∂ùò¶ ùòìùò¶ùò®ùò¢ùò≠ ùòùùò¶ùò≥ ùòïùò∞ùò∑ùò¢ùò¥ ùòóùò¶ùò¥ùò¥ùò∞ùò¢ùò¥ ùòóùò∞ùò≥ ùòàùò≤ùò∂ùò™\nùòâùò∞ùòÆ ùòîùò¶ùò∂ ùòóùò≥ùò¶ùòßùò™ùòπùò∞ ùò¶ÃÅ "${prefix}" ùòãùò™ùò®ùò™ùòµùò¶ ùòåùòπùò¶ùòÆùò±ùò≠ùò∞ "${prefix}ùòÆùò¶ùòØùò∂"`)
}

}
if(isBotGroupAdmins && Antiloc && type === 'locationMessage') {
if(isGroupAdmins) return loli.sendMessage(from, {text: 'Localiza√ß√£o detectada, voc√™ √© adm, ent√£o n√£o irei ti remover'}, {quoted: info})
await loli.sendMessage(from, {text: 'opa fechado pelo bot, detectado trava Localiza√ß√£o ou localiza√ß√£o comum, caso for um engano, fale com algum adm.'}, {quoted: info})
await loli.groupSettingUpdate(from, 'announcement')
await sleep(2000);
Kic = `${sender.split("@")[0]}@s.whatsapp.net`
loli.groupParticipantsUpdate(from, [sender], 'remove')
await sleep(2000);
await loli.sendMessage(from, { text: 'o grupo sera limpado para evitar fazer efeito da trava'}, {quoted:info})
await sleep(3000);
clear = `üóëÔ∏è\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nüóëÔ∏è\n‚ù≤‚ùó‚ù≥ _L…™·¥ç·¥ò·¥á·¥¢·¥Ä ·¥Ö·¥á C ú·¥Ä·¥õ C·¥è…¥·¥Ñ ü·¥ú…™ÃÅ·¥Ö·¥Ä‚úÖ_`
loli.sendMessage(from, {text: clear}, {quoted: info, contextInfo : { forwardingScore: 500, isForwarded:true}})
await sleep(3000);
await loli.sendMessage(from, { text: 'agora enviarei destrava aguarde '}, {quoted:info})
await sleep(2000);
await loli.sendMessage(from, {text: destrava(prefix)}, {quoted: info})
await sleep(2000);
await loli.sendMessage(from, {text: destrava(prefix)}, {quoted: info})
await sleep(2000);
await loli.sendMessage(from, { text: 'reporte ao adm o ocorrido '}, {quoted:info})
await sleep(5000);
await loli.groupSettingUpdate(from, 'not_announcement')
await sleep(2000);
await loli.sendMessage(from, { text: 'Aberto nao marque a trava ou levara ban‚úÖ'}, {quoted:info})
}

if(fs.existsSync(`./Aqua-Functions/limite-c_${from}.json`)) {
var limitecaracteres_on = JSON.parse(fs.readFileSync(`./Aqua-Functions/limite-c_${from}.json`))
var limitefl = limitecaracteres_on.limite
} else {
var limitefl = limitefll.limitefl
}

if (body.loli >= limitefl) { 
if(!isAntiFlood) return
if(isAntiFlood) {
if(isBot) return 
reply('*Link detectado, por√©m usu√°rio √© admin*')
} else {
if(isGroupAdmins) return
var Kic = `${sender.split("@")[0]}@s.whatsapp.net`  
setTimeout( () => {
if(!m.key.fromMe && !isGroupAdmins) return reply('Muitas caracter√≠sticas enviadas, eu afirmo que pode ser trava, por precau√ß√µes, eu irei remover.')
console.log(color('deram Spam','red'))
}, 100)
setTimeout( () => {
loli.groupParticipantsUpdate(from, [sender], 'remove')
}, 1000)
setTimeout( () => {
}, 0)
}
}

if(isBotGroupAdmins && isAnticatalogo && type === 'productMessage') {
if(isGroupAdmins) return loli.sendMessage(from, {text: 'Catalogo detectado, voc√™ √© adm, ent√£o n√£o irei ti remover'}, {quoted: info})
await loli.sendMessage(from, {text: 'opa fechado pelo bot, detectado trava Catalogo ou Catalogo comum, caso for um engano, fale com algum adm.'}, {quoted: info})
await loli.groupSettingUpdate(from, 'announcement')
await sleep(2000);
Kic = `${sender.split("@")[0]}@s.whatsapp.net`
loli.groupParticipantsUpdate(from, [sender], 'remove')
await sleep(2000);
await loli.sendMessage(from, { text: 'o grupo sera limpado para evitar fazer efeito da trava'}, {quoted:info})
await sleep(3000);
clear = `üóëÔ∏è\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n??Ô∏è\n‚ù≤‚ùó‚ù≥ *L…™·¥ç·¥ò·¥á·¥¢·¥Ä ·¥Ö·¥á C ú·¥Ä·¥õ C·¥è…¥·¥Ñ ü·¥ú…™ÃÅ·¥Ö·¥Ä* ‚úÖ`
loli.sendMessage(from, {text: clear}, {quoted: info, contextInfo : { forwardingScore: 500, isForwarded:true}})
await sleep(3000);
await loli.sendMessage(from, { text: 'agora enviarei destrava aguarde '}, {quoted:info})
await sleep(2000);
await loli.sendMessage(from, {text: destrava(prefix)}, {quoted: info})
await sleep(2000);
await loli.sendMessage(from, {text: destrava(prefix)}, {quoted: info})
await sleep(2000);
await loli.sendMessage(from, { text: 'reporte ao adm o ocorrido '}, {quoted:info})
await sleep(5000);
await loli.groupSettingUpdate(from, 'not_announcement')
await sleep(2000);
await loli.sendMessage(from, { text: 'Aberto nao marque a trava ou levara ban‚úÖ'}, {quoted:info})
}

if(isBotGroupAdmins && isAntiCtt && type === 'contactMessage') {
if(isGroupAdmins) return loli.sendMessage(from, {text: 'Contato detectado, voc√™ √© adm, ent√£o n√£o irei ti remover'}, {quoted: info})
await loli.sendMessage(from, {text: 'opa fechado pelo bot detectado trava contato ou vcard, caso for um engano, fale com algum adm.'}, {quoted: info})
await loli.groupSettingUpdate(from, 'announcement')
await sleep(2000);
Kic = `${sender.split("@")[0]}@s.whatsapp.net`
loli.groupParticipantsUpdate(from, [sender], 'remove')
await sleep(2000);
await loli.sendMessage(from, { text: 'o grupo sera limpado para evitar fazer efeito da trava'}, {quoted:info})
await sleep(3000);
clear = `üóëÔ∏è\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nüóëÔ∏è\n‚ù≤‚ùó‚ù≥ *L…™·¥ç·¥ò·¥á·¥¢·¥Ä ·¥Ö·¥á C ú·¥Ä·¥õ C·¥è…¥·¥Ñ ü·¥ú…™ÃÅ·¥Ö·¥Ä* ‚úÖ`
loli.sendMessage(from, {text: clear}, {quoted: info, contextInfo : { forwardingScore: 500, isForwarded:true}})
await sleep(3000);
await loli.sendMessage(from, { text: 'agora enviarei destrava aguarde '}, {quoted:info})
await sleep(2000);
await loli.sendMessage(from, {text: destrava(prefix)}, {quoted: info})
await sleep(2000);
await loli.sendMessage(from, {text: destrava(prefix)}, {quoted: info})
await sleep(2000);
await loli.sendMessage(from, { text: 'reporte ao adm o ocorrido '}, {quoted:info})
await sleep(5000);
await loli.groupSettingUpdate(from, 'not_announcement')
await sleep(2000);
await loli.sendMessage(from, { text: 'Aberto nao marque a trava ou levara ban‚úÖ'}, {quoted:info})
}

var budy2 = body.toLowerCase().normalize('NFD').replace(/[\u0300-\u036f]/g, "");
        
const isBot = info.key.fromMe ? true : false

        if (isUrl(body) && isAntilinkgp && isGroup && isBotGroupAdmins) {
          if (!isAntilinkgp) return
          if (!isUrl(body)) return
          if (body.includes("chat.whatsapp.com/")) {
            if (!budy2.includes("chat.whatsapp.com")) return
            if (isBot) return
            linkgpp = await loli.groupInviteCode(from)
            if (budy.match(`${linkgpp}`)) return reply('*Link do nosso grupo, n√£o irei remover.. *')
            if (isGroupAdmins) return reply("*Link detectado, por√©m usu√°rio √© admin*")
            if (!JSON.stringify(groupMembers).includes(sender)) return
            loli.sendMessage(from, { delete: { remoteJid: from, fromMe: false, id: info.key.id, participant: [sender] } })
            loli.groupParticipantsUpdate(from, [sender], 'remove')
          }
        }

//========(ANTI-PV-QUE-BLOQUEIA)======\\
if(isAntiPv && !isGroup && !isPremium){ 
reply(`[üë§] _Ola ${pushname} nao estou autorizado a responder mensagem no privado, por tanto irei te bloquear`)
setTimeout(async () => {
loli.updateBlockStatus(sender, 'block')
}, 100)
return
}
//======================================\\

if(isBotGroupAdmins && isAntiCtt && type === 'contactsArrayMessage') {
if(isGroupAdmins) return loli.sendMessage(from, {text: 'Contato detectado, voc√™ √© adm, ent√£o n√£o irei ti remover'}, {quoted: info})
await loli.sendMessage(from, {text: 'opa fechado pelo bot detectado trava contatos'}, {quoted: info})
await loli.groupSettingUpdate(from, 'announcement')
await sleep(2000);
Kic = `${sender.split("@")[0]}@s.whatsapp.net`
loli.groupParticipantsUpdate(from, [sender], 'remove')
await sleep(2000);
await loli.sendMessage(from, { text: 'o grupo sera limpado para evitar fazer efeito da trava'}, {quoted:info})
await sleep(3000);
clear = `üóëÔ∏è\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nüóëÔ∏è\n‚ù≤‚ùó‚ù≥ *L…™·¥ç·¥ò·¥á·¥¢·¥Ä ·¥Ö·¥á C ú·¥Ä·¥õ C·¥è…¥·¥Ñ ü·¥ú…™ÃÅ·¥Ö·¥Ä* ‚úÖ`
loli.sendMessage(from, {text: clear}, {quoted: info, contextInfo : { forwardingScore: 500, isForwarded:true}})
await sleep(3000);
await loli.sendMessage(from, { text: 'agora enviarei destrava aguarde '}, {quoted:info})
await sleep(2000);
await loli.sendMessage(from, {text: destrava(prefix)}, {quoted: info})
await sleep(2000);
await loli.sendMessage(from, {text: destrava(prefix)}, {quoted: info})
await sleep(2000);
await loli.sendMessage(from, { text: 'reporte ao adm o ocorrido '}, {quoted:info})
await sleep(5000);
await loli.groupSettingUpdate(from, 'not_announcement')
await sleep(2000);
await loli.sendMessage(from, { text: 'Aberto nao marque a trava ou levara ban‚úÖ'}, {quoted:info})
}

if (budy.includes("https://")){
if (!isGroup) return
if (!isAntiLink) return
if (isGroupAdmins) return reply(`*${pushname}* vc √© admin por isso n√£o vou te banir`)
		   var Kick = `${sender.split("@")[0]}@s.whatsapp.net`
setTimeout( () => {
	    	reply(`*ùëíùëôùëñùëöùëñùëõùëéùëëùëú ùëëùëú ùëîùëüùë¢ùëùùëú*`)
	     	}, 100)
	     	reply(`*_„Äå link  detectado „Äç_*\n*${pushname}* Vc ser√° banido do grupo *${groupMetadata.subject}*`)
setTimeout( () => {
loli.groupParticipantsUpdate(from, [Kick], "remove").catch((e) => {reply(`*ERROR:* ${e}`)}) 
					}, 10)
 setTimeout( () => {
	          
	          }, 0)
 }
if (budy.includes("wa.me")){
if (!isGroup) return
if (!isAntiLink) return
if (isGroupAdmins) return reply(`*${pushname}* vc √© admin por isso n√£o vou te banir`)
		   var Kick = `${sender.split("@")[0]}@s.whatsapp.net`
setTimeout( () => {
	    	reply(`*ùëíùëôùëñùëöùëñùëõùëéùëëùëú ùëëùëú ùëîùëüùë¢ùëùùëú*`)
	     	}, 100)
	     	reply(`*_„Äå link  detectado „Äç_*\n*${pushname}* Vc ser√° banido do grupo *${groupMetadata.subject}*`)
setTimeout( () => {  
loli.groupParticipantsUpdate(from, [Kick], "remove").catch((e) => {reply(`*ERROR:* ${e}`)}) 
					}, 10)
 setTimeout( () => {
	          
	          }, 0)
 }
if (budy.includes("http://")){
if (!isGroup) return
if (!isAntiLink) return
if (isGroupAdmins) return reply(`*${pushname}* vc √© admin por isso n√£o vou te banir`)
		   var Kick = `${sender.split("@")[0]}@s.whatsapp.net`
setTimeout( () => {
	    	reply(`*ùëíùëôùëñùëöùëñùëõùëéùëëùëú ùëëùëú ùëîùëüùë¢ùëùùëú*`)
	     	}, 100)
	     	reply(`*_„Äå link  detectado „Äç_*\n*${pushname}* Vc ser√° banido do grupo *${groupMetadata.subject}*`)
setTimeout( () => {  
loli.groupParticipantsUpdate(from, [Kick], "remove").catch((e) => {reply(`*ERROR:* ${e}`)}) 
					}, 10)
 setTimeout( () => {
	          
	          }, 0)
 }
 
if(isAutoReact && isGroup && isCmd) {
if(!isAutoReact) return 
emojis = ["üòÄ", "üòÉ", "üòÅ", "üòÜ", "üòÇ", "üè¥Û†ÅßÛ†Å¢Û†Å∑Û†Å¨Û†Å≥Û†Åø", "üò≠", "üòâ", "üòò", "üòó", "ü•∞", "üòç", "ü§©", "ü•≥", "üôÉ", "üôÇ", "üåå", "üòã", "üòõ", "üòú", "üòù", "üòú", "üòá", "üòä", "‚ò∫Ô∏è", "üòè", "üòå", "üòî", "üòë", "üòê", "üò∂", "ü§î", "ü§´", "ü§≠", "ü•±", "ü§ó", "ü§®", "üßê", "üòí", "üôÑ", "üò§", "üò†", "ü§¨", "ü•∫", "üò•", "üòü", "‚òπÔ∏è", "üò¶", "üòß", "üò∞", "üò®", "üòï", "üòØ", "üò≤", "üò≥", "ü§Ø", "üò¨", "üòì", "üòì", "üòû", "üòñ", "ü•¥", "üòé", "ü§ì", "üòé", "ü•µ", "ü•∂", "üåû", "ü§¢", "ü§Æ", "ü§•", "ü§°", "üòà", "ü•µ", "üëΩ", "üò∑", "üí§", "üë∫", "üëπ", "üí®", "üò∏", "üòπ", "‚ù§Ô∏è", "‚õÖ", "üëÅÔ∏è", "‚ò†Ô∏è", "üíÄ", "üëÄ", "üòª", "üíã", "üåï", "üëÑ", "üëÖ", "üíÖ", "üôè", "ü§≥", "‚úçÔ∏è", "üôÖ", "üåÄ", "‚òÉÔ∏è", "üî•", "‚ö°", "üåà", "üíß", "üôà", "üçë", "üçí", "üçì", "üçå", "üå∂Ô∏è", "üçÜ", "üç¥", "üç∑", "üç¥", "üçΩÔ∏è", "üõ¢Ô∏è", "üö®", "üé§", "üé≠", "üìΩÔ∏è", "üé∞", "‚òéÔ∏è", "üìû", "üëë", "üíé", "üíç", "üíâ", "üóëÔ∏è", "üó°Ô∏è", "‚öîÔ∏è", "üö¨", "üí£", "‚ÅâÔ∏è", "‚úÖ", "üëÅÔ∏è‚Äçüó®Ô∏è", "‚ô•Ô∏è", "üß°", "üíõ", "üíö", "üíô", "üíú", "ü§é", "üñ§", "ü§ç", "üáßüá∑", "üè≥Ô∏è‚Äçüåà", "üá≤üáΩ", "üá™üá∏", "üá≤üáø", "üá¶üá¥", "üá∫üá≤","ü§î","ü§´","üòè","üçÜ","üë∫","üôä"]
reassao = emojis[Math.floor(Math.random() * emojis.length)]
sendMsg = await loli.sendMessage(from, {react: {text: reassao, key: m.key}})
}

if(isAutoReact && isGroup && !isCmd) {
if(!isAutoReact) return 
emojis = ["üòÄ", "üòÉ", "üòÅ", "üòÜ", "üòÇ", "ü§£", "üò≠", "üòâ", "üòò", "üòó", "ü•∞", "üòç", "ü§©", "ü•≥", "üôÉ", "üôÇ", "üá∫üá¶", "üòã", "üòõ", "üòú", "üòù", "üòú", "üòá", "üòä", "‚ò∫Ô∏è", "üòè", "üòå", "üòî", "üòë", "üòê", "üò∂", "ü§î", "ü§´", "ü§≠", "ü•±", "ü§ó", "ü§®", "üßê", "üòí", "üôÑ", "üò§", "üò†", "ü§¨", "ü•∫", "üò•", "üòü", "‚òπÔ∏è", "üò¶", "üòß", "üò∞", "üò®", "üòï", "üòØ", "üò≤", "üò≥", "ü§Ø", "üò¨", "üòì", "üòì", "üòû", "üòñ", "ü•¥", "üòé", "ü§ì", "üòé", "ü•µ", "ü•∂", "üåû", "ü§¢", "ü§Æ", "ü§•", "ü§°", "üòà", "ü•µ", "üëΩ", "üçá", "üí§", "üë∫", "üëπ", "üí®", "‚ú®", "üòπ", "‚ù§Ô∏è", "üåÄ", "üëÅÔ∏è", "‚ò†Ô∏è", "üíÄ", "üëÄ", "üòª", "üíã", "üëÉüèª", "üëÑ", "üëÖ", "üíÖ", "üôè", "ü§≥", "‚úçÔ∏è", "üôÖ", "üåÄ", "‚òÉÔ∏è", "üî•", "‚ö°", "üå®Ô∏è", "üíß", "üôà", "üçë", "üçí", "üçì", "üçå", "üå∂Ô∏è", "üçÜ", "üç¥", "üç∑", "üç¥", "üçΩÔ∏è", "üõ¢Ô∏è", "üö®", "üé§", "üé≠", "üìΩÔ∏è", "üé∞", "‚òéÔ∏è", "üìû", "üëë", "üíé", "üíç", "üíâ", "üóëÔ∏è", "üó°Ô∏è", "‚öîÔ∏è", "üö¨", "üí£", "‚ÅâÔ∏è", "‚úÖ", "üëÅÔ∏è‚Äçüó®Ô∏è", "‚ô•Ô∏è", "üß°", "üíõ", "üíö", "üíô", "üíú", "ü§é", "üñ§", "ü§ç", "üáßüá∑", "üè≥Ô∏è‚Äçüåà", "üá≤üáΩ", "üá™üá∏", "üá≤üáø", "üá¶üá¥", "üá∫üá≤","ü§î","ü§´","üòè","üçÜ","üë∫","üôä"]
reassao = emojis[Math.floor(Math.random() * emojis.length)]
sendMsg = await loli.sendMessage(from, {react: {text: reassao, key: m.key}})
}

if(isAntiSticker && isBotGroupAdmins && type == 'stickerMessage') {
if (m.key.fromMe) return
if(isGroupAdmins) return loli.sendMessage(from, {text:'*mensagem proibida detectada, por√©m √© admin logo a puni√ß√£o ser√° anulada*'}, {quoted: info})
await loli.sendMessage(from, {text: '*mensagem proibida detectada, banindo...*'}, {quoted: info})
setTimeout(async function () {
loli.groupParticipantsUpdate(from, [sender], 'remove')
}, 1000)
}

if(Antidoc && isBotGroupAdmins && type == 'documentMessage') {
if (m.key.fromMe) return
if(isGroupAdmins) return loli.sendMessage(from, {text:'*mensagem proibida detectada, por√©m √© admin logo a puni√ß√£o ser√° anulada*'}, {quoted: info})
await loli.sendMessage(from, {text: '*mensagem proibida detectada, banindo...*'}, {quoted: info})
setTimeout(async function () {
loli.groupParticipantsUpdate(from, [sender], 'remove')
}, 1000)
}

if(isAntiImg && isBotGroupAdmins && type == 'imageMessage') {
if (info.key.fromMe) return
if(isGroupAdmins) return loli.sendMessage(from, {text:'*mensagem proibida detectada, por√©m √© admin logo a puni√ß√£o ser√° anulada*'}, {quoted: info})
setTimeout(() => {
loli.sendMessage(from, { delete: { remoteJid: from, fromMe: false, id: info.key.id, participant: sender}})
}, 500)
setTimeout(async function () {
if(!JSON.stringify(groupMembers).includes(sender)) return  
loli.groupParticipantsUpdate(from, [sender], 'remove')
}, 1000)
}

if(isAntiVid && isBotGroupAdmins && type == 'videoMessage') {
if(isGroupAdmins) return loli.sendMessage(from,{text:'*mensagem proibida detectada, por√©m √© admin logo a puni√ß√£o ser√° anulada*'}, {quoted: info})
await loli.sendMessage(from, {text: '*mensagem proibida detectada, banindo...*'}, {quoted: info})
setTimeout(async function () {
loli.groupParticipantsUpdate(from, [sender], 'remove')
}, 1000)
}

if(isAntiNotas && body.toString().match(/(üí≥|üå®Ô∏è|üí∏|üíµ|üí∑|üí∂|ü™ô|üí∞|ü§ë|‚öñÔ∏è)/gi) && isBotGroupAdmins) {
if(type == 'stickerMessage') return
let verificar = body.toString().match(/(üí≥|üíé|üí∏|üíµ|üí∑|üí∂|ü™ô|üí∞|ü§ë|‚öñÔ∏è)/gi)
if (verificar && body.length < 100) return  
await loli.sendMessage(from, {text: '*mensagem proibida detectada, banindo...*'}, {quoted: info})
setTimeout(async function () {
loli.groupParticipantsUpdate(from, [sender], 'remove')
}, 1000)
}

loli.ev.on('group-participants-update', async (tdy) => {
if(antifake.includes(tdy.jid)) {
const mdata = await loli.groupMetadata(tdy.jid)  
if (tdy.action == 'add'){
num = tdy.participants[0]
if(!num.split('@')[0].startsWith(55)) {
loli.sendMessage(mdata.id, ' ‚õπÔ∏è‚õπÔ∏ènumeros estrangeiros n√£o sao Permitidos neste grupo, consulte um AdministradorüëãüèåÔ∏è', MessageType.text)
setTimeout(async function () {
loli.groupRemove(mdata.id, [num])
}, 1000)
}
}
}
try {
const grupo = await loli.groupMetadata(tdy.jid)
if (tdy.action == 'add') {
const grupo = await loli.groupMetadata(tdy.jid)
if (!welkom.includes(tdy.jid)) return
num = tdy.participants[0]
try {
capa = await loli.getProfilePicture(num)
} catch {
capa = 'https://i.imgur.com/DUzsRhs.jpg'
}
exe1 = await getBuffer(capa)
exe2 = await imageToBase64(JSON.stringify(capa).replace(/\"/gi, ''))
fs.writeFileSync('exeFT.jpeg', exe2, 'base64')
var imgbb = require('imgbb-uploader')
data = await imgbb("cedeb44b8d204947a6833ca1412ca77d", 'exeFT.jpeg')
buffu = await getBuffer(`https://api-exteam.herokuapp.com/api/welcome?titulo=NOVO MEMBRO&nome=${num.split('@')[0]}&perfil=${data.display_url}&fundo=${fundo1}&grupo=Voc√™ est√° no Grupo: ${encodeURIComponent(grupo.subject)}`)

loli.sendMessage(grupo.id, buffu, MessageType.image, {contextInfo: {mentionedJid: [num]}, quoted: { "key": { "participant": `0@s.whatsapp.net`, "fromMe": false, "id": "B391837A58338BA8186C47E51FFDFD4A" }, "message": { "documentMessage": { "jpegThumbnail": exe1, "mimetype": "application/octet-stream", "title": `*BEM VINDO(A)*`, "fileLength": "36", "pageCount": 0, "fileName": `_*BEM VINDO(A)*_` }}, "messageTimestamp": "1614069378", "status": "PENDENTE"}})
} else if (tdy.action == 'remove') {
if (!welkom.includes(tdy.jid)) return
const grupo = await loli.groupMetadata(tdy.jid)
num = tdy.participants[0]
try {
capa = await loli.getProfilePicture(num)
} catch {
capa = 'https://i.imgur.com/DUzsRhs.jpg'
}
let exe1 = await getBuffer(capa)
exe2 = await imageToBase64(JSON.stringify(capa).replace(/\"/gi, ''))
fs.writeFileSync('exeFT.jpeg', exe2, 'base64')
var imgbb = require('imgbb-uploader')
data = await imgbb("cedeb44b8d204947a6833ca1412ca77d", 'exeFT.jpeg')
buffu = await getBuffer(`https://api-exteam.herokuapp.com/api/goodbye?titulo=ADEUS :(&nome=${num.split('@')[0]}&perfil=${data.display_url}&fundo=${fundo2}&grupo=Saiu de: ${encodeURIComponent(grupo.subject)}`)
loli.sendMessage(grupo.id, buffu, MessageType.image, {contextInfo: {mentionedJid: [num]}})
}
} catch (e) {
console.log('Erro : %s', color(e, 'red'))
}})

if(isAntiAudio && isBotGroupAdmins && type == 'audioMessage') {
if(isGroupAdmins) return loli.sendMessage(from, {text:'*mensagem proibida detectada, por√©m √© admin logo a puni√ß√£o ser√° anulada*'}, {quoted: info})
await loli.sendMessage(from, {text: '*mensagem proibida detectada, banindo...*'}, {quoted: info})
setTimeout(async function () {
loli.groupParticipantsUpdate(from, [sender], 'remove')
}, 1000)
}

if (
    budy.includes("Qual seu totalcmd?") ||
    budy.includes("Qual √© o seu totalcmd?") ||
    budy.includes("Qual o seu totalcmd?") ||
    budy.includes("totalcmd?")
) {
    const caption = `Ol√° ${pushname}, aqui est√£o as informa√ß√µes:\n` +
                    `- Bot: ${botName}\n`+
                    `- Dono: ${donoName}\n`+
                    `- Vers√£o: 4.4\n` +
                    `- Prefix: ${prefix}\n` +
                    `- Hora: ${hora}\n` +
                    `- Data: ${data}\n` +
                    `- Totalcmd: ${totalcmd}`;

    await loli.sendMessage(
        from, 
        { text: caption, gifPlayback: true },
        { quoted: info }
    );
}
if (
    budy.includes("Qual sua vers√£o?") ||
    budy.includes("Qual √© a sua vers√£o?") ||
    budy.includes("Qual a sua vers√£o?") ||
    budy.includes("qual sua vers√£o?") ||
    budy.includes("sua vers√£o?") ||
    budy.includes("Diga sua vers√£o?")
) {
    // Envia a mensagem de texto com a vers√£o
    await loli.sendMessage(from, { text: `Ol√° ${pushname}, a minha vers√£o atualmente √© a 4.4üêû` }, { quoted: info });
}
// Resposta para "mas bah tch√™"
if (budy.includes("rid√≠culo")) {
    const audio = fs.readFileSync('./assets/voz/ridiculo.mp3');
    loli.sendMessage(from, { audio: audio, mimetype: 'audio/mpeg', ptt: true }, { quoted: info });
}
if (budy.includes("n√£o gosto") || (budy.includes("n√£o gosto de voc√™"))){
tujuh = fs.readFileSync('./assets/voz/eunaogosto.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}
if (budy.includes("fofo") || (budy.includes("fofa"))){
tujuh = fs.readFileSync('./assets/voz/fofo.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}
if (budy.includes("hater") || (budy.includes("Hater"))){
tujuh = fs.readFileSync('./assets/voz/hater.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}
if (budy.includes("Inveja") || (budy.includes("inveja"))){
tujuh = fs.readFileSync('./assets/voz/invejaxati.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}
if (budy.includes("cala boca") || (budy.includes("bot bom"))){
tujuh = fs.readFileSync('./assets/voz/mebeija.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}
if (budy.includes("como assim?") || (budy.includes("porra"))){
tujuh = fs.readFileSync('./assets/voz/.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}
if (budy.includes("bot perfeito") || (budy.includes("bot foda"))){
tujuh = fs.readFileSync('./assets/voz/own.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}
if (budy.includes("bot chato") || (budy.includes("bot do krlh"))){
tujuh = fs.readFileSync('./assets/voz/mim.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}
if (budy.includes("mentira") || (budy.includes("mentiroso"))){
tujuh = fs.readFileSync('./assets/voz/blasfemia.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}
if (budy.includes("puta") || (budy.includes("me exaltei"))){
tujuh = fs.readFileSync('./assets/voz/exaltei.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}
if (budy.includes("n√£o gosto") || (budy.includes("n√£o gosto de voc√™"))){
tujuh = fs.readFileSync('./assets/voz/.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}
// Resposta para "mas bah tch√™"
if (budy.includes("mas bah tch√™")) {
    const audio = fs.readFileSync('./assets/voz/bah.mp3');
    loli.sendMessage(from, { audio: audio, mimetype: 'audio/mpeg', ptt: true }, { quoted: info });
}

// Resposta para "au au au"
if (budy.includes("au au au")) {
    const audio = fs.readFileSync('./assets/voz/au_au.mp3');
    loli.sendMessage(from, { audio: audio, mimetype: 'audio/mpeg', ptt: true }, { quoted: info });
}

// Resposta para "boa noite"
if (budy.includes("boa noite bot")) {
    const audio = fs.readFileSync('./assets/voz/boa_noite.mp3');
    loli.sendMessage(from, { audio: audio, mimetype: 'audio/mpeg', ptt: true }, { quoted: info });
}

// Resposta para "boa tarde"
if (budy.includes("boa tarde bot")) {
    const audio = fs.readFileSync('./assets/voz/boa_tarde.mp3');
    loli.sendMessage(from, { audio: audio, mimetype: 'audio/mpeg', ptt: true }, { quoted: info });
}

// Resposta para "bom dia"
if (budy.includes("bom dia bot")) {
    const audio = fs.readFileSync('./assets/voz/bom_dia.mp3');
    loli.sendMessage(from, { audio: audio, mimetype: 'audio/mpeg', ptt: true }, { quoted: info });
}

// Resposta para "quem voc√™ est√° chamando de bugada?"
if (budy.includes("bugada")) {
    const audio = fs.readFileSync('./assets/voz/bugada.mp3');
    loli.sendMessage(from, { audio: audio, mimetype: 'audio/mpeg', ptt: true }, { quoted: info });
}

// Resposta para "ownn que doguinho fofo, quem √© o cute cute da mam√£e"
if (budy.includes("ownn que doguinho fofo, quem √© o cute cute da mam√£e")) {
    const audio = fs.readFileSync('./assets/voz/cutecute.mp3');
    loli.sendMessage(from, { audio: audio, mimetype: 'audio/mpeg', ptt: true }, { quoted: info });
}

// Resposta para "empate"
if (budy.includes("empate")) {
    const audio = fs.readFileSync('./assets/voz/empate.mp3');
    loli.sendMessage(from, { audio: audio, mimetype: 'audio/mpeg', ptt: true }, { quoted: info });
}

// Resposta para "vit√≥ria"
if (budy.includes("vit√≥ria")) {
    const audio = fs.readFileSync('./assets/voz/vitoria.mp3');
    loli.sendMessage(from, { audio: audio, mimetype: 'audio/mpeg', ptt: true }, { quoted: info });
}

// Resposta para "derrota"
if (budy.includes("derrota")) {
    const audio = fs.readFileSync('./assets/voz/derrota.mp3');
    loli.sendMessage(from, { audio: audio, mimetype: 'audio/mpeg', ptt: true }, { quoted: info });
}

// Resposta para "esse comando n√£o existe baka!"
if (budy.includes("esse comando n√£o existe baka!")) {
    const audio = fs.readFileSync('./assets/voz/baka.mp3');
    loli.sendMessage(from, { audio: audio, mimetype: 'audio/mpeg', ptt: true }, { quoted: info });
}

if (budy.includes("Gay") || (budy.includes("gay"))){
tujuh = fs.readFileSync('./assets/voz/gay.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}

if (budy.includes("free fire") || (budy.includes("ff"))){
tujuh = fs.readFileSync('./assets/voz/freefire.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}

if (budy.includes("tentei") || (budy.includes("Tentei"))){
tujuh = fs.readFileSync('./assets/voz/eutentei.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}

if (budy.includes("Socorro") || (budy.includes("socorro"))){
tujuh = fs.readFileSync('./assets/voz/socorro.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}

if (budy.includes("Vou nada") || (budy.includes("vou nada"))){
tujuh = fs.readFileSync('./assets/voz/vou-nada.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}

if (budy.includes("amostradinho") || (budy.includes("Amostradinho"))){
tujuh = fs.readFileSync('./assets/voz/amostradinho.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}

if (budy.includes("Fez dnv") || (budy.includes("fez dnv"))){
tujuh = fs.readFileSync('./assets/voz/gay.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}

if (budy.includes("Gripado") || (budy.includes("gripado"))){
tujuh = fs.readFileSync('./assets/voz/gripado.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}
if (budy.includes("Vai Neymar") || (budy.includes("vai Neymar"))){
tujuh = fs.readFileSync('./assets/voz/vaineymar.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}
if (budy.includes("Demais") || (budy.includes("demais"))){
tujuh = fs.readFileSync('./assets/voz/demais.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}

// Resposta para "glub glub glub"
if (budy.includes("glub glub glub")) {
    const audio = fs.readFileSync('./assets/voz/glub.mp3');
    loli.sendMessage(from, { audio: audio, mimetype: 'audio/mpeg', ptt: true }, { quoted: info });
}

// Resposta para "como ousa quebrar as regras? Eu, albedo..."
if (budy.includes("como ousa quebrar as regras?")) {
    const audio = fs.readFileSync('./assets/voz/golpe_misericordia.mp3');
    loli.sendMessage(from, { audio: audio, mimetype: 'audio/mpeg', ptt: true }, { quoted: info });
}

// Resposta para "deveras interessante"
if (budy.includes("deveras interessante")) {
    const audio = fs.readFileSync('./assets/voz/interessante.mp3');
    loli.sendMessage(from, { audio: audio, mimetype: 'audio/mpeg', ptt: true }, { quoted: info });
}

// Resposta para "l√° l√° l√°"
if (budy.includes("l√° l√° l√°")) {
    const audio = fs.readFileSync('./assets/voz/lalala.mp3');
    loli.sendMessage(from, { audio: audio, mimetype: 'audio/mpeg', ptt: true }, { quoted: info });
}

// Resposta para "mas que por... O que significa isso?"
if (budy.includes("mas que por... O que significa isso?")) {
    const audio = fs.readFileSync('./assets/voz/porra.mp3');
    loli.sendMessage(from, { audio: audio, mimetype: 'audio/mpeg', ptt: true }, { quoted: info });
}

if (budy.includes("apanhar e ficar calado") || (budy.includes("apanhar e ficar calada"))){
tujuh = fs.readFileSync('./assets/voz/apanhar.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}

if (budy.includes("Finjo") || (budy.includes("finjo"))){
tujuh = fs.readFileSync('./assets/voz/finjo.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}

if (budy.includes("e o pix?") || (budy.includes("E o pix?"))){
tujuh = fs.readFileSync('./assets/voz/gay.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}

if (budy.includes("Lou√ßa") || (budy.includes("lou√ßa"))){
tujuh = fs.readFileSync('./assets/voz/pia.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}

// Resposta para "sigma"
if (budy.includes("sigma")) {
    const audio = fs.readFileSync('./assets/voz/sigma.mp3');
    loli.sendMessage(from, { audio: audio, mimetype: 'audio/mpeg', ptt: true }, { quoted: info });
}

// Resposta para "paga uma coca"
if (budy.includes("paga uma coca")) {
    const audio = fs.readFileSync('./assets/voz/paga_coca.mp3');
    loli.sendMessage(from, { audio: audio, mimetype: 'audio/mpeg', ptt: true }, { quoted: info });
}

// Resposta para "reclama da vida"
if (budy.includes("reclama da vida")) {
    const audio = fs.readFileSync('./assets/voz/reclama_vida.mp3');
    loli.sendMessage(from, { audio: audio, mimetype: 'audio/mpeg', ptt: true }, { quoted: info });
}
if (budy.includes("aiai") || (budy.includes("ai ai"))){
tujuh = fs.readFileSync('./assets/voz/aiai.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}
// Resposta para "desculpa"
if (budy.includes("desculpa")) {
    const audio = fs.readFileSync('./assets/voz/desculpa.mp3');
    loli.sendMessage(from, { audio: audio, mimetype: 'audio/mpeg', ptt: true }, { quoted: info });
}

// Resposta para "piscadinha"
if (budy.includes("piscadinha")) {
    const audio = fs.readFileSync('./assets/voz/piscadinha.mp3');
    loli.sendMessage(from, { audio: audio, mimetype: 'audio/mpeg', ptt: true }, { quoted: info });
}

// Resposta para "u√©?"
if (budy.includes("u√©?")) {
    const audio = fs.readFileSync('./assets/voz/ue.mp3');
    loli.sendMessage(from, { audio: audio, mimetype: 'audio/mpeg', ptt: true }, { quoted: info });
}

// Resposta para "uma pergunta"
if (budy.includes("uma pergunta")) {
    const audio = fs.readFileSync('./assets/voz/uma_pergunta.mp3');
    loli.sendMessage(from, { audio: audio, mimetype: 'audio/mpeg', ptt: true }, { quoted: info });
}

// Resposta para "vendo mem√≥rias"
if (budy.includes("vendo mem√≥rias")) {
    const audio = fs.readFileSync('./assets/voz/vendo_memorias.mp3');
    loli.sendMessage(from, { audio: audio, mimetype: 'audio/mpeg', ptt: true }, { quoted: info });
}
// Resposta para "√© hoje"
if (budy.includes("dom dom dom")) {
    const audio = fs.readFileSync('./assets/voz/domdom.mp3');
    loli.sendMessage(from, { audio: audio, mimetype: 'audio/mpeg', ptt: true }, { quoted: info });
}

// Resposta para "vai tomar no..."
if (budy.includes("vai tomar no")) {
    const audio = fs.readFileSync('./assets/voz/vtnc.mp3');
    loli.sendMessage(from, { audio: audio, mimetype: 'audio/mpeg', ptt: true }, { quoted: info });
}
if (budy.includes("Relaxar") || (budy.includes("relaxar"))){
tujuh = fs.readFileSync('./assets/voz/relaxar.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}
if (budy.includes("flamengo") || (budy.includes("Flamengo"))){
tujuh = fs.readFileSync('./assets/voz/relaxar.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}
if (budy.includes("Uii") || (budy.includes("uii"))){
tujuh = fs.readFileSync('./assets/voz/ui.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}
if (budy.includes("Cavalo") || (budy.includes("cavalo"))){
tujuh = fs.readFileSync('./assets/voz/cavalo.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}
if (budy.includes("uepa") || (budy.includes("Uepa"))){
tujuh = fs.readFileSync('./assets/voz/uepa.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}
if (budy.includes("e eu to liso?") || (budy.includes("E eu to liso?"))){
tujuh = fs.readFileSync('./assets/voz/e-eu-to-liso-e.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}

if (budy.includes("t√° fodidio") || (budy.includes("quando eu te pegar"))){
tujuh = fs.readFileSync('./assets/voz/voce_ta_fodido.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}
if (budy.includes("po√ßo") || (budy.includes("cavar um po√ßo"))){
tujuh = fs.readFileSync('./assets/voz/.boa-tarde-neymar-queria-cavar-um-poco.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}
if (budy.includes("Mudo") || (budy.includes("mudo"))){
tujuh = fs.readFileSync('./assets/voz/como-se-dizia-o-mudo.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}
if (budy.includes("Bolsonaro") || (budy.includes("bolsonaro"))){
tujuh = fs.readFileSync('./assets/voz/bolsonaro.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}
if (budy.includes("Faz o L") || (budy.includes("faz o L"))){
tujuh = fs.readFileSync('./assets/voz/fazol.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}
if (budy.includes("gado") || (budy.includes("Gado"))){
tujuh = fs.readFileSync('./assets/voz/gadomestre.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}
if (budy.includes("cade o pix?") || (budy.includes("Cade o pix?"))){
tujuh = fs.readFileSync('./assets/voz/cadeopix.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}

if (budy.includes("ele quer escolher") || (budy.includes("Ele quer escolher"))){
tujuh = fs.readFileSync('./assets/voz/uepa.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}
if (budy.includes("geme meu nome") || (budy.includes("Geme meu nome"))){
tujuh = fs.readFileSync('./assets/voz/gememeunomemp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}

if (budy.includes("tome") || (budy.includes("Tome"))){
tujuh = fs.readFileSync('./assets/voz/uepa.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}

if (budy.includes("que isso meu filho") || (budy.includes("q isso meu filho"))){
tujuh = fs.readFileSync('./assets/voz/que-e-isso-meu-filho-calma.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}

// Resposta para "me explica isso"
if (budy.includes("me explica isso")) {
    const audio = fs.readFileSync('./assets/voz/explica_isso.mp3');
    loli.sendMessage(from, { audio: audio, mimetype: 'audio/mpeg', ptt: true }, { quoted: info });
}

if (budy.includes("Uiii") || (budy.includes("uiii"))){
tujuh = fs.readFileSync('./assets/voz/uiii.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}

if (budy.includes("errei") || (budy.includes("Errei"))){
tujuh = fs.readFileSync('./assets/voz/erreifuimlk.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}

if (budy.includes("Como √© amigo?") || (budy.includes("como √© amigo?"))){
tujuh = fs.readFileSync('./assets/voz/como_e_amigo.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}

if (budy.includes("chega") || (budy.includes("Chega"))){
tujuh = fs.readFileSync('./assets/voz/chega.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}

// Resposta para "manda √°udio"
if (budy.includes("manda √°udio")) {
    const audio = fs.readFileSync('./assets/voz/manda_audio.mp3');
    loli.sendMessage(from, { audio: audio, mimetype: 'audio/mpeg', ptt: true }, { quoted: info });
}

// Resposta para "√© hoje"
if (budy.includes("√© hoje")) {
    const audio = fs.readFileSync('./assets/voz/e_hoje.mp3');
    loli.sendMessage(from, { audio: audio, mimetype: 'audio/mpeg', ptt: true }, { quoted: info });
}

if (budy.includes("calma calabreso") || (budy.includes("Calma calabreso"))){
tujuh = fs.readFileSync('./assets/voz/calma_calabreso.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}

if (budy.includes("Kwai") || (budy.includes("kwai"))){
tujuh = fs.readFileSync('./assets/voz/kwai.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}
if (budy.includes("sera?") || (budy.includes("ser√°?"))){
tujuh = fs.readFileSync('./assets/voz/sera-minha-tropinha-meme.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}
if (budy.includes("ele ta colocando a champions no bolso") || (budy.includes("ele ta colocando a Champions no bolso"))){
tujuh = fs.readFileSync('./assets/voz/ele-ta-colocando-a-champions-no-boloso.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}

if (budy.includes("pq n√£o comi sua m√£e") || (budy.includes("pq eu n√£o comi sua m√£e"))){
tujuh = fs.readFileSync('./assets/voz/issovcfalapqeunaocomisuamae.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}

if (budy.includes("Eita gl√≥ria") || (budy.includes("eita gl√≥ria"))){
tujuh = fs.readFileSync('./assets/voz/eitagloria.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}
if (budy.includes("siuuu") || (budy.includes("Siuuu"))){
tujuh = fs.readFileSync('./assets/voz/siu.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}
if (budy.includes("eu sou o mior") || (budy.includes("Eu sou o mior"))){
tujuh = fs.readFileSync('./assets/voz/eusouomior.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}
if (budy.includes("Cristiano ronaldo") || (budy.includes("cristiano ronaldo"))){
tujuh = fs.readFileSync('./assets/voz/cr7.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}
if (budy.includes("ave maria doido") || (budy.includes("3 capa"))){
tujuh = fs.readFileSync('./assets/voz/avemaridoido.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}

if (budy.includes("ele gosta") || (budy.includes("Ele gost"))){
tujuh = fs.readFileSync('./assets/voz/elegosta.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}

if (budy.includes("matue") || (budy.includes("Matue"))){
tujuh = fs.readFileSync('./assets/voz/matue.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}

if (budy.includes("pare") || (budy.includes("pare"))){
tujuh = fs.readFileSync('./assets/voz/pare.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}
if (budy.includes("√â brincadeira hein") || (budy.includes("√© brincadeira hein"))){
tujuh = fs.readFileSync('./assets/voz/e-brincadeira-hein.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}

if (budy.includes("Poze") || (budy.includes("poze"))){
tujuh = fs.readFileSync('./assets/voz/mcpoze.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}
if (budy.includes("Odio") || (budy.includes("odio"))){
tujuh = fs.readFileSync('./assets/voz/odio.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}
if (budy.includes("Caf√©") || (budy.includes("cafe"))){
tujuh = fs.readFileSync('./assets/voz/temcafe.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}
if (budy.includes("Ain") || (budy.includes("ain"))){
tujuh = fs.readFileSync('./assets/voz/ain.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}
// Resposta para "√© hoje"
if (budy.includes("minha xrc")) {
    const audio = fs.readFileSync('./assets/voz/ai_minha_xrc.mp3');
    loli.sendMessage(from, { audio: audio, mimetype: 'audio/mpeg', ptt: true }, { quoted: info });
}
if (budy.includes("Paola") || (budy.includes("paola"))){
tujuh = fs.readFileSync('./assets/voz/paola.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}
if (budy.includes("Nobru") || (budy.includes("nobru"))){
tujuh = fs.readFileSync('./assets/voz/nobru.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}
// Resposta para "√© hoje"
if (budy.includes("Bill")) {
    const audio = fs.readFileSync('./assets/voz/borabill.mp3');
    loli.sendMessage(from, { audio: audio, mimetype: 'audio/mpeg', ptt: true }, { quoted: info });
}
// Resposta para "√© hoje"
if (budy.includes("fih do bill")) {
    const audio = fs.readFileSync('./assets/voz/fih_dobill.mp3');
    loli.sendMessage(from, { audio: audio, mimetype: 'audio/mpeg', ptt: true }, { quoted: info });
}
// Resposta para "√© hoje"
if (budy.includes("mulher do bill")) {
    const audio = fs.readFileSync('./assets/voz/mulher_dobill.mp3');
    loli.sendMessage(from, { audio: audio, mimetype: 'audio/mpeg', ptt: true }, { quoted: info });
}
// Resposta para "√© hoje"
if (budy.includes("nobru")) {
    const audio = fs.readFileSync('./assets/voz/Nobru.mp3');
    loli.sendMessage(from, { audio: audio, mimetype: 'audio/mpeg', ptt: true }, { quoted: info });
}
// Resposta para "√© hoje"
if (budy.includes("vai tomar na xrc")) {
    const audio = fs.readFileSync('./assets/voz/vai_tomar_na_xrc.mp3');
    loli.sendMessage(from, { audio: audio, mimetype: 'audio/mpeg', ptt: true }, { quoted: info });
}
// Resposta para "√© hoje"
if (budy.includes("cabelinho")) {
    const audio = fs.readFileSync('./assets/voz/cabelinho.mp3');
    loli.sendMessage(from, { audio: audio, mimetype: 'audio/mpeg', ptt: true }, { quoted: info });
}
// Resposta para "√© hoje"
if (budy.includes("oi lindo")) {
    const audio = fs.readFileSync('./assets/voz/oi_lindo.mp3');
    loli.sendMessage(from, { audio: audio, mimetype: 'audio/mpeg', ptt: true }, { quoted: info });
}
// Resposta para "√© hoje"
if (budy.includes("whatsapp")) {
    const audio = fs.readFileSync('./assets/voz/whatsapp.mp3');
    loli.sendMessage(from, { audio: audio, mimetype: 'audio/mpeg', ptt: true }, { quoted: info });
}
// Resposta para "√© hoje"
if (budy.includes("lista gay")) {
    const audio = fs.readFileSync('./assets/voz/lista_gay.mp3');
    loli.sendMessage(from, { audio: audio, mimetype: 'audio/mpeg', ptt: true }, { quoted: info });
}
if (budy.includes("fabin") || (budy.includes("fabio"))){
tujuh = fs.readFileSync('./assets/voz/oifabio.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}

// Resposta para "√© hoje"
if (budy.includes("gozar")) {
    const audio = fs.readFileSync('./assets/voz/gozar.mp3');
    loli.sendMessage(from, { audio: audio, mimetype: 'audio/mpeg', ptt: true }, { quoted: info });
}

// Resposta para "√© hoje"
if (budy.includes("m√£e do bill")) {
    const audio = fs.readFileSync('./assets/voz/mae_dobill.mp3');
    loli.sendMessage(from, { audio: audio, mimetype: 'audio/mpeg', ptt: true }, { quoted: info });
}
// Resposta para "aff"
if (budy.includes("aff")) {
    const audio = fs.readFileSync('./assets/voz/aff.mp3');
    loli.sendMessage(from, { audio: audio, mimetype: 'audio/mpeg', ptt: true }, { quoted: info });
}
if (budy.includes('prefixo') || (budy.includes('Prefixo'))){
reply(`[${prefix}]`)
}

if (budy.includes("boa noite") || (budy.includes("Boa noite"))){
tujuh = fs.readFileSync('./loli/audio/boanoite.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}



if (budy.includes("bom dia") || (budy.includes("Bom dia"))){
tujuh = fs.readFileSync('./loli/audio/bomdia.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}

if (budy.includes("Os de vdd sei quem s√£o") || budy.includes("os de vdd sei quem s√£o") || budy.includes("tra√≠do")){
tujuh = fs.readFileSync('./loli/audio/osdevdd.mp3');
await loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mp4', ptt:true}, {quoted: info})
}

if (budy.includes("Oii") || (budy.includes("Oi"))){
tujuh = fs.readFileSync('./loli/audio/oi.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}
if (budy.includes("vdd") || (budy.includes("verdade"))){
tujuh = fs.readFileSync('./loli/audio/verdade.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}
if (budy.includes("tranquilo") || (budy.includes("suave"))){
tujuh = fs.readFileSync('./loli/audio/tranquilo.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}
if (budy.includes("tchau") || (budy.includes("flw"))){
tujuh = fs.readFileSync('./loli/audio/tchau.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}
if (budy.includes("talvez") || (budy.includes("Talvez"))){
tujuh = fs.readFileSync('./loli/audio/talvez.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}
if (budy.includes("Simples") || (budy.includes("simples"))){
tujuh = fs.readFileSync('./loli/audio/simples.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}
if (budy.includes("Siiim") || (budy.includes("siiiim"))){
tujuh = fs.readFileSync('./loli/audio/sim.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}

if (budy.includes("shipo") || (budy.includes("Shipo"))){
tujuh = fs.readFileSync('./loli/audio/shipo.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}

if (budy.includes("sair") || (budy.includes("Sair"))){
tujuh = fs.readFileSync('./loli/audio/sair.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}
if (budy.includes("bot ruim") || (budy.includes("Bot ruim"))){
tujuh = fs.readFileSync('./loli/audio/ruim.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}
if (budy.includes("problema seu") || (budy.includes("fds"))){
tujuh = fs.readFileSync('./loli/audio/prolema.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}

if (
    budy.includes("Play") || 
    budy.includes("Como baixa m√∫sica?") || 
    budy.includes("Como que baixa m√∫sica?") || 
    budy.includes("como baixa m√∫sica") || 
    budy.includes("baixar m√∫sica") || 
    budy.includes("m√∫sica") || 
    budy.includes("Como escutar m√∫sica?") || 
    budy.includes("Como pe√ßo uma m√∫sica?")
) {
    tujuh = fs.readFileSync('./loli/audio/play.mp3');
    loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info});
}
if (budy.includes("boa tarde") || (budy.includes("Boa tarde"))){
tujuh = fs.readFileSync('./loli/audio/boatarde.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}
if (budy.includes("anivers√°rio") || (budy.includes("Anivers√°rio"))){
tujuh = fs.readFileSync('./loli/audio/feliz.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}
if (budy.includes("gambare") || (budy.includes("Gambare"))){
tujuh = fs.readFileSync('./loli/audio/gambare.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}
if (budy.includes("galera") || (budy.includes("rapaziada"))){
tujuh = fs.readFileSync('./loli/audio/fala.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}
if (budy.includes("tlgd") || (budy.includes("entendi"))){
tujuh = fs.readFileSync('./loli/audio/entendo.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}
if (budy.includes("doen√ßa") || (budy.includes("doente"))){
tujuh = fs.readFileSync('./loli/audio/doenca.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}
if (budy.includes("chora") || (budy.includes("chor√£o"))){
tujuh = fs.readFileSync('./loli/audio/chora.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}
if (budy.includes("casal") || (budy.includes("casada"))){
tujuh = fs.readFileSync('./loli/audio/casal.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}
if (budy.includes("carro") || (budy.includes("bb"))){
tujuh = fs.readFileSync('./loli/audio/bb.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}
if (budy.includes("babaca") || (budy.includes("fdp"))){
tujuh = fs.readFileSync('./loli/audio/babaca.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}
if (budy.includes("demora") || (budy.includes("Demora"))){
tujuh = fs.readFileSync('./loli/audio/anos.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}
if (budy.includes("Espera") || (budy.includes("espera"))){
tujuh = fs.readFileSync('./loli/audio/2minuto.mp3')
loli.sendMessage(from, {audio: tujuh, mimetype: 'audio/mpeg', ptt:true}, {quoted: info}) 
}

//‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ù∞ÔΩ•NOME SEM PREFIXOÔΩ•‚ù±‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\\

if(budy.match("üè≥Ô∏è‚Äçüåà")) {
bla = fs.readFileSync("./figurinhas/gay.webp")
loli.sendMessage(from, {sticker: bla}, {quoted: info})
}

if(budy.match("üòê")) {
bla = fs.readFileSync("./figurinhas/smoke.webp")
loli.sendMessage(from, {sticker: bla}, {quoted: info})
}

if(budy.match("üòè")) {
bla = fs.readFileSync("./figurinhas/halerquin.webp")
loli.sendMessage(from, {sticker: bla}, {quoted: info})
}

if(budy.match("üòã")) {
bla = fs.readFileSync("./figurinhas/coxinha.webp")
loli.sendMessage(from, {sticker: bla}, {quoted: info})
}

if(budy.match("sexo") || (budy.match("Sexo"))) {
bla = fs.readFileSync("./figurinhas/168.webp")
loli.sendMessage(from, {sticker: bla}, {quoted: info})
}

if(budy.match("Tedio") || (budy.match("tedio") || (budy.match("T√©dio")))) {
bla = fs.readFileSync("./figurinhas/164.webp")
loli.sendMessage(from, {sticker: bla}, {quoted: info})
}

if(budy.match("üò¢") || (budy.match("üò™") || (budy.match("üò≠")))) {
bla = fs.readFileSync("./figurinhas/131.webp")
loli.sendMessage(from, {sticker: bla}, {quoted: info})
}

}} catch (erro) {
console.log(erro)
}})



loli.ev.on('connection.update', (update) => {
const { connection, lastDisconnect } = update
if(lastDisconnect === undefined) {

}

if(connection === 'close') {
var shouldReconnect = (lastDisconnect.error.Boom)?.output?.statusCode !== DisconnectReason.loggedOut  
ligarbot()
}})}
ligarbot()

fs.watchFile('./menus/alugar.js', (curr, prev) => {
if (curr.mtime.getTime() !== prev.mtime.getTime()) {
console.log('O Menu foi editada, irei reiniciar...');
process.exit()
}
})

fs.watchFile('./menus/menudono.js', (curr, prev) => {
if (curr.mtime.getTime() !== prev.mtime.getTime()) {
console.log('O Menu foi editada, irei reiniciar...');
process.exit()
}
})

fs.watchFile('./menus/menu.js', (curr, prev) => {
if (curr.mtime.getTime() !== prev.mtime.getTime()) {
console.log('O Menu foi editada, irei reiniciar...');
process.exit()
}
})

fs.watchFile('./start.sh', (curr, prev) => {
if (curr.mtime.getTime() !== prev.mtime.getTime()) {
console.log('O start.sh foi editada, irei reiniciar...');
process.exit()
}
})

fs.watchFile('./dono.js', (curr, prev) => {
if (curr.mtime.getTime() !== prev.mtime.getTime()) {
console.log('A index foi editada, irei reiniciar...');
process.exit()
}
})

fs.watchFile('./index.js', (curr, prev) => {
if (curr.mtime.getTime() !== prev.mtime.getTime()) {
console.log('A index foi editada, irei reiniciar...');
process.exit()
}
})

fs.watchFile('./config.js', (curr, prev) => {
if (curr.mtime.getTime() !== prev.mtime.getTime()) {
console.log('A config foi editada, irei reiniciar...');
process.exit()
}
})

